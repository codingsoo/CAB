[
  {
    "number": 82,
    "title": "\u8bf7\u6559Pretrian\u4e2d\u65ad\u540e\u7ee7\u7eed\u8bad\u7ec3\u7684\u7591\u95ee",
    "created_at": "2024-11-04T03:47:03Z",
    "closed_at": "2024-11-07T23:57:30Z",
    "labels": [],
    "url": "https://github.com/jingyaogong/minimind/issues/82",
    "body": "\u5728\u6267\u884cPretrain.py\u65f6\u5982\u679c\u6ca1\u6709\u8bad\u7ec3\u5b8c\u5c31\u4e2d\u65ad\u4e86\r\n\u60f3\u8981\u5728\u4e2d\u65ad\u524d\u7684checkpoint\u7684\u57fa\u7840\u4e0a\u7ee7\u7eed\u8bad\u7ec3\uff0c\u672c\u9879\u76ee\u7684\u4ee3\u7801\u8bf7\u95ee\u5e94\u8be5\u4fee\u6539\u54ea\u4e2a\u90e8\u5206\u5440\u3002\r\n\u8c22\u8c22\u5404\u4f4d\u5927\u4f6c",
    "comments_url": "https://api.github.com/repos/jingyaogong/minimind/issues/82/comments",
    "author": "VictorSun1996",
    "comments": [
      {
        "user": "jingyaogong",
        "created_at": "2024-11-04T04:49:52Z",
        "body": "\u53ef\u4ee5\u770b\u4e00\u4e0b\u4f60 `./out/pretrain_xx_xx.pth` \u7684\u4fee\u6539\u65f6\u95f4\uff0c\u5c31\u662f\u4f60\u4e2d\u65ad\u4e4b\u524d\u88ab\u4fdd\u5b58\u7684\u6700\u540e\u4e00\u6b21checkpoint\u65f6\u95f4\r\n\r\n\u6240\u4ee5\u628a `1-pretrain.py` \u7b2c105\u884c\u6362\u6210\r\n```\r\ndef init_model():\r\n    def count_parameters(model):\r\n        return sum(p.numel() for p in model.parameters() if p.requires_grad)\r\n\r\n    tokenizer = AutoTokenizer.from_pretrained('./model/minimind_tokenizer')\r\n\r\n    model = Transformer(lm_config).to(args.device)\r\n    moe_path = '_moe' if lm_config.use_moe else ''\r\n    ckp = f'./out/pretrain_{lm_config.dim}{moe_path}.pth'\r\n\r\n    state_dict = torch.load(ckp, map_location=args.device)\r\n\r\n    # \u5904\u7406\u4e0d\u9700\u8981\u7684\u524d\u7f00\r\n    unwanted_prefix = '_orig_mod.'\r\n    for k, v in list(state_dict.items()):\r\n        if k.startswith(unwanted_prefix):\r\n            state_dict[k[len(unwanted_prefix):]] = state_dict.pop(k)\r\n\r\n    for k, v in list(state_dict.items()):\r\n        if 'mask' in k:\r\n            del state_dict[k]\r\n\r\n    # \u52a0\u8f7d\u5230\u6a21\u578b\u4e2d\r\n    model.load_state_dict(state_dict, strict=False)\r\n    Logger(f'LLM\u603b\u53c2\u6570\u91cf\uff1a{count_parameters(model) / 1e6:.3f} \u767e\u4e07')\r\n    return model, tokenizer\r\n```\r\n\u52a0\u8f7d\u5b83\u5373\u53ef"
      },
      {
        "user": "VictorSun1996",
        "created_at": "2024-11-04T07:40:28Z",
        "body": "> \u53ef\u4ee5\u770b\u4e00\u4e0b\u4f60 `./out/pretrain_xx_xx.pth` \u7684\u4fee\u6539\u65f6\u95f4\uff0c\u5c31\u662f\u4f60\u4e2d\u65ad\u4e4b\u524d\u88ab\u4fdd\u5b58\u7684\u6700\u540e\u4e00\u6b21checkpoint\u65f6\u95f4\r\n> \r\n> \u6240\u4ee5\u628a `1-pretrain.py` \u7b2c105\u884c\u6362\u6210\r\n> \r\n> ```\r\n> def init_model():\r\n>     def count_parameters(model):\r\n>         return sum(p.numel() for p in model.parameters() if p.requires_grad)\r\n> \r\n>     tokenizer = AutoTokenizer.from_pretrained('./model/minimind_tokenizer')\r\n> \r\n>     model = Transformer(lm_config).to(args.device)\r\n>     moe_path = '_moe' if lm_config.use_moe else ''\r\n>     ckp = f'./out/pretrain_{lm_config.dim}{moe_path}.pth'\r\n> \r\n>     state_dict = torch.load(ckp, map_location=args.device)\r\n> \r\n>     # \u5904\u7406\u4e0d\u9700\u8981\u7684\u524d\u7f00\r\n>     unwanted_prefix = '_orig_mod.'\r\n>     for k, v in list(state_dict.items()):\r\n>         if k.startswith(unwanted_prefix):\r\n>             state_dict[k[len(unwanted_prefix):]] = state_dict.pop(k)\r\n> \r\n>     for k, v in list(state_dict.items()):\r\n>         if 'mask' in k:\r\n>             del state_dict[k]\r\n> \r\n>     # \u52a0\u8f7d\u5230\u6a21\u578b\u4e2d\r\n>     model.load_state_dict(state_dict, strict=False)\r\n>     Logger(f'LLM\u603b\u53c2\u6570\u91cf\uff1a{count_parameters(model) / 1e6:.3f} \u767e\u4e07')\r\n>     return model, tokenizer\r\n> ```\r\n> \r\n> \u52a0\u8f7d\u5b83\u5373\u53ef\r\n\r\n\u8c22\u8c22\uff0c\u660e\u767d\u4e86\u3002"
      }
    ]
  },
  {
    "number": 23,
    "title": "\u5173\u4e8ePretrainDataset\u8bfb\u53d6\u8bad\u7ec3\u6570\u636e\u7684\u95ee\u9898",
    "created_at": "2024-09-14T07:17:14Z",
    "closed_at": "2024-09-16T15:14:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jingyaogong/minimind/issues/23",
    "body": "\r\n```python\r\nclass PretrainDataset(Dataset):\r\n    def __init__(self, data_path_lst, max_length=512, memmap=False):\r\n        super().__init__()\r\n        #\r\n        if memmap:\r\n            with open(data_path_lst[0], 'r') as f:\r\n                nbytes = f.seek(0, 2)\r\n                flen = f.tell() // np.dtype('uint16').itemsize\r\n            self.data = np.memmap(data_path_lst[0], dtype=np.dtype('uint16'), shape=(flen // max_length, max_length))\r\n        else:\r\n            data_lst = []\r\n            for data_path in data_path_lst:\r\n                with open(data_path, 'rb') as f:\r\n                    data = np.fromfile(f, dtype=np.uint16)\r\n                    data_lst.append(data)\r\n            data = np.concatenate(data_lst)\r\n            data = data[:max_length * int(len(data) / max_length)]\r\n            # np.random.shuffle(data)\r\n            self.data = data.reshape(-1, max_length)\r\n```\r\n \r\n\r\n\u4ece\u4ee3\u7801\u903b\u8f91\u4e0a\u770b\uff0cPretrainDataset\u8bfb\u53d6bin\u6570\u636e\u7684\u65f6\u5019\uff0c\u6309\u7167512\u7684\u957f\u5ea6\u4f5c\u4e3a\u4e00\u6761\u6570\u636e\u4e86\u597d\u50cf\u3002\r\n\u4f46\u662f\u5728\u6570\u636e\u5b58\u50a8\u7684\u65f6\u5019\uff0c\u5404\u6761\u6570\u636e\u5e76\u6ca1\u6709\u683c\u5f0f\u5316\u6210512\u7684\u7a0b\u5ea6\u518d\u5b58\u5165bin\u6587\u4ef6\u4e2d\uff0c\u5982\u679c\u6309\u7167512\u957f\u5ea6\u8bfb\u53d6\u51fa\u6765\uff0c\u8bad\u7ec3\u6570\u636e\u53ef\u80fd\u6ca1\u6709\u4e25\u683c\u6309\u7167\u8bad\u7ec3\u6570\u636e\u96c6\u7684\u6761\u76ee\u8fdb\u884c\u5212\u5206\u5427\u3002\r\n",
    "comments_url": "https://api.github.com/repos/jingyaogong/minimind/issues/23/comments",
    "author": "jasonheyh",
    "comments": [
      {
        "user": "jingyaogong",
        "created_at": "2024-09-14T07:42:44Z",
        "body": "\u662f\u7684\u6ca1\u6709\u6309\u7167\u957f\u5ea6\u5212\u5206\uff1a\r\n```\r\n\u6587\u672c1</s>\u6587\u672c2</s>\u6587\u672c3</s>\u6587\u672c4</s>...\r\n```\r\n\r\n\u4f8b\u5982\r\n```\r\n\u5e8a\u524d\u660e\u6708\u5149</s>\u7591\u662f\u5730\u4e0a\u971c</s>\u4e3e\u5934\u671b\u660e\u6708</s>\u4f4e\u5934\u601d\u6545\u4e61</s>\r\n```\r\n\r\n\u8bad\u7ec3\u5982\u679c`context_length=10`\r\n\u7528\u8fd910\u4e2atoken\uff1a\r\n```\r\n\u5e8a\u524d\u660e\u6708\u5149</s>\u7591\u662f\u5730\u4e0a\r\n```\r\n\r\n\u6216\u8005\u662f\u8fd910\u4e2atoken\uff1a\r\n```\r\n\u5730\u4e0a\u971c</s>\u4e3e\u5934\u671b\u660e\u6708</s>\r\n```\r\n\r\n\u867d\u7136\u770b\u8d77\u6765\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u53e5\u5b50\uff0c\u4f46\u8f93\u5165\u505a\u9884\u8bad\u7ec3\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f1a\u635f\u5931\u4e00\u4e9b\u6587\u672c\u9996\u5c3e\u7684\u4fe1\u606f\u3002\r\n\u5728\u8fd9\u4e9b\u7a97\u53e3\u5185\u6355\u6349\u5c40\u90e8\u4e0a\u4e0b\u6587\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\u5373\u4f7f\u7a97\u53e3\u4e4b\u95f4\u6ca1\u6709\u91cd\u53e0\uff0c\u6a21\u578b\u5728\u5b66\u6587\u672c\u4e2d\u5c40\u90e8\u7684\u8bed\u8a00\u6a21\u5f0f\u3002\u56e0\u4e3a\u6709 </s> \u5206\u9694\u7b26\uff0c\u53ef\u4ee5\u660e\u786e\u6bcf\u4e2a\u53e5\u5b50\u6216\u6bb5\u843d\u7684\u8fb9\u754c\u3002\u8bf4\u767d\u4e86\u5c31\u662f\u76f4\u63a5\u7ec3\u4e60\u63a5\u9f99\u3002\r\n\r\n\u5f53\u7136\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u4e25\u683c\u786e\u4fdd\u53e5\u5b50\u4e4b\u95f4padding max_length\u7684\u7a7a\u7f3a\u90e8\u5206\uff0c\u76f8\u5f53\u4e8e\u8865\u4e0a\u53e5\u5934\u53e5\u5c3e\u7684\u5185\u5bb9\uff0c\u6548\u679c\u4f1a\u66f4\u597d\u4e00\u4e9b\uff0c\u4f46\u5f88\u6709\u9650\u3002\r\n\r\n\u53e5\u5b50\u5982\u679c\u53ea\u6709100\u957f\u5ea6\uff0c\u8865\u9f50412\u4e2a\u7a7a\u767dtoken\u51d1\u5230512\uff0c\u751a\u81f3\u8865924\u52301024\uff0c\u6587\u4ef6\u5c31\u5197\u4f59\u5f97\u6bd4\u8f83\u5927\u4e86\u3002\r\n\r\n\u8fd9\u91cc\u5c31\u662f\u4e3a\u4e86\u8282\u7701\u7a7a\u95f4\u727a\u7272\u8f7b\u5fae\u7684\u9884\u8bad\u7ec3\u6548\u679c\u4e86\u3002"
      },
      {
        "user": "jasonheyh",
        "created_at": "2024-09-14T08:08:03Z",
        "body": "\u8c22\u8c22\uff0c\u660e\u767d\u4e86\uff0c\u89e3\u91ca\u7684\u975e\u5e38\u660e\u767d\u3002"
      },
      {
        "user": "jingyaogong",
        "created_at": "2024-09-14T08:19:12Z",
        "body": "> \u8c22\u8c22\uff0c\u660e\u767d\u4e86\uff0c\u89e3\u91ca\u7684\u975e\u5e38\u660e\u767d\u3002\r\n\r\n\u597d\u7684\uff0cNo Thanks\r\n\r\n\u6709\u4ec0\u4e48\u95ee\u9898\u968f\u65f6\u7ee7\u7eed\u4ea4\u6d41~"
      }
    ]
  }
]