[
  {
    "number": 47,
    "title": "TryParse on empty color string now returns null",
    "created_at": "2024-11-14T14:48:44Z",
    "closed_at": "2024-11-22T20:20:14Z",
    "labels": [
      "duplicate"
    ],
    "url": "https://github.com/dcronqvist/DotTiled/pull/47",
    "body": "Moved exception into Parse in the case of a string greater than 1 character (\"#\")",
    "comments_url": "https://api.github.com/repos/dcronqvist/DotTiled/issues/47/comments",
    "author": "differenceclouds",
    "comments": [
      {
        "user": "dcronqvist",
        "created_at": "2024-11-16T12:57:17Z",
        "body": "I am not sure I agree with this modification. Typically in C#, a `Parse` method will be used when you expect the parsing to be successful (and want an exception to be thrown if it fails since that is an unexpected outcome). \r\n\r\n`TryParse` is used when you would like to attempt to parse a string into some kind of structure, and get a `bool` result of its success.\r\n\r\nTo be in line with typical C# conventions, I think we should stick to the current implementation of letting `Parse` throw an exception and have `TryParse` be exception-less. \r\n\r\nPerhaps we are trying to solve a different problem here? Is there some kind of parsing error regarding colors that you are attempting to solve? Perhaps one that is expected to be present when there is none?"
      },
      {
        "user": "differenceclouds",
        "created_at": "2024-11-16T19:18:53Z",
        "body": "Basically, there are scenarios where Tiled will output a color property with an empty string. Like if you make an object, and just add a new Color property to it, but leave it unset, the tmx will save with that property as an empty string. If the color property is part of a custom type however, the tmx won't add the property at all if it is unset. So I think it makes sense to allow the color value to be null, or perhaps an Optional. Or just return black as is the case in a lot of other places in the library. My fix keeps the exception in the case that the string is greater than one character, but returns null (or default) in the case that the string is one character, since it recurses with \"#\" added in any case. The difference between Parse and TryParse is a bit arbitrary to me, though, so however it's implemented is fine with me."
      },
      {
        "user": "dcronqvist",
        "created_at": "2024-11-21T20:04:09Z",
        "body": "I believe I understand the issue you are describing, and I have made a draft PR #63 with a proposed solution. If you have time, could you check if the proposed solution works for the case you are describing? Or if you can review the solution in a way to check that it would work."
      },
      {
        "user": "differenceclouds",
        "created_at": "2024-11-22T17:55:22Z",
        "body": "Yep, that works fine!"
      },
      {
        "user": "dcronqvist",
        "created_at": "2024-11-22T20:19:44Z",
        "body": "Great, then I'll close this PR as duplicate :)"
      }
    ],
    "satisfaction_conditions": [
      "Handles empty color strings from Tiled output gracefully without exceptions",
      "Maintains C# convention where Parse throws exceptions for invalid formats and TryParse handles failures silently",
      "Provides clear null/default value handling for unset color properties",
      "Ensures compatibility with Tiled's property serialization behavior"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:50:43"
    }
  }
]