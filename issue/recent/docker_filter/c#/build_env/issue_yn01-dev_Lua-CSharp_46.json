{
  "number": 46,
  "title": "Optimize: VM implementation \"switch case\" to \"delegate array\"",
  "created_at": "2024-10-19T06:27:48Z",
  "closed_at": "2024-11-14T08:32:46Z",
  "labels": [],
  "url": "https://github.com/yn01-dev/Lua-CSharp/pull/46",
  "body": "This PR is a large optimization.\r\nNBodyBenchmark \r\n.NET8  12ms -> 6.2ms\r\nIL2CPP 81ms ->15ms\r\n\r\n",
  "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/46/comments",
  "author": "Akeit0",
  "comments": [
    {
      "user": "Akeit0",
      "created_at": "2024-10-22T13:59:59Z",
      "body": "All changes are internal, so I think nothing is broken.\n\n---\n\nI think I've finished revising them according to your comment."
    },
    {
      "user": "yn01-dev",
      "created_at": "2024-10-25T00:35:19Z",
      "body": "I haven't looked into the implementation of LuaVirtualMachine in detail yet, so I'll merge it in as soon as I've checked it.\n\n---\n\nI have checked the VM implementation. It looks very good. The only thing that bothers me is that SetOperations is separated into a separate Operators class. Is there a reason for this?\r\n\r\nAlso, I would also be grateful if you could let me know if you have any references for this optimization.\n\n---\n\nThere is a conflict due to the merge of #47, could I resolve this on my end?"
    },
    {
      "user": "Akeit0",
      "created_at": "2024-11-04T02:08:44Z",
      "body": "Of course!\n\n---\n\n> I have checked the VM implementation. It looks very good. The only thing that bothers me is that SetOperations is separated into a separate Operators class. Is there a reason for this?\r\n> \r\n> Also, I would also be grateful if you could let me know if you have any references for this optimization.\r\n\r\nConsidering that LuaVirtualMachine is a static class, and that using lambda expressions reduces readability and the visibility of exceptions, I use nested class.\n\n---\n\n> Also, I would also be grateful if you could let me know if you have any references for this optimization.\r\n\r\nNo references available. I looked at the generated code and found that it was less efficient, so I adjusted it to generate the optimal code"
    },
    {
      "user": "yn01-dev",
      "created_at": "2024-11-05T02:49:05Z",
      "body": "I've resolved the conflicts and formatted the code.\r\n\r\nIf possible, could you please add comments to each step of the code? This will help me and other contributors understand the code properly."
    },
    {
      "user": "Akeit0",
      "created_at": "2024-11-05T09:35:20Z",
      "body": "@AnnulusGames \r\nOK! Shall I leave the original async code in the comments?\n\n---\n\nAre these comments sufficient?"
    }
  ],
  "satisfaction_conditions": [
    "Clear justification for structural code organization decisions",
    "Evidence of optimization effectiveness analysis",
    "Maintainable code documentation",
    "Conflict-free integration with existing codebase",
    "Preservation of core functionality"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-04-05 01:49:46"
  },
  "git_commit_info": {
    "sha": "b3b7d8d976733929d0f8726b46cb688a4ceb7215",
    "date": "2024-10-18T02:57:39Z",
    "message": "Update: package version",
    "author": "AnnulusGames"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-7d78a7c661b7eb7fdf58002b69057a0c4230504c.pack\n./.git/objects/pack/pack-7d78a7c661b7eb7fdf58002b69057a0c4230504c.rev\n./.git/objects/pack/pack-7d78a7c661b7eb7fdf58002b69057a0c4230504c.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/main\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/main\n./.git/logs/HEAD\n./.git/index\n./Icon.png\n./Lua.sln\n./docs\n./docs/Benchmark.png\n./docs/Header.png\n./docs/img1.png\n./sandbox\n./sandbox/Benchmark\n./sandbox/Benchmark/AddBenchmark.cs\n./sandbox/Benchmark/Benchmark.csproj\n./sandbox/Benchmark/Benchmark.sln\n./sandbox/Benchmark/BenchmarkCore.cs\n./sandbox/Benchmark/FileHelper.cs\n./sandbox/Benchmark/InterpreterSteps.cs\n./sandbox/Benchmark/NBodyBenchmark.cs\n./sandbox/Benchmark/Program.cs\n./sandbox/Benchmark/add.lua\n./sandbox/Benchmark/coroutine.lua\n./sandbox/Benchmark/n-body.lua\n./sandbox/Benchmark/CoroutineBenchmark.cs\n./sandbox/ConsoleApp1\n./sandbox/ConsoleApp1/ConsoleApp1.csproj\n./sandbox/ConsoleApp1/LVec3.cs\n./sandbox/ConsoleApp1/Program.cs\n./sandbox/ConsoleApp1/sample.txt\n./sandbox/ConsoleApp1/test.lua\n./src\n./src/Lua.SourceGenerator\n./src/Lua.SourceGenerator/Comparer.cs\n./src/Lua.SourceGenerator/DiagnosticDescriptors.cs\n./src/Lua.SourceGenerator/Lua.SourceGenerator.csproj\n./src/Lua.SourceGenerator/LuaObjectMetamethod.cs\n./src/Lua.SourceGenerator/MethodMetadata.cs\n./src/Lua.SourceGenerator/PropertyMetadata.cs\n./src/Lua.SourceGenerator/SymbolReferences.cs\n./src/Lua.SourceGenerator/TypeMetadata.cs\n./src/Lua.SourceGenerator/Utilities\n./src/Lua.SourceGenerator/Utilities/CodeBuilder.cs\n./src/Lua.SourceGenerator/Utilities/RoslynAnalyzerExtensions.cs\n./src/Lua.SourceGenerator/Utilities/SymbolExtensions.cs\n./src/Lua.SourceGenerator/LuaObjectGenerator.Emit.cs\n./src/Lua.SourceGenerator/LuaObjectGenerator.cs\n./src/Lua\n./src/Lua/Attributes.cs\n./src/Lua/CodeAnalysis\n./src/Lua/CodeAnalysis/Compilation\n./src/Lua/CodeAnalysis/Compilation/Descriptions.cs\n./src/Lua/CodeAnalysis/Compilation/FunctionCompilationContext.cs\n./src/Lua/CodeAnalysis/Compilation/LuaCompiler.cs\n./src/Lua/CodeAnalysis/Compilation/ScopeCompilationContext.cs\n./src/Lua/CodeAnalysis/SourcePosition.cs\n./src/Lua/CodeAnalysis/Syntax\n./src/Lua/CodeAnalysis/Syntax/DisplayStringSyntaxVisitor.cs\n./src/Lua/CodeAnalysis/Syntax/ISyntaxNodeVisitor.cs\n./src/Lua/CodeAnalysis/Syntax/Keywords.cs\n./src/Lua/CodeAnalysis/Syntax/Lexer.cs\n./src/Lua/CodeAnalysis/Syntax/LuaSyntaxTree.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes\n./src/Lua/CodeAnalysis/Syntax/Nodes/AssignmentStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/BinaryExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/BooleanLiteralNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/BreakStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/CallFunctionExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/CallFunctionStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/CallTableMethodExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/CallTableMethodStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/DoStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/ExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/FunctionDeclarationExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/FunctionDeclarationStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/GenericForStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/GotoStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/GroupedExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/IdentifierNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/IfStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/LabelStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/LocalAssignmentStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/LocalFunctionDeclarationNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/NilLiteralNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/NumericForStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/NumericLiteralNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/RepeatStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/ReturnStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/StatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/StringLiteralNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/TableConstructorExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/TableIndexerAccessExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/TableMemberAccessExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/TableMethodDeclarationStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/UnaryExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/VariableArgumentsExpressionNode.cs\n./src/Lua/CodeAnalysis/Syntax/Nodes/WhileStatementNode.cs\n./src/Lua/CodeAnalysis/Syntax/OperatorPrecedence.cs\n./src/Lua/CodeAnalysis/Syntax/SyntaxNode.cs\n./src/Lua/CodeAnalysis/Syntax/SyntaxToken.cs\n./src/Lua/CodeAnalysis/Syntax/SyntaxTokenEnumerator.cs\n./src/Lua/CodeAnalysis/Syntax/Parser.cs\n./src/Lua/ILuaModuleLoader.cs\n./src/Lua/Internal\n./src/Lua/Internal/CancellationExtensions.cs\n./src/Lua/Internal/EnumerableEx.cs\n./src/Lua/Internal/FarmHash.cs\n./src/Lua/Internal/FastListCore.cs\n./src/Lua/Internal/HexConverter.cs\n./src/Lua/Internal/MathEx.cs\n./src/Lua/Internal/MemoryMarshalEx.cs\n./src/Lua/Internal/PooledArray.cs\n./src/Lua/Internal/StringHelper.cs\n./src/Lua/Internal/Utf16StringMemoryComparer.cs\n./src/Lua/Internal/ValueStringBuilder.cs\n./src/Lua/Internal/ValueTaskEx.cs\n./src/Lua/Internal/FastStackCore.cs\n./src/Lua/Internal/PooledList.cs\n./src/Lua/Loaders\n./src/Lua/Loaders/CompositeModuleLoader.cs\n./src/Lua/Loaders/FileModuleLoader.cs\n./src/Lua/LuaMainThread.cs\n./src/Lua/LuaModule.cs\n./src/Lua/LuaObjectMetamethod.cs\n./src/Lua/LuaStateExtensions.cs\n./src/Lua/LuaThreadExtensions.cs\n./src/Lua/LuaThreadStatus.cs\n./src/Lua/LuaUserData.cs\n./src/Lua/Runtime\n./src/Lua/Runtime/LuaValueRuntimeExtensions.cs\n./src/Lua/Runtime/Metamethods.cs\n./src/Lua/Runtime/OpCode.cs\n./src/Lua/Runtime/UpValueInfo.cs\n./src/Lua/Runtime/CallStackFrame.cs\n./src/Lua/Runtime/Chunk.cs\n./src/Lua/Runtime/Closure.cs\n./src/Lua/Runtime/Instruction.cs\n./src/Lua/Runtime/LuaStack.cs\n./src/Lua/Runtime/LuaVirtualMachine.cs\n./src/Lua/Runtime/Tracebacks.cs\n./src/Lua/Runtime/UpValue.cs\n./src/Lua/Standard\n./src/Lua/Standard/BitwiseLibrary.cs\n./src/Lua/Standard/IOLibrary.cs\n./src/Lua/Standard/Internal\n./src/Lua/Standard/Internal/Bit32Helper.cs\n./src/Lua/Standard/Internal/DateTimeHelper.cs\n./src/Lua/Standard/Internal/IOHelper.cs\n./src/Lua/Standard/MathematicsLibrary.cs\n./src/Lua/Standard/ModuleLibrary.cs\n./src/Lua/Standard/OpenLibsExtensions.cs\n./src/Lua/Standard/StringLibrary.cs\n./src/Lua/Standard/BasicLibrary.cs\n./src/Lua/Standard/CoroutineLibrary.cs\n./src/Lua/Standard/FileHandle.cs\n./src/Lua/Standard/OperatingSystemLibrary.cs\n./src/Lua/Standard/TableLibrary.cs\n./src/Lua/Exceptions.cs\n./src/Lua/Lua.csproj\n./src/Lua/LuaCoroutine.cs\n./src/Lua/LuaFunction.cs\n./src/Lua/LuaFunctionExecutionContext.cs\n./src/Lua/LuaFunctionExtensions.cs\n./src/Lua/LuaState.cs\n./src/Lua/LuaTable.cs\n./src/Lua/LuaThread.cs\n./src/Lua/LuaValue.cs\n./tests\n./tests/Lua.Tests\n./tests/Lua.Tests/FileHelper.cs\n./tests/Lua.Tests/GlobalUsings.cs\n./tests/Lua.Tests/HexConverterTests.cs\n./tests/Lua.Tests/InstructionTests.cs\n./tests/Lua.Tests/LexerTests.cs\n./tests/Lua.Tests/LocalTests.cs\n./tests/Lua.Tests/LoopTests.cs\n./tests/Lua.Tests/Lua.Tests.csproj\n./tests/Lua.Tests/LuaObjectTests.cs\n./tests/Lua.Tests/LuaTests.cs\n./tests/Lua.Tests/OperatorTests.cs\n./tests/Lua.Tests/TableTests.cs\n./tests/Lua.Tests/tests-lua\n./tests/Lua.Tests/tests-lua/all.lua\n./tests/Lua.Tests/tests-lua/api.lua\n./tests/Lua.Tests/tests-lua/attrib.lua\n./tests/Lua.Tests/tests-lua/big.lua\n./tests/Lua.Tests/tests-lua/bitwise.lua\n./tests/Lua.Tests/tests-lua/calls.lua\n./tests/Lua.Tests/tests-lua/closure.lua\n./tests/Lua.Tests/tests-lua/code.lua\n./tests/Lua.Tests/tests-lua/constructs.lua\n./tests/Lua.Tests/tests-lua/db.lua\n./tests/Lua.Tests/tests-lua/errors.lua\n./tests/Lua.Tests/tests-lua/events.lua\n./tests/Lua.Tests/tests-lua/files.lua\n./tests/Lua.Tests/tests-lua/gc.lua\n./tests/Lua.Tests/tests-lua/goto.lua\n./tests/Lua.Tests/tests-lua/literals.lua\n./tests/Lua.Tests/tests-lua/locals.lua\n./tests/Lua.Tests/tests-lua/main.lua\n./tests/Lua.Tests/tests-lua/math.lua\n./tests/Lua.Tests/tests-lua/nextvar.lua\n./tests/Lua.Tests/tests-lua/pm.lua\n./tests/Lua.Tests/tests-lua/sort.lua\n./tests/Lua.Tests/tests-lua/strings.lua\n./tests/Lua.Tests/tests-lua/vararg.lua\n./tests/Lua.Tests/tests-lua/verybig.lua\n./tests/Lua.Tests/tests-lua/coroutine.lua\n./tests/Lua.Tests/MetatableTests.cs\n./.gitignore\n./Directory.Build.props\n./LICENSE\n./README.md\n./README_JA.md\n",
    "readme": "\n--- ./README.md ---\n# Lua-CSharp\n\nHigh performance Lua interpreter implemented in C# for .NET and Unity\n\n![img](docs/Header.png)\n\n[![NuGet](https://img.shields.io/nuget/v/LuaCSharp.svg)](https://www.nuget.org/packages/LuaCSharp)\n[![Releases](https://img.shields.io/github/release/AnnulusGames/Lua-CSharp.svg)](https://github.com/AnnulusGames/Lua-CSharp/releases)\n[![license](https://img.shields.io/badge/LICENSE-MIT-green.svg)](LICENSE)\n\nEnglish | [\u65e5\u672c\u8a9e](README_JA.md)\n\n## Overview\n\nLua-CSharp is a library that provides a Lua interpreter implemented in C#. By integrating Lua-CSharp, you can easily embed Lua scripts into your .NET applications.\n\nLua-CSharp leverages the latest C# features, designed with low allocation and high performance in mind. It is optimized to deliver maximum performance when used for interoperation between C# and Lua in C# applications. Below is a benchmark comparison with [MoonSharp](https://github.com/moonsharp-devs/moonsharp/) and [NLua](https://github.com/NLua/NLua):\n\n![img](docs/Benchmark.png)\n\nMoonSharp generally provides good speed but incurs significant allocations due to its design. NLua, being a C-binding implementation, is fast, but introduces substantial overhead when interacting with the C# layer. Lua-CSharp, fully implemented in C#, allows for seamless interaction with C# code without additional overhead. Moreover, it operates reliably in AOT environments since it does not rely on IL generation.\n\n## Features\n\n* Lua 5.2 interpreter implemented in C#\n* Easy-to-use API integrated with async/await\n* Support for exception handling with try-catch\n* High-performance implementation utilizing modern C#\n* Unity support (works with both Mono and IL2CPP)\n\n## Installation\n\n### NuGet packages\n\nTo use Lua-CSharp, .NET Standard 2.1 or higher is required. The package can be obtained from NuGet.\n\n### .NET CLI\n\n```ps1\ndotnet add package LuaCSharp\n```\n\n### Package Manager\n\n```ps1\nInstall-Package LuaCSharp\n```\n\n### Unity\n\nLua-CSharp can also be used in Unity (works with both Mono and IL2CPP).\n\n### Requirements\n\n* Unity 2021.3 or higher\n\n### Installation\n\n1. Install [NugetForUnity](https://github.com/GlitchEnzo/NuGetForUnity).\n2. Open the NuGet window by going to `NuGet > Manage NuGet Packages`, search for the `LuaCSharp` package, and install it.\n\n## Quick Start\n\nBy using the `LuaState` class, you can execute Lua scripts from C#. Below is a sample code that evaluates a simple calculation written in Lua.\n\n```cs\nusing Lua;\n\n// Create a LuaState\nvar state = LuaState.Create();\n\n// Execute a Lua script string with DoStringAsync\nvar results = await state.DoStringAsync(\"return 1 + 1\");\n\n// 2\nConsole.WriteLine(results[0]);\n```\n\n> [!WARNING]\n> `LuaState` is not thread-safe. Do not access it from multiple threads simultaneously.\n\n## LuaValue\n\nValues in Lua scripts are represented by the `LuaValue` type. The value of a `LuaValue` can be read using `TryRead<T>(out T value)` or `Read<T>()`.\n\n```cs\nvar results = await state.DoStringAsync(\"return 1 + 1\");\n\n// double\nvar value = results[0].Read<double>();\n```\n\nYou can also get the type of the value from the `Type` property.\n\n```cs\nvar isNil = results[0].Type == LuaValueType.Nil;\n```\n\nBelow is a table showing the type mapping between Lua and C#.\n\n| Lua        | C#                |\n| ---------- | ----------------- |\n| `nil`      | `LuaValue.Nil`    |\n| `boolean`  | `bool`            |\n| `string`   | `string`          |\n| `number`   | `double`, `float` |\n| `table`    | `LuaTable`        |\n| `function` | `LuaFunction`     |\n| `userdata` | `LuaUserData`     |\n| `thread`   | `LuaThread`       |\n\nWhen creating a `LuaValue` from the C# side, compatible types are implicitly converted into `LuaValue`.\n\n```cs\nLuaValue value;\nvalue = 1.2;           // double   ->  LuaValue\nvalue = \"foo\";         // string   ->  LuaValue\nvalue = new LuaTable() // LuaTable ->  LuaValue\n```\n\n## LuaTable\n\nLua tables are represented by the `LuaTable` type. They can be used similarly to `LuaValue[]` or `Dictionary<LuaValue, LuaValue>`.\n\n```cs\n// Create a table in Lua\nvar results = await state.DoStringAsync(\"return { a = 1, b = 2, c = 3 }\");\nvar table1 = results[0].Read<LuaTable>();\n\n// 1\nConsole.WriteLine(table1[\"a\"]);\n\n// Create a table in C#\nresults = await state.DoStringAsync(\"return { 1, 2, 3 }\");\nvar table2 = results[0].Read<LuaTable>();\n\n// 1 (Note: Lua arrays are 1-indexed)\nConsole.WriteLine(table2[1]);\n```\n\n## Global Environment\n\nYou can access Lua's global environment through `state.Environment`. This table allows for easy value exchange between Lua and C#.\n\n```cs\n// Set a = 10\nstate.Environment[\"a\"] = 10;\n\nvar results = await state.DoStringAsync(\"return a\");\n\n// 10\nConsole.WriteLine(results[0]);\n```\n\n## Standard Libraries\n\nYou can use Lua's standard libraries as well. By calling `state.OpenStandardLibraries()`, the standard library tables are added to the `LuaState`.\n\n```cs\nusing Lua;\nusing Lua.Standard;\n\nvar state = LuaState.Create();\n\n// Add standard libraries\nstate.OpenStandardLibraries();\n\nvar results = await state.DoStringAsync(\"return math.pi\");\nConsole.WriteLine(results[0]); // 3.141592653589793\n```\n\nFor more details on standard libraries, refer to the [Lua official manual](https://www.lua.org/manual/5.2/manual.html#6).\n\n> [!WARNING]\n> Lua-CSharp does not support all functions of the standard libraries. For details, refer to the [Compatibility](#compatibility) section.\n\n## Functions\n\nLua functions are represented by the `LuaFunction` type. With `LuaFunction`, you can call Lua functions from C#, or define functions in C# that can be called from Lua.\n\n### Calling Lua Functions from C#\n\n```lua\n-- lua2cs.lua\n\nlocal function add(a, b)\n    return a + b\nend\n\nreturn add;\n```\n\n```cs\nvar results = await state.DoFileAsync(\"lua2cs.lua\");\nvar func = results[0].Read<LuaFunction>();\n\n// Execute the function with arguments\nvar funcResults = await func.InvokeAsync(state, new[] { 1, 2 });\n\n// 3\nConsole.WriteLine(funcResults[0]);\n```\n\n### Calling C# Functions from Lua\n\nIt is possible to create a `LuaFunction` from a lambda expression.\n\n```cs\n// Add the function to the global environment\nstate.Environment[\"add\"] = new LuaFunction((context, buffer, ct) =>\n{\n    // Get the arguments using context.GetArgument<T>()\n    var arg0 = context.GetArgument<double>(0);\n    var arg1 = context.GetArgument<double>(1);\n\n    // Write the return value to the buffer\n    buffer.Span[0] = arg0 + arg1;\n\n    // Return the number of values\n    return new(1);\n});\n\n// Execute a Lua script\nvar results = await state.DoFileAsync(\"cs2lua.lua\");\n\n// 3\nConsole.WriteLine(results[i]);\n```\n\n```lua\n-- cs2lua.lua\n\nreturn add(1, 2)\n```\n\n> [!TIP]  \n> Defining functions with `LuaFunction` can be somewhat verbose. When adding multiple functions, it is recommended to use the Source Generator with the `[LuaObject]` attribute. For more details, see the [LuaObject](#luaobject) section.\n\n## Integration with async/await\n\n`LuaFunction` operates asynchronously. Therefore, you can define a function that waits for an operation in Lua, such as the example below:\n\n```cs\n// Define a function that waits for the given number of seconds using Task.Delay\nstate.Environment[\"wait\"] = new LuaFunction(async (context, buffer, ct) =>\n{\n    var sec = context.GetArgument<double>(0);\n    await Task.Delay(TimeSpan.FromSeconds(sec));\n    return 0;\n});\n\nawait state.DoFileAsync(\"sample.lua\");\n```\n\n```lua\n-- sample.lua\n\nprint \"hello!\"\n\nwait(1.0) -- wait 1 sec\n\nprint \"how are you?\"\n\nwait(1.0) -- wait 1 sec\n\nprint \"goodbye!\"\n```\n\nThis code can resume the execution of the Lua script after waiting with await, as shown in the following figure. This is very useful when writing scripts to be incorporated into games.\n\n![img](docs/img1.png)\n\n## Coroutines\n\nLua coroutines are represented by the `LuaThread` type.\n\nCoroutines can not only be used within Lua scripts, but you can also await Lua-created coroutines from C#.\n\n```lua\n-- coroutine.lua\n\nlocal co = coroutine.create(function()\n    for i = 1, 10 do\n        print(i)\n        coroutine.yield()\n    end\nend)\n\nreturn co\n```\n\n```cs\nvar results = await state.DoFileAsync(\"coroutine.lua\");\nvar co = results[0].Read<LuaThread>();\n\nfor (int i = 0; i < 10; i++)\n{\n    var resumeResults = await co.ResumeAsync(state);\n\n    // Similar to coroutine.resume(), returns true on success and the return values afterward\n    // 1, 2, 3, 4, ...\n    Console.WriteLine(resumeResults[1]);\n}\n```\n\n## LuaObject\n\nBy applying the `[LuaObject]` attribute, you can create custom classes that run within Lua. Adding this attribute to a class that you wish to use in Lua allows the Source Generator to automatically generate the code required for interaction from Lua.\n\nThe following is an example implementation of a wrapper class for `System.Numerics.Vector3` that can be used in Lua:\n\n```cs\nusing System.Numerics;\nusing Lua;\n\nvar state = LuaState.Create();\n\n// Add an instance of the defined LuaObject as a global variable\n// (Implicit conversion to LuaValue is automatically defined for classes with the LuaObject attribute)\nstate.Environment[\"Vector3\"] = new LuaVector3();\n\nawait state.DoFileAsync(\"vector3_sample.lua\");\n\n// Add LuaObject attribute and partial keyword\n[LuaObject]\npublic partial class LuaVector3\n{\n    Vector3 vector;\n\n    // Add LuaMember attribute to members that will be used in Lua\n    // The argument specifies the name used in Lua (if omitted, the member name is used)\n    [LuaMember(\"x\")]\n    public float X\n    {\n        get => vector.X;\n        set => vector = vector with { X = value };\n    }\n\n    [LuaMember(\"y\")]\n    public float Y\n    {\n        get => vector.Y;\n        set => vector = vector with { Y = value };\n    }\n\n    [LuaMember(\"z\")]\n    public float Z\n    {\n        get => vector.Z;\n        set => vector = vector with { Z = value };\n    }\n\n    // Static methods are treated as regular Lua functions\n    [LuaMember(\"create\")]\n    public static LuaVector3 Create(float x, float y, float z)\n    {\n        return new LuaVector3()\n        {\n            vector = new Vector3(x, y, z)\n        };\n    }\n\n    // Instance methods implicitly receive the instance (this) as the first argument\n    // In Lua, this is accessed with instance:method() syntax\n    [LuaMember(\"normalized\")]\n    public LuaVector3 Normalized()\n    {\n        return new LuaVector3()\n        {\n            vector = Vector3.Normalize(vector)\n        };\n    }\n}\n```\n\n```lua\n-- vector3_sample.lua\n\nlocal v1 = Vector3.create(1, 2, 3)\n-- 1  2  3\nprint(v1.x, v1.y, v1.z)\n\nlocal v2 = v1:normalized()\n-- 0.26726123690605164  0.5345224738121033  0.8017836809158325\nprint(v2.x, v2.y, v2.z)\n```\n\nThe types of fields/properties with the `[LuaMember]` attribute, as well as the argument and return types of methods, must be either `LuaValue` or convertible to/from `LuaValue`.\n\nReturn types such as `void`, `Task/Task<T>`, `ValueTask/ValueTask<T>`, `UniTask/UniTask<T>`, and `Awaitable/Awaitable<T>` are also supported.\n\nIf the type is not supported, the Source Generator will output a compile-time error.\n\n### LuaMetamethod\n\nBy adding the `[LuaMetamethod]` attribute, you can designate a C# method to be used as a Lua metamethod.\n\nHere is an example that adds the `__add`, `__sub`, and `__tostring` metamethods to the `LuaVector3` class:\n\n```cs\n[LuaObject]\npublic partial class LuaVector3\n{\n    // The previous implementation is omitted\n\n    [LuaMetamethod(LuaObjectMetamethod.Add)]\n    public static LuaVector3 Add(LuaVector3 a, LuaVector3 b)\n    {\n        return new LuaVector3()\n        {\n            vector = a.vector + b.vector\n        };\n    }\n    \n    [LuaMetamethod(LuaObjectMetamethod.Sub)]\n    public static LuaVector3 Sub(LuaVector3 a, LuaVector3 b)\n    {\n        return new LuaVector3()\n        {\n            vector = a.vector - b.vector\n        };\n    }\n\n    [LuaMetamethod(LuaObjectMetamethod.ToString)]\n    public override string ToString()\n    {\n        return vector.ToString();\n    }\n}\n```\n\n```lua\nlocal v1 = Vector3.create(1, 1, 1)\nlocal v2 = Vector3.create(2, 2, 2)\n\nprint(v1) -- <1, 1, 1>\nprint(v2) -- <2, 2, 2>\n\nprint(v1 + v2) -- <3, 3, 3>\nprint(v1 - v2) -- <-1, -1, -1>\n```\n\n> [!NOTE]  \n> `__index` and `__newindex` cannot be set as they are used internally by the code generated by `[LuaObject]`.\n\n## Module Loading\n\nIn Lua, you can load modules using the `require` function. In regular Lua, modules are managed by searchers within the `package.searchers` function list. In Lua-CSharp, this is replaced by the `ILuaModuleLoader` interface.\n\n```cs\npublic interface ILuaModuleLoader\n{\n    bool Exists(string moduleName);\n    ValueTask<LuaModule> LoadAsync(string moduleName, CancellationToken cancellationToken = default);\n}\n```\n\nYou can set the `LuaState.ModuleLoader` to change how modules are loaded. By default, the `FileModuleLoader` is set to load modules from Lua files.\n\nYou can also combine multiple loaders using `CompositeModuleLoader.Create(loader1, loader2, ...)`.\n\n```cs\nstate.ModuleLoader = CompositeModuleLoader.Create(\n    new FileModuleLoader(),\n    new CustomModuleLoader()\n);\n```\n\nLoaded modules are cached in the `package.loaded` table, just like regular Lua. This can be accessed via `LuaState.LoadedModules`.\n\n## Exception Handling\n\nLua script parsing errors and runtime exceptions throw exceptions that inherit from `LuaException`. You can catch these to handle errors during execution.\n\n```cs\ntry\n{\n    await state.DoFileAsync(\"filename.lua\");\n}\ncatch (LuaParseException)\n{\n    // Handle parsing errors\n}\ncatch (LuaRuntimeException)\n{\n    // Handle runtime exceptions\n}\n```\n\n## Compatibility\n\nLua-CSharp is designed with integration into .NET in mind, so there are several differences from the C implementation.\n\n### Binary\n\nLua-CSharp does not support Lua bytecode (tools like `luac` cannot be used). Only Lua source code can be executed.\n\n### Character Encoding\n\nThe character encoding used in Lua-CSharp is UTF-16. Since standard Lua assumes a single-byte character encoding, string behavior differs significantly.\n\nFor example, in regular Lua, the following code outputs `15`, but in Lua-CSharp, it outputs `5`.\n\n```lua\nlocal l = string.len(\"\u3042\u3044\u3046\u3048\u304a\")\nprint(l)\n```\n\nAll string library functions handle strings as UTF-16.\n\n### Garbage Collection\n\nSince Lua-CSharp is implemented in C#, it relies on .NET's garbage collector. As a result, memory management behavior differs from regular Lua.\n\nWhile `collectgarbage()` is available, it simply calls the corresponding .NET garbage collection method and may not exhibit the same behavior as C's Lua garbage collector.\n\n## License\n\nLua-CSharp is licensed under the [MIT License](LICENSE).\n\n\n\n--- ./README_JA.md ---\n# Lua-CSharp\n\nHigh performance Lua interpreter implemented in C# for .NET and Unity\n\n![img](docs/Header.png)\n\n[![NuGet](https://img.shields.io/nuget/v/LuaCSharp.svg)](https://www.nuget.org/packages/LuaCSharp)\n[![Releases](https://img.shields.io/github/release/AnnulusGames/Lua-CSharp.svg)](https://github.com/AnnulusGames/Lua-CSharp/releases)\n[![license](https://img.shields.io/badge/LICENSE-MIT-green.svg)](LICENSE)\n\n[English]((./README.md)) | \u65e5\u672c\u8a9e\n\n## \u6982\u8981\n\nLua-CSharp\u306fC#\u5b9f\u88c5\u306eLua\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u63d0\u4f9b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Lua-CSharp\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\u3001.NET\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u7c21\u5358\u306bLua\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7d44\u307f\u8fbc\u3080\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\nLua-CSharp\u306f\u6700\u65b0\u306eC#\u306e\u6a5f\u80fd\u3092\u6d3b\u7528\u3057\u3001\u4f4e\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30cf\u30a4\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5ff5\u982d\u306b\u304a\u3044\u3066\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002Lua-CSharp\u306fC#\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d44\u307f\u8fbc\u307e\u308c\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001C#-Lua\u9593\u306e\u76f8\u4e92\u904b\u7528\u6642\u306b\u6700\u5927\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u767a\u63ee\u3059\u308b\u3088\u3046\u306b\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306f[MoonSharp](https://github.com/moonsharp-devs/moonsharp/), [NLua](https://github.com/NLua/NLua)\u3068\u6bd4\u8f03\u3057\u305f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3067\u3059\u3002\n\n![img](docs/Benchmark.png)\n\nMoonSharp\u306f\u591a\u304f\u306e\u5834\u5408\u3067\u5341\u5206\u306a\u901f\u5ea6\u3092\u767a\u63ee\u3057\u307e\u3059\u304c\u3001\u8a2d\u8a08\u4e0a\u975e\u5e38\u306b\u5927\u304d\u3044\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u767a\u751f\u3057\u307e\u3059\u3002NLua\u306fC\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3067\u3042\u308b\u305f\u3081\u52d5\u4f5c\u305d\u306e\u3082\u306e\u306f\u9ad8\u901f\u3067\u3059\u304c\u3001C#\u30ec\u30a4\u30e4\u30fc\u3068\u306e\u3084\u308a\u53d6\u308a\u306e\u969b\u306b\u5927\u304d\u306a\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u304b\u304b\u308a\u307e\u3059\u3002Lua-CSharp\u306f\u5b8c\u5168\u306bC#\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001C#\u30b3\u30fc\u30c9\u3068\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u3057\u3067\u3084\u308a\u53d6\u308a\u304c\u53ef\u80fd\u3067\u3059\u3002\u307e\u305f\u3001IL\u751f\u6210\u306a\u3069\u3092\u4e00\u5207\u4f7f\u7528\u3057\u306a\u3044\u305f\u3081AOT\u74b0\u5883\u3067\u3082\u5b89\u5b9a\u3057\u3066\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n## \u7279\u5fb4\n\n* C#\u3067\u5b9f\u88c5\u3055\u308c\u305fLua5.2\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\n* async/await\u306b\u7d71\u5408\u3055\u308c\u305f\u6271\u3044\u3084\u3059\u3044API\n* try-catch\u306b\u3088\u308b\u4f8b\u5916\u51e6\u7406\u306e\u30b5\u30dd\u30fc\u30c8\n* \u6700\u65b0\u306eC#\u3092\u6d3b\u7528\u3057\u305f\u30cf\u30a4\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306a\u5b9f\u88c5\n* Unity\u30b5\u30dd\u30fc\u30c8(Mono/IL2CPP\u306e\u4e21\u65b9\u3067\u52d5\u4f5c)\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n### NuGet packages\n\nLua-CSharp\u3092\u5229\u7528\u3059\u308b\u306b\u306f.NET Standard2.1\u4ee5\u4e0a\u304c\u5fc5\u8981\u3067\u3059\u3002\u30d1\u30c3\u30b1\u30fc\u30b8\u306fNuGet\u304b\u3089\u5165\u624b\u3067\u304d\u307e\u3059\u3002\n\n### .NET CLI\n\n```ps1\ndotnet add package LuaCSharp\n```\n\n### Package Manager\n\n```ps1\nInstall-Package LuaCSharp\n```\n\n### Unity\n\nLua-CSharp\u3092Unity\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002(Mono/IL2CPP\u306e\u4e21\u65b9\u3067\u52d5\u4f5c\u3057\u307e\u3059)\n\n### \u8981\u4ef6\n\n* Unity 2021.3 \u4ee5\u4e0a\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n1. [NugetForUnity](https://github.com/GlitchEnzo/NuGetForUnity)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n2. `NuGet > Manage NuGet Packages`\u304b\u3089NuGet\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u958b\u304d\u3001`LuaCSharp`\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u691c\u7d22\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n## \u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\n\n`LuaState`\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067C#\u4e0a\u304b\u3089Lua\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4ee5\u4e0b\u306fLua\u3067\u8a18\u8ff0\u3055\u308c\u305f\u7c21\u5358\u306a\u6f14\u7b97\u3092\u8a55\u4fa1\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```cs\nusing Lua;\n\n// LuaState\u3092\u4f5c\u6210\u3059\u308b\nvar state = LuaState.Create();\n\n// DoStringAsync\u3067\u6587\u5b57\u5217\u306eLua\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\nvar results = await state.DoStringAsync(\"return 1 + 1\");\n\n// 2\nConsole.WriteLine(results[0]);\n```\n\n> [!WARNING]\n> `LuaState`\u306f\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u540c\u6642\u306b\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\n\n## LuaValue\n\nLua\u30b9\u30af\u30ea\u30d7\u30c8\u4e0a\u306e\u5024\u306f`LuaValue`\u578b\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002`LuaValue`\u306e\u5024\u306f`TryRead<T>(out T value)`\u307e\u305f\u306f`Read<T>()`\u3067\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```cs\nvar results = await state.DoStringAsync(\"return 1 + 1\");\n\n// double\nvar value = results[0].Read<double>();\n```\n\n\u307e\u305f\u3001`Type`\u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u5024\u306e\u578b\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```cs\nvar isNil = results[0].Type == LuaValueType.Nil;\n```\n\nLua-C#\u9593\u306e\u578b\u306e\u5bfe\u5fdc\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n| Lua        | C#               |\n| ---------- | ---------------- |\n| `nil`      | `LuaValue.Nil`   |\n| `boolean`  | `bool`           |\n| `string`   | `string`         |\n| `number`   | `double`,`float` |\n| `table`    | `LuaTable`       |\n| `function` | `LuaFunction`    |\n| `userdata` | `LuaUserData`    |\n| `thread`   | `LuaThread`      |\n\nC#\u5074\u304b\u3089`LuaValue`\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u306f\u3001\u5909\u63db\u53ef\u80fd\u306a\u578b\u306e\u5834\u5408\u3067\u3042\u308c\u3070\u6697\u9ed9\u7684\u306b`LuaValue`\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n\n```cs\nLuaValue value;\nvalue = 1.2;           // double   ->  LuaValue\nvalue = \"foo\";         // string   ->  LuaValue\nvalue = new LuaTable() // LuaTable ->  LuaValue\n```\n\n## LuaTable\n\nLua\u306e\u30c6\u30fc\u30d6\u30eb\u306f`LuaTable`\u578b\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u901a\u5e38\u306e`LuaValue[]`\u3084`Dictionary<LuaValue, LuaValue>`\u306e\u3088\u3046\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n```cs\n// Lua\u5074\u3067\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\nvar results = await state.DoStringAsync(\"return { a = 1, b = 2, c = 3 }\")\nvar table1 = results[0].Read<LuaTable>();\n\n// 1\nConsole.WriteLine(table1[\"a\"]);\n\n// \u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\nresults = await state.DoStringAsync(\"return { 1, 2, 3 }\")\nvar table2 = results[0].Read<LuaTable>();\n\n// 1 (Lua\u306e\u914d\u5217\u306f1-origin\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f)\nConsole.WriteLine(table2[1]);\n```\n\n## \u30b0\u30ed\u30fc\u30d0\u30eb\u74b0\u5883\n\n`state.Environment`\u304b\u3089Lua\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u74b0\u5883\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4ecb\u3057\u3066\u7c21\u5358\u306bLua-C#\u9593\u3067\u5024\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```cs\n// a = 10\u3092\u8a2d\u5b9a\nstate.Environment[\"a\"] = 10;\n\nvar results = await state.DoStringAsync(\"return a\");\n\n// 10\nConsole.WriteLine(results[0]);\n```\n\n## \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\n\nLua\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002`state.OpenStandardLibraries()`\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001`LuaState`\u306b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```cs\nusing Lua;\nusing Lua.Standard;\n\nvar state = LuaState.Create();\n\n// \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\nstate.OpenStandardLibraries();\n\nvar results = await state.DoStringAsync(\"return math.pi\");\nConsole.WriteLine(results[0]); // 3.141592653589793\n```\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u306f[Lua\u516c\u5f0f\u306e\u30de\u30cb\u30e5\u30a2\u30eb](https://www.lua.org/manual/5.2/manual.html#6)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n> [!WARNING]\n> Lua-CSharp\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5168\u3066\u306e\u95a2\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u8a73\u7d30\u306f[\u4e92\u63db\u6027](#\u4e92\u63db\u6027)\u306e\u9805\u76ee\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u95a2\u6570\n\nLua\u306e\u95a2\u6570\u306f`LuaFunction`\u578b\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002`LuaFunction`\u306b\u3088\u3063\u3066Lua\u306e\u95a2\u6570\u3092C#\u5074\u304b\u3089\u547c\u3073\u51fa\u3057\u305f\u308a\u3001C#\u3067\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092Lua\u5074\u304b\u3089\u547c\u3073\u51fa\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n### Lua\u306e\u95a2\u6570\u3092C#\u304b\u3089\u547c\u3073\u51fa\u3059\n\n```lua\n-- lua2cs.lua\n\nlocal function add(a, b)\n    return a + b\nend\n\nreturn add;\n```\n\n```cs\nvar results = await state.DoFileAsync(\"lua2cs.lua\");\nvar func = results[0].Read<LuaFunction>();\n\n// \u5f15\u6570\u3092\u4e0e\u3048\u3066\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\nvar funcResults = await func.InvokeAsync(state, [1, 2]);\n\n// 3\nConsole.WriteLine(funcResults[0]);\n```\n\n### C#\u306e\u95a2\u6570\u3092Lua\u5074\u304b\u3089\u547c\u3073\u51fa\u3059\n\n\u30e9\u30e0\u30c0\u5f0f\u304b\u3089LuaFunction\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```cs\n// \u30b0\u30ed\u30fc\u30d0\u30eb\u74b0\u5883\u306b\u95a2\u6570\u3092\u8ffd\u52a0\nstate.Environment[\"add\"] = new LuaFunction((context, buffer, ct) =>\n{\n    // context.GetArgument<T>()\u3067\u5f15\u6570\u3092\u53d6\u5f97\n    var arg0 = context.GetArgument<double>(0);\n    var arg1 = context.GetArgument<double>(1);\n\n    // \u30d0\u30c3\u30d5\u30a1\u306b\u623b\u308a\u5024\u3092\u8a18\u9332\n    buffer.Span[0] = arg0 + arg1;\n\n    // \u623b\u308a\u5024\u306e\u6570\u3092\u8fd4\u3059\n    return new(1);\n});\n\n// Lua\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\nvar results = await state.DoFileAsync(\"cs2lua.lua\");\n\n// 3\nConsole.WriteLine(results[i]);\n```\n\n```lua\n-- cs2lua.lua\n\nreturn add(1, 2)\n```\n\n> [!TIP]\n> `LuaFunction`\u306b\u3088\u308b\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u3084\u3084\u8a18\u8ff0\u91cf\u304c\u591a\u3044\u305f\u3081\u3001\u95a2\u6570\u3092\u307e\u3068\u3081\u3066\u8ffd\u52a0\u3059\u308b\u969b\u306b\u306f`[LuaObject]`\u5c5e\u6027\u306b\u3088\u308bSource Generator\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u8a73\u7d30\u306f[LuaObject](#luaobject)\u306e\u9805\u76ee\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## async/await\u3068\u306e\u7d71\u5408\n\n`LuaFunction`\u306f\u975e\u540c\u671f\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u52d5\u4f5c\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067Lua\u5074\u304b\u3089\u51e6\u7406\u306e\u5f85\u6a5f\u3092\u884c\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```cs\n// \u4e0e\u3048\u3089\u308c\u305f\u79d2\u6570\u3060\u3051Task.Delay\u3067\u5f85\u6a5f\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\nstate.Environment[\"wait\"] = new LuaFunction(async (context, buffer, ct) =>\n{\n    var sec = context.GetArgument<double>(0);\n    await Task.Delay(TimeSpan.FromSeconds(sec));\n    return 0;\n});\n\nawait state.DoFileAsync(\"sample.lua\");\n```\n\n```lua\n-- sample.lua\n\nprint \"hello!\"\n\nwait(1.0) -- 1\u79d2\u5f85\u6a5f\u3059\u308b\n\nprint \"how are you?\"\n\nwait(1.0) -- 1\u79d2\u5f85\u6a5f\u3059\u308b\n\nprint \"goodbye!\"\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u3001await\u3067\u5f85\u6a5f\u3057\u305f\u5f8c\u306bLua\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5b9f\u884c\u3092\u518d\u958b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u30b2\u30fc\u30e0\u306b\u7d44\u307f\u8fbc\u3080\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u969b\u306a\u3069\u306b\u975e\u5e38\u306b\u6709\u7528\u3067\u3059\u3002\n\n![img](docs/img1.png)\n\n## \u30b3\u30eb\u30fc\u30c1\u30f3\n\nLua\u306e\u30b3\u30eb\u30fc\u30c1\u30f3\u306f`LuaThread`\u578b\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\n\n\u30b3\u30eb\u30fc\u30c1\u30f3\u306fLua\u30b9\u30af\u30ea\u30d7\u30c8\u5185\u3067\u5229\u7528\u3067\u304d\u308b\u3060\u3051\u3067\u306a\u304f\u3001Lua\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30eb\u30fc\u30c1\u30f3\u3092C#\u3067\u5f85\u6a5f\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```lua\n-- coroutine.lua\n\nlocal co = coroutine.create(function()\n    for i = 1, 10 do\n        print(i)\n        coroutine.yield()\n    end\nend)\n\nreturn co\n```\n\n```cs\nvar results = await state.DoFileAsync(\"coroutine.lua\");\nvar co = results[0].Read<LuaThread>();\n\nfor (int i = 0; i < 10; i++)\n{\n    var resumeResults = await co.ResumeAsync(state);\n\n    // coroutine.resume()\u3068\u540c\u69d8\u3001\u6210\u529f\u6642\u306f\u6700\u521d\u306e\u8981\u7d20\u306btrue\u3001\u305d\u308c\u4ee5\u964d\u306b\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u8fd4\u3059\n    // 1, 2, 3, 4, ...\n    Console.WriteLine(resumeResults[1]);\n}\n```\n\n## LuaObject\n\n`[LuaObject]`\u5c5e\u6027\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001Lua\u4e0a\u3067\u52d5\u4f5c\u3059\u308b\u72ec\u81ea\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002Lua\u3067\u4f7f\u3044\u305f\u3044\u30af\u30e9\u30b9\u306b\u3053\u306e\u5c5e\u6027\u3092\u4ed8\u52a0\u3059\u308b\u3053\u3068\u3067\u3001Source Generator\u304cLua\u5074\u304b\u3089\u5229\u7528\u3055\u308c\u308b\u30b3\u30fc\u30c9\u3092\u81ea\u52d5\u751f\u6210\u3057\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306fLua\u3067\u52d5\u4f5c\u3059\u308b`System.Numerics.Vector3`\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n```cs\nusing System.Numerics;\nusing Lua;\n\nvar state = LuaState.Create();\n\n// \u5b9a\u7fa9\u3057\u305fLuaObject\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u8ffd\u52a0\u3059\u308b\n// (LuaObject\u3092\u8ffd\u52a0\u3057\u305f\u30af\u30e9\u30b9\u306b\u306fLuaValue\u3078\u306e\u6697\u9ed9\u7684\u5909\u63db\u304c\u81ea\u52d5\u3067\u5b9a\u7fa9\u3055\u308c\u308b)\nstate.Environment[\"Vector3\"] = new LuaVector3();\n\nawait state.DoFileAsync(\"vector3_sample.lua\");\n\n// LuaObject\u5c5e\u6027\u3068partial\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u8ffd\u52a0\n[LuaObject]\npublic partial class LuaVector3\n{\n    Vector3 vector;\n\n    // Lua\u5074\u3067\u4f7f\u7528\u3055\u308c\u308b\u30e1\u30f3\u30d0\u30fc\u306bLuaMember\u5c5e\u6027\u3092\u4ed8\u52a0\n    // \u5f15\u6570\u306b\u306fLua\u3067\u306e\u540d\u524d\u3092\u6307\u5b9a (\u7701\u7565\u3057\u305f\u5834\u5408\u306f\u30e1\u30f3\u30d0\u30fc\u306e\u540d\u524d\u304c\u4f7f\u7528\u3055\u308c\u308b)\n    [LuaMember(\"x\")]\n    public float X\n    {\n        get => vector.X;\n        set => vector = vector with { X = value };\n    }\n\n    [LuaMember(\"y\")]\n    public float Y\n    {\n        get => vector.Y;\n        set => vector = vector with { Y = value };\n    }\n\n    [LuaMember(\"z\")]\n    public float Z\n    {\n        get => vector.Z;\n        set => vector = vector with { Z = value };\n    }\n\n    // static\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306f\u901a\u5e38\u306eLua\u95a2\u6570\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u308b\n    [LuaMember(\"create\")]\n    public static LuaVector3 Create(float x, float y, float z)\n    {\n        return new LuaVector3()\n        {\n            vector = new Vector3(x, y, z)\n        };\n    }\n\n    // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306f\u6697\u9ed9\u7684\u306b\u81ea\u8eab\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9(this)\u304c1\u756a\u76ee\u306e\u5f15\u6570\u3068\u3057\u3066\u8ffd\u52a0\u3055\u308c\u308b\n    // \u3053\u308c\u306fLua\u3067\u306finstance:method()\u306e\u3088\u3046\u306a\u8868\u8a18\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\n    [LuaMember(\"normalized\")]\n    public LuaVector3 Normalized()\n    {\n        return new LuaVector3()\n        {\n            vector = Vector3.Normalize(vector)\n        };\n    }\n}\n```\n\n```lua\n-- vector3_sample.lua\n\nlocal v1 = Vector3.create(1, 2, 3)\n-- 1  2  3\nprint(v1.x, v1.y, v1.z)\n\nlocal v2 = v1:normalized()\n-- 0.26726123690605164  0.5345224738121033  0.8017836809158325\nprint(v2.x, v2.y, v2.z)\n```\n\n`[LuaMember]`\u3092\u4ed8\u52a0\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9/\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u578b\u3001\u307e\u305f\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3084\u623b\u308a\u5024\u306e\u578b\u306f`LuaValue`\u307e\u305f\u306f\u305d\u308c\u306b\u5909\u63db\u304c\u53ef\u80fd\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u623b\u308a\u5024\u306b\u306f`void`, `Task/Task<T>`, `ValueTask/ValueTask<T>`, `UniTask/UniTask<T>`, `Awaitable/Awaitable<T>`\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n\u5229\u7528\u53ef\u80fd\u3067\u306a\u3044\u578b\u306b\u5bfe\u3057\u3066\u306fSource Generator\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n### LuaMetamethod\n\n`[LuaMetamethod]`\u5c5e\u6027\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001C#\u306e\u30e1\u30bd\u30c3\u30c9\u3092Lua\u5074\u3067\u4f7f\u7528\u3055\u308c\u308b\u30e1\u30bf\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\u4f8b\u3068\u3057\u3066\u3001\u5148\u307b\u3069\u306e`LuaVector3`\u30af\u30e9\u30b9\u306b`__add`, `__sub`, `__tostring`\u306e\u30e1\u30bf\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u305f\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059\u3002\n\n```cs\n[LuaObject]\npublic partial class LuaVector3\n{\n    // \u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u66f8\u304b\u308c\u305f\u5b9f\u88c5\u306f\u7701\u7565\n\n    [LuaMetamethod(LuaObjectMetamethod.Add)]\n    public static LuaVector3 Add(LuaVector3 a, LuaVector3 b)\n    {\n        return new LuaVector3()\n        {\n            vector = a.vector + b.vector\n        };\n    }\n    \n    [LuaMetamethod(LuaObjectMetamethod.Sub)]\n    public static LuaVector3 Sub(LuaVector3 a, LuaVector3 b)\n    {\n        return new LuaVector3()\n        {\n            vector = a.vector - b.vector\n        };\n    }\n\n    [LuaMetamethod(LuaObjectMetamethod.ToString)]\n    public override string ToString()\n    {\n        return vector.ToString();\n    }\n}\n```\n\n```lua\nlocal v1 = Vector3.create(1, 1, 1)\nlocal v2 = Vector3.create(2, 2, 2)\n\nprint(v1) -- <1, 1, 1>\nprint(v2) -- <2, 2, 2>\n\nprint(v1 + v2) -- <3, 3, 3>\nprint(v1 - v2) -- <-1, -1, -1>\n```\n\n> [!NOTE]\n> `__index`, `__newindex`\u306f`[LuaObject]`\u306e\u751f\u6210\u30b3\u30fc\u30c9\u306b\u5229\u7528\u3055\u308c\u308b\u305f\u3081\u3001\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n## \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\nLua\u3067\u306f`require`\u95a2\u6570\u3092\u7528\u3044\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u901a\u5e38\u306eLua\u3067\u306f`package.searchers`\u306e\u691c\u7d22\u95a2\u6570\u3092\u7528\u3044\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7ba1\u7406\u3092\u884c\u3044\u307e\u3059\u304c\u3001Lua-CSharp\u3067\u306f\u4ee3\u308f\u308a\u306b`ILuaModuleLoader`\u304c\u30e2\u30b8\u30e5\u30fc\u30eb\u8aad\u307f\u8fbc\u307f\u306e\u6a5f\u69cb\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```cs\npublic interface ILuaModuleLoader\n{\n    bool Exists(string moduleName);\n    ValueTask<LuaModule> LoadAsync(string moduleName, CancellationToken cancellationToken = default);\n}\n```\n\n\u3053\u308c\u3092`LuaState.ModuleLoader`\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u65b9\u6cd5\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306eLoader\u306b\u306flua\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30ed\u30fc\u30c9\u3059\u308b`FileModuleLoader`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001`CompositeModuleLoader.Create(loader1, loader2, ...)`\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u8907\u6570\u306eLoader\u3092\u7d44\u307f\u5408\u308f\u305b\u305fLoader\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\n```cs\nstate.ModuleLoader = CompositeModuleLoader.Create(\n    new FileModuleLoader(),\n    new CustomModuleLoader()\n);\n```\n\n\u307e\u305f\u3001\u30ed\u30fc\u30c9\u6e08\u307f\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u901a\u5e38\u306eLua\u540c\u69d8\u306b`package.loaded`\u30c6\u30fc\u30d6\u30eb\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f`LuaState.LoadedModules`\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n## \u4f8b\u5916\u51e6\u7406\n\nLua\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u89e3\u6790\u30a8\u30e9\u30fc\u3084\u5b9f\u884c\u6642\u4f8b\u5916\u306f`LuaException`\u3092\u7d99\u627f\u3057\u305f\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3057\u307e\u3059\u3002\u3053\u308c\u3092catch\u3059\u308b\u3053\u3068\u3067\u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```cs\ntry\n{\n    await state.DoFileAsync(\"filename.lua\");\n}\ncatch (LuaParseException)\n{\n    // \u69cb\u6587\u306b\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u969b\u306e\u51e6\u7406\n}\ncatch (LuaRuntimeException)\n{\n    // \u5b9f\u884c\u6642\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u969b\u306e\u51e6\u7406\n}\n```\n\n## \u4e92\u63db\u6027\n\nLua-CSharp\u306f.NET\u3068\u306e\u7d71\u5408\u3092\u5ff5\u982d\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001C\u5b9f\u88c5\u3068\u306f\u4e92\u63db\u6027\u304c\u306a\u3044\u4ed5\u69d8\u304c\u3044\u304f\u3064\u304b\u5b58\u5728\u3057\u307e\u3059\u3002\n\n### \u30d0\u30a4\u30ca\u30ea\n\nLua-CSharp\u306fLua\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u305b\u3093(luac\u306a\u3069\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093)\u3002\u5b9f\u884c\u53ef\u80fd\u306a\u306e\u306fLua\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u307f\u3067\u3059\u3002\n\n### \u6587\u5b57\u30b3\u30fc\u30c9\n\nLua-CSharp\u3067\u5229\u7528\u3055\u308c\u308b\u6587\u5b57\u30b3\u30fc\u30c9\u306fUTF-16\u3067\u3059\u3002\u901a\u5e38Lua\u306f1\u30d0\u30a4\u30c8\u30671\u6587\u5b57\u3092\u8868\u3059\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6587\u5b57\u5217\u307e\u308f\u308a\u306e\u52d5\u4f5c\u304c\u5927\u304d\u304f\u7570\u306a\u308a\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u51fa\u529b\u7d50\u679c\u306f\u901a\u5e38\u306eLua\u3067\u306f`15`\u3067\u3059\u304c\u3001Lua-CSharp\u3067\u306f`5`\u3067\u3059\u3002\n\n```lua\nlocal l = string.len(\"\u3042\u3044\u3046\u3048\u304a\")\nprint(l)\n```\n\nString\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u306f\u3059\u3079\u3066\u6587\u5b57\u5217\u3092UTF-16\u3068\u3057\u3066\u6271\u3046\u5b9f\u88c5\u306b\u5909\u66f4\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n### \u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n\nLua-CSharp\u306fC#\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081.NET\u306eGC\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30e1\u30e2\u30ea\u7ba1\u7406\u306b\u95a2\u3059\u308b\u52d5\u4f5c\u304c\u901a\u5e38\u306eLua\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\n\n`collectgarbage()`\u306f\u5229\u7528\u53ef\u80fd\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u5358\u306b`GC.Collect()`\u306e\u547c\u3073\u51fa\u3057\u3067\u3059\u3002\u5f15\u6570\u306e\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u5f31\u53c2\u7167\u30c6\u30fc\u30d6\u30eb(week tables)\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\u3002\n\n### module\u30e9\u30a4\u30d6\u30e9\u30ea\n\nmodule\u30e9\u30a4\u30d6\u30e9\u30ea\u306f`require()`\u304a\u3088\u3073`package.loaded`\u306e\u307f\u304c\u5229\u7528\u3067\u304d\u3001\u305d\u308c\u4ee5\u5916\u306e\u95a2\u6570\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u306fLua-CSharp\u306f.NET\u306b\u6700\u9069\u5316\u3055\u308c\u305f\u72ec\u81ea\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u8aad\u307f\u8fbc\u307f\u306e\u6a5f\u80fd\u3092\u6709\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u8a73\u7d30\u306f[\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f](#\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8aad\u307f\u8fbc\u307f)\u306e\u9805\u76ee\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n### debug\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\u73fe\u5728debug\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b9f\u88c5\u306f\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u306fLua-CSharp\u306e\u5185\u90e8\u5b9f\u88c5\u304cC\u5b9f\u88c5\u3068\u306f\u5927\u304d\u304f\u7570\u306a\u308a\u3001\u540c\u3058API\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u305f\u3081\u3067\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001v1\u307e\u3067\u306b\u5b9f\u88c5\u53ef\u80fd\u306a\u4e00\u90e8\u306eAPI\u306e\u307f\u306e\u63d0\u4f9b\u3001\u307e\u305f\u306f\u4ee3\u66ff\u3068\u306a\u308b\u30c7\u30d0\u30c3\u30b0\u6a5f\u80fd\u3092\u691c\u8a0e\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30e9\u30a4\u30bb\u30f3\u30b9\n\n\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f[MIT\u30e9\u30a4\u30bb\u30f3\u30b9](LICENSE)\u306e\u4e0b\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n",
    "readme_filenames": [
      "./README.md",
      "./README_JA.md"
    ]
  },
  "llm_calls_before_build": 0,
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM mcr.microsoft.com/dotnet/sdk:8.0\n\n# Set the working directory inside the container\nWORKDIR /src\n\n# Clone the repository and checkout the specific commit that fixes the issue\nRUN git clone https://github.com/AnnulusGames/Lua-CSharp.git . \\\n    && git checkout b3b7d8d976733929d0f8726b46cb688a4ceb7215\n\n# Restore NuGet packages and build the solution without additional flags\nRUN dotnet build Lua.sln",
  "dockerfile_build_success": true,
  "successful_candidate_index": 1,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "llm_calls_total": 5
}