[
  {
    "number": 90,
    "title": "Error: 'LuaAsset' could not be found after installing via NuGet to Unity 6",
    "created_at": "2025-01-12T15:22:20Z",
    "closed_at": "2025-01-12T15:36:21Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/90",
    "body": "I created a new Unity 6000.0.33f1 project, installed NuGet via git URL, and installed LuaCSharp through NuGet and afterwards installed the LuaCSharp package via Package Manager from git URL.\r\n\r\nAfter that I created a simple test script in the Assets root folder:\r\n\r\n```\r\nusing UnityEngine;\r\n\r\nnamespace DefaultNamespace\r\n{\r\n\tpublic class MonoBehaviour1 : MonoBehaviour\r\n\t{\r\n\t\tpublic LuaAsset script;\r\n\t}\r\n}\r\n```\r\n\r\nThis says LuaAsset could not be found:\r\n\r\n```\r\nAssets\\MonoBehaviour1.cs(10,10): error CS0246: The type or namespace name 'LuaAsset' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nI repeated this by creating an `Editor` folder with another script thinking LuaAsset may be editor-only but this results in the same error.\u00a0\r\n\r\nThen I added Assembly Definitions, one for the runtime script and another for the editor script, referencing Lua.Unity for both and Lua.Unity.Editor for the editor assembly. But no matter what, the error sticks.\r\n\r\nAlso added a test.lua file under Assets and selected it. Inspector reads \"Test (Lua Asset)\" indicating that the Lua importer is active.\r\n\r\nI tried about everything I could think of but the LuaAsset type just isn't available.",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/90/comments",
    "author": "CodeSmile-0000011110110111",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-12T15:25:25Z",
        "body": "~~Do you have both the core package and the Unity extension installed?~~\r\nAnd have you simply forgotten to `using Lua.Unity`?"
      },
      {
        "user": "CodeSmile-0000011110110111",
        "created_at": "2025-01-12T15:36:11Z",
        "body": "Oh god, my (total beginner's) mistake. Yes, that's it, and it works.\r\n\r\nIn my defense, I rely on Rider to autofix such things but it didn't give me that option initally. I assume Rider was still \"scanning\" for types at that point and I didn't stop to try again a second time.\n\n---\n\nmy mistake"
      }
    ],
    "satisfaction_conditions": [
      "Identifies the required namespace for LuaAsset",
      "Addresses IDE/editor recognition of newly added packages"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 01:49:26"
    }
  },
  {
    "number": 65,
    "title": "Number expected, got Number",
    "created_at": "2025-01-01T19:32:48Z",
    "closed_at": "2025-01-01T19:39:51Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/65",
    "body": "chunk:1: bad argument #2 to 'anonymous' (Number expected, got Number)\r\nI dont understand this error\r\nIt occurs at:\r\n```csharp\r\nluaexec.Environment[\"additem\"] = new LuaFunction((context, buffer, ct) => // additem(spawnId, id, x, y, z, rx, ry, rz, rw, damaged, glue)\r\n{\r\n    string spawnid = context.GetArgument<string>(0);\r\n    int id = context.GetArgument<int>(1);\r\n    int x = context.GetArgument<int>(2);\r\n    int y = context.GetArgument<int>(3);\r\n    int z = context.GetArgument<int>(4);\r\n    int rx = context.GetArgument<int?>(5) ?? 0;\r\n    int ry = context.GetArgument<int?>(6) ?? 0;\r\n    int rz = context.GetArgument<int?>(7) ?? 0;\r\n    int rw = context.GetArgument<int?>(8) ?? 0;\r\n    bool damaged = context.GetArgument<bool?>(9) ?? false;\r\n    bool glue = context.GetArgument<bool?>(10) ?? false;\r\n    JArray itdata = (JArray)(scene[\"itemData\"] ?? new JArray());\r\n    JObject newItem = new JObject();\r\n    newItem[\"spawnId\"] = spawnid;\r\n    newItem[\"id\"] = id;\r\n    JObject newItemPos = new JObject();\r\n    newItemPos[\"x\"] = x;\r\n    newItemPos[\"y\"] = y;\r\n    newItemPos[\"z\"] = z;\r\n    JObject newItemRot = new JObject();\r\n    newItemRot[\"x\"] = rx;\r\n    newItemRot[\"y\"] = ry;\r\n    newItemRot[\"z\"] = rz;\r\n    newItemRot[\"w\"] = rw;\r\n    JObject newItemData = new JObject();\r\n    newItemData[\"damaged\"] = damaged;\r\n    newItemData[\"glue\"] = glue;\r\n    newItem[\"pos\"] = newItemPos;\r\n    newItem[\"rot\"] = newItemRot;\r\n    newItem[\"data\"] = newItemData;\r\n    itdata.Add(newItem);\r\n    scene[\"itemData\"] = itdata;\r\n    return new ValueTask<int>(0);\r\n});\r\n```",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/65/comments",
    "author": "ImNotDario",
    "comments": [
      {
        "user": "ImNotDario",
        "created_at": "2025-01-01T19:40:16Z",
        "body": "I re-read the docs, it says to use double now it works. Would be useful if you added int\r\n"
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T23:34:09Z",
        "body": "This was fixed in #62."
      }
    ],
    "satisfaction_conditions": [
      "Clarification of numeric type handling in Lua-C# interop",
      "Documentation of supported argument types",
      "Resolution of ambiguous type conversion errors",
      "Framework-level type handling explanation"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 01:49:38"
    }
  }
]