[
  {
    "number": 848,
    "title": "Able to chat successfully with openai model after updating the model provider with invalid keys.",
    "created_at": "2024-12-13T20:20:37Z",
    "closed_at": "2024-12-17T00:21:53Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/obot-platform/obot/issues/848",
    "body": "**Steps to reproduce the problem:**\r\n1. Configure OpenAI model provider with correct value.\r\n2. Create an agent and chat with it.\r\n3. Update OpenAI model provider configuration and set Api key to invalid values.\r\n4. Go to \"Set Default Models\" page and use \"Save Changes\" to set the default models.\r\nNotice that even with model provider set to invalid keys, we are able to chat with the agent created in step 1 successfully.\r\n\r\n**Expected Behavior:**\r\nSince the OpenAI model provider is misconfigured , we should not be able to chat with the agents anymore.",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/848/comments",
    "author": "sangee2004",
    "comments": [
      {
        "user": "thedadams",
        "created_at": "2024-12-13T20:28:30Z",
        "body": "This has been addressed in the tools repo. You would need to reset the Otto8 database and clear the gptscript cache to test this immediately."
      },
      {
        "user": "sangee2004",
        "created_at": "2024-12-17T00:21:53Z",
        "body": "This issue is not seen anymore when testing with latest build."
      }
    ],
    "satisfaction_conditions": [
      "Invalid API keys must immediately prevent agent functionality",
      "System must validate model provider configuration changes in real-time",
      "Solution must persist across system updates without manual intervention"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:51:53"
    }
  },
  {
    "number": 735,
    "title": "Provide a way to pull latest changes made to a registered tool on demand.",
    "created_at": "2024-12-03T00:56:27Z",
    "closed_at": "2025-01-14T23:26:38Z",
    "labels": [
      "enhancement",
      "admin-ui"
    ],
    "url": "https://github.com/obot-platform/obot/issues/735",
    "body": "**Steps to reproduce the problem:**\r\n1. Register a new tool from a github repo.\r\n2. Add this tool to an agent.\r\n3. Chat with the agent that involves this tool call.\r\n4.  Make some changes to the tool in the github repo.\r\n\r\nThere is no way for me to use the new version of the tool.\r\n\r\nEven when I delete the tool and add the same tool again, I only get the version of the tool from step1 (changes from step4 are not available).\r\n\r\n\r\n**Expected Behavior:**\r\nProvide a way to pull latest changes made to a registered tool on demand.",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/735/comments",
    "author": "sangee2004",
    "comments": [
      {
        "user": "thedadams",
        "created_at": "2025-01-13T16:24:48Z",
        "body": "The backend changes for this PR have merged and this is ready for UI work.\r\n\r\nThe API for \"force refresh\" of a tool reference is `POST /api/tool-references/{id}/force-refresh`."
      },
      {
        "user": "ryanhopperlowe",
        "created_at": "2025-01-13T19:11:41Z",
        "body": "@cjellick - should this be available on all tools or just custom ones?"
      },
      {
        "user": "cjellick",
        "created_at": "2025-01-13T19:15:47Z",
        "body": "Custom. @thedadams did you put distinguish between the two?"
      },
      {
        "user": "ryanhopperlowe",
        "created_at": "2025-01-13T22:00:27Z",
        "body": "@cjellick @thedadams - The api that the backend exposes here seems to return an asynchronous response. My steps:\n\n- Update tool \n- Force Refresh Tool\n- refetch `GET /api/tool-references?type=tool`\n\nI do not see the list update as I'd expect. Refreshing gets the new data.\n\noptions here are to either make the response synchronous or implement Polling in the UI. ~~If we were to go with Polling, I'd probably want some indicator as to when the tool was last updated so I know when to stop polling for the updates~~\n\nEdit: I tried using `revision` as an indicator, but that did not help because there will be times where `Force Refresh` is triggered and there will be no changes to the repo. In this scenario, polling would start but never stop (unless with an arbitrary timeout)\n\nWith this in mind polling is not a good solution and I'd push to make the api synchronous. Very open to discussion on the matter though.\n\nWDYT?"
      },
      {
        "user": "thedadams",
        "created_at": "2025-01-14T02:43:49Z",
        "body": "> Custom. @thedadams did you put distinguish between the two?\n\nThere is no difference from the backend perspective; it makes sense to refresh either.\n\n@ryanhopperlowe Regarding synchronous/asynchronous: the refreshing is done asynchronously. I believe polling is already implemented for tool references in the UI because I added a `resolved` field to the tool reference object that is false or undefined until the tool reference has been updated. That field should still be useful in this case."
      },
      {
        "user": "sangee2004",
        "created_at": "2025-01-14T23:26:38Z",
        "body": "Able to pull the latest version for custom tools using \"Refresh Tool\" option provided the tool in the `Tools` page."
      }
    ],
    "satisfaction_conditions": [
      "Provides a manual refresh mechanism for tools",
      "Supports custom tool updates specifically",
      "Ensures latest version retrieval bypasses cache",
      "Offers UI-integrated update confirmation"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:52:29"
    }
  },
  {
    "number": 642,
    "title": "Knowledge - Restrict syncing files larger than certain size to prevent 100% cpu consumption on ingestion of these files.",
    "created_at": "2024-11-20T18:05:23Z",
    "closed_at": "2024-11-21T22:24:04Z",
    "labels": [
      "bug",
      "knowledge"
    ],
    "url": "https://github.com/obot-platform/obot/issues/642",
    "body": "When trying to ingest knowledge files ( from onedrive location in my casew) which have audio and video files > 100 MB large, it results in 100% cpu consumption making the server unresponsive.\r\n\r\n**Expected Behavior:**\r\nWe should be able to restrict syncing files larger than certain size to prevent 100% cpu consumption on ingestion of these files.",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/642/comments",
    "author": "sangee2004",
    "comments": [
      {
        "user": "StrongMonkey",
        "created_at": "2024-11-21T17:48:38Z",
        "body": "I put a fix where files that are bigger than 50 mb won't be synced"
      },
      {
        "user": "sangee2004",
        "created_at": "2024-11-21T22:24:04Z",
        "body": "Tested with latest build.\n\nWe sync only files that are less than 50 mb now."
      }
    ],
    "satisfaction_conditions": [
      "Prevents syncing of files exceeding a configurable size threshold",
      "Maintains server responsiveness during sync operations",
      "Applies synchronization filters before processing"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:53:00"
    }
  },
  {
    "number": 358,
    "title": "Provide a way to interrupt a response when it is being streamed.",
    "created_at": "2024-10-29T19:43:49Z",
    "closed_at": "2024-12-19T18:08:17Z",
    "labels": [
      "enhancement",
      "admin-ui"
    ],
    "url": "https://github.com/obot-platform/obot/issues/358",
    "body": "Currently there is no way to interrupt a response when it is being streamed.",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/358/comments",
    "author": "sangee2004",
    "comments": [
      {
        "user": "cjellick",
        "created_at": "2024-12-16T17:55:45Z",
        "body": "API now exists: `threads/{id}/abort`\r\n\r\n@ivyjeong13 - im going to assign this to you so that you can get some exposure to the chat functionality\n\n---\n\nfunctionality is already in the consumption ui, so this just needs done in admin ui"
      },
      {
        "user": "sangee2004",
        "created_at": "2024-12-19T18:08:17Z",
        "body": "When testing with latest version we are provided with ability to interrupt chat responses."
      }
    ],
    "satisfaction_conditions": [
      "Provides a mechanism to interrupt/abort a streaming response in real-time"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:53:19"
    }
  },
  {
    "number": 86,
    "title": "UI -Knowledge - Pdf files that can not be ingested (like scanned documents) show up as being stuck in \"Transformed documents\" state forever in ui.",
    "created_at": "2024-09-27T00:24:06Z",
    "closed_at": "2024-10-09T19:12:14Z",
    "labels": [
      "bug",
      "admin-ui",
      "knowledge"
    ],
    "url": "https://github.com/obot-platform/obot/issues/86",
    "body": "UI - `b236257b3`\r\n**Steps to reproduce the problem:**\r\n1. Create an agent and add a pdf file which is a scanned document.\r\n2. Notice that the file ingestion state gets stuck in \"Transformed documents\" state forever and UI shows a spinning state icon.\r\n\r\n**Expected Behavior:**\r\nSince ingestion action  is complete in this case , UI should show these entries as being completed.\r\nNot sure if we want to provide a state to indicate that we were not able to ingest any data from this document.",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/86/comments",
    "author": "sangee2004",
    "comments": [
      {
        "user": "StrongMonkey",
        "created_at": "2024-10-09T03:50:09Z",
        "body": "this is actually fixed already"
      },
      {
        "user": "sangee2004",
        "created_at": "2024-10-09T19:12:14Z",
        "body": "This issue is not seen anymore when testing with latest knowledge tool."
      }
    ],
    "satisfaction_conditions": [
      "UI must clearly indicate completion of ingestion for scanned/unprocessable documents",
      "State representation must reflect terminal outcomes rather than perpetual progress"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:53:49"
    }
  },
  {
    "number": 81,
    "title": "Browser tool process doesn't close after workflow runs",
    "created_at": "2024-09-26T20:42:12Z",
    "closed_at": "2025-01-10T05:11:14Z",
    "labels": [
      "bug",
      "tools"
    ],
    "url": "https://github.com/obot-platform/obot/issues/81",
    "body": "The browser tool does not close when a workflow finishes running because it is designed to stay running until the calling process exits. The calling process in this case is Otto Server which is a daemon. \r\n\r\nWe need to adjust the behavior to handle the following usecases:\r\n\r\n- Multiple workflows need to be able to use the browser tool concurrently, and independently. Meaning they should not share browser state/session/logins, etc.\r\n- A single workflow should use the same browser session throughout the run.\r\n- At the end of a workflow invocation the browser tool should shut down. \r\n  - If workspaces are preserved, can this be resumed? Is the workspace then tied to the thread? This might be ok.",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/81/comments",
    "author": "cloudnautique",
    "comments": [
      {
        "user": "njhale",
        "created_at": "2024-12-16T17:39:18Z",
        "body": "@cloudnautique The Browser tool is also a daemon. It does open browser processes and manage session data separately on a per-thread basis. It also terminates them after a fixed period of inactivity for the respective thread (I think ~10 minutes since the last request). Is this sufficient to meet your requirements?"
      },
      {
        "user": "cloudnautique",
        "created_at": "2025-01-10T05:11:14Z",
        "body": "@njhale yes, this meets the requirements. "
      }
    ],
    "satisfaction_conditions": [
      "Supports concurrent browser sessions with isolated state for multiple workflows",
      "Maintains consistent browser session within a single workflow execution",
      "Terminates browser sessions after workflow completion or inactivity timeout",
      "Preserves workspace state in a thread-aware manner when required"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:54:01"
    }
  },
  {
    "number": 27,
    "title": "Provide a way to get version ",
    "created_at": "2024-09-19T17:46:15Z",
    "closed_at": "2024-10-28T20:01:55Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/obot-platform/obot/issues/27",
    "body": "Support for `otto --version`/`otto --v` to provide the commit id.",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/27/comments",
    "author": "sangee2004",
    "comments": [
      {
        "user": "drpebcak",
        "created_at": "2024-10-28T18:11:13Z",
        "body": "This exists already as `otto8 version`"
      },
      {
        "user": "sangee2004",
        "created_at": "2024-10-28T20:01:55Z",
        "body": "```\n./bin/otto8 version\nVersion:  v0.0.0-dev-cf442566-dirty\n```"
      }
    ],
    "satisfaction_conditions": [
      "The version command must output the commit ID",
      "Version information must be accessible via a simple CLI command"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:54:27"
    }
  },
  {
    "number": 14,
    "title": "When invoke is used with multiple inputs there is 1 thread that gets created for each input.",
    "created_at": "2024-09-18T00:12:14Z",
    "closed_at": "2024-12-13T22:54:57Z",
    "labels": [
      "bug"
    ],
    "url": "https://github.com/obot-platform/obot/issues/14",
    "body": "commit id - `d7fcd7e95`\r\n\r\n**Steps to reproduce the problem**\r\n\r\n1. Create an agent.\r\n2. use `invoke` to chat with the agent and add multiple inputs.\r\n\r\n```\r\n%otto invoke a1n4kn6 \r\nInput: who won 2024 superbowk\r\n> Input: who won 2024 superbowk\r\n> Waiting for model... \r\n> Generating tool input for (answersFromTheInternet)...  {\"question\":\"Who won the 2024 Super Bowl?\"} \r\n> Running tool (answers-from-the-internet): {\"question\":\"Who won the 2024 Super Bowl?\"}\r\n> Waiting for model... \r\nThe Kansas City Chiefs won the 2024 Super Bowl (Super Bowl LVIII) by defeating the San Francisco 49ers with a score of 25-22 in overtime. Patrick Mahomes, the quarterback for the Chiefs, was named the MVP of the game. \r\n \r\nInput: who won 2024 nba\r\n> Input: who won 2024 nba\r\n> Waiting for model... \r\n> Generating tool input for (answersFromTheInternet)...  {\"question\":\"Who won the 2024 NBA Championship?\"} \r\n> Running tool (answers-from-the-internet): {\"question\":\"Who won the 2024 NBA Championship?\"}\r\n> Waiting for model... \r\nThe Boston Celtics won the 2024 NBA Championship by defeating the Dallas Mavericks in the NBA Finals. The Celtics secured their 18th championship by winning the series 4-1, and Jaylen Brown was named the Finals MVP. \r\n \r\nInput: \r\n```\r\n4. Notice that there is a thread id created for each input.\r\n```\r\notto % otto run a1n4kn6    \r\nID        AGENT     THREAD    STATE      INPUT                    OUTPUT                                                                          CREATED\r\nr1rpv7f   a1n4kn6   t15qs24   continue   who won 2024 superbowk   The Kansas City Chiefs won the 2024 Super Bowl (Super Bowl LVIII) by defea...   1 minute ago\r\nr1wdm4j   a1n4kn6   t1dxp97   continue   who won 2024 nba         The Boston Celtics won the 2024 NBA Championship by defeating the Dallas M...   23 seconds ago\r\n```\r\n\r\n**Expected Behavior:**\r\n1. There should be the same thread id used for all the inputs .",
    "comments_url": "https://api.github.com/repos/obot-platform/obot/issues/14/comments",
    "author": "sangee2004",
    "comments": [
      {
        "user": "thedadams",
        "created_at": "2024-12-13T16:01:11Z",
        "body": "Not able to reproduce this with the latest version of Otto8 and the CLI. Moving to \"Testing\" for verification."
      },
      {
        "user": "sangee2004",
        "created_at": "2024-12-13T22:54:57Z",
        "body": "This issue is not seen anymore when testing with latest builds."
      }
    ],
    "satisfaction_conditions": [
      "Maintains thread continuity across multiple sequential invocations",
      "Preserves session state between subsequent inputs",
      "Ensures consistent execution context for sequential agent interactions",
      "Prevents unnecessary thread proliferation in interactive mode"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:54:50"
    }
  }
]