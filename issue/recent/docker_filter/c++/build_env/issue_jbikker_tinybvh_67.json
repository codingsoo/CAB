{
  "number": 67,
  "title": "Crashes with CWBVH usage",
  "created_at": "2024-12-17T20:39:12Z",
  "closed_at": "2024-12-18T07:38:25Z",
  "labels": [],
  "url": "https://github.com/jbikker/tinybvh/issues/67",
  "body": "When I build a CWBVH it crashes because allocatedBlocks is uninitialized so its value can be greater than spaceNeeded and no allocation of bvh8Data/bvh8Tris occurs. \r\n\r\nSecond problem is when I create a BVH8 and then build a CWBVH by using ConvertFrom when I go to free them, freeing both results in a crash. At first glance it looks like this is because the copy of BVH8 is not a deep copy so its two structs holding the same pointer to bvh8Node and then it gets freed twice when bvh8 is destructed.",
  "comments_url": "https://api.github.com/repos/jbikker/tinybvh/issues/67/comments",
  "author": "andr3wmac",
  "comments": [
    {
      "user": "jbikker",
      "created_at": "2024-12-18T14:18:42Z",
      "body": "This should be fixed in the latest commit on the dev branch, can you verify? The data was indeed not zeroed. Regarding the second problem: I am not sure what you encountered, perhaps it is related to the first issue; The CWBVH is not using data from bvh8, since it needs a specific format for both nodes and tris.\n\n---\n\nSecond issue was actually an issue too, sorry for dismissing that too soon. This should now be resolved: tinybvh now keeps track of ownership of bvhs and prevents duplicated deletion."
    },
    {
      "user": "andr3wmac",
      "created_at": "2024-12-18T19:17:48Z",
      "body": "Np, just tested the latest and it looks like everything is working great \ud83d\udc4d thanks for the quick fixes."
    }
  ],
  "satisfaction_conditions": [
    "Ensures proper initialization of critical variables to prevent invalid memory access",
    "Implements ownership tracking for shared resources to prevent double-free scenarios"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-04-05 01:47:13"
  },
  "git_commit_info": {
    "sha": "44464f51e0f75cf2ebecb08537b79627875b56ea",
    "date": "2024-12-17T17:39:51Z",
    "message": "Fix broken build.",
    "author": "Jacco Bikker"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-4f7a65372b9a60d1a99885d9deda3cc38b2f7850.pack\n./.git/objects/pack/pack-4f7a65372b9a60d1a99885d9deda3cc38b2f7850.rev\n./.git/objects/pack/pack-4f7a65372b9a60d1a99885d9deda3cc38b2f7850.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/main\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/main\n./.git/logs/HEAD\n./.git/index\n./.github\n./.github/workflows\n./.github/workflows/tinybvh_sdk_ci.yml\n./.gitignore\n./LICENSE\n./external\n./external/OpenCL\n./external/OpenCL/inc\n./external/OpenCL/inc/cl.h\n./external/OpenCL/inc/cl_platform.h\n./external/OpenCL/inc/cl_version.h\n./external/OpenCL/inc/version.txt\n./external/OpenCL/lib\n./external/OpenCL/lib/OpenCL.lib\n./external/OpenCL/lib/cllayerinfo.exe\n./external/OpenCL/version.txt\n./external/embree\n./external/embree/include\n./external/embree/include/embree4\n./external/embree/include/embree4/rtcore.h\n./external/embree/include/embree4/rtcore.isph\n./external/embree/include/embree4/rtcore_buffer.h\n./external/embree/include/embree4/rtcore_buffer.isph\n./external/embree/include/embree4/rtcore_builder.h\n./external/embree/include/embree4/rtcore_common.h\n./external/embree/include/embree4/rtcore_common.isph\n./external/embree/include/embree4/rtcore_config.h\n./external/embree/include/embree4/rtcore_device.h\n./external/embree/include/embree4/rtcore_device.isph\n./external/embree/include/embree4/rtcore_geometry.h\n./external/embree/include/embree4/rtcore_geometry.isph\n./external/embree/include/embree4/rtcore_quaternion.h\n./external/embree/include/embree4/rtcore_quaternion.isph\n./external/embree/include/embree4/rtcore_ray.h\n./external/embree/include/embree4/rtcore_ray.isph\n./external/embree/include/embree4/rtcore_scene.h\n./external/embree/include/embree4/rtcore_scene.isph\n./external/embree/lib\n./external/embree/lib/embree4.lib\n./external/embree/lib/tbb12.lib\n./external/embree/lib/cmake\n./external/embree/lib/cmake/embree-4.3.3\n./external/embree/lib/cmake/embree-4.3.3/embree-config-version.cmake\n./external/embree/lib/cmake/embree-4.3.3/embree-config.cmake\n./external/embree/lib/cmake/embree-4.3.3/embree-targets-release.cmake\n./external/embree/lib/cmake/embree-4.3.3/embree-targets.cmake\n./external/embree/version.txt\n./external/fenster.h\n./images\n./images/test.png\n./testdata\n./testdata/armadillo.bin\n./testdata/bunny.bin\n./testdata/cryteksponza.bin\n./testdata/dragon.bin\n./testdata/happybuddha.bin\n./testdata/head.bin\n./testdata/legocar.bin\n./testdata/lucy.bin\n./testdata/suzanne.bin\n./testdata/xyzrgb_dragon.bin\n./vcproj\n./vcproj/embree4.dll\n./vcproj/tbb12.dll\n./vcproj/tbbmalloc.dll\n./vcproj/tiny_bvh_fenster.vcxproj.filters\n./vcproj/tiny_bvh_fenster.vcxproj.user\n./vcproj/tiny_bvh_minimal.vcxproj.filters\n./vcproj/tiny_bvh_minimal.vcxproj.user\n./vcproj/tiny_bvh_pt.vcxproj.user\n./vcproj/tiny_bvh_renderer.vcxproj\n./vcproj/tiny_bvh_renderer.vcxproj.filters\n./vcproj/tiny_bvh_renderer.vcxproj.user\n./vcproj/tiny_bvh_speedtest.vcxproj.user\n./vcproj/tiny_bvh_anim.vcxproj\n./vcproj/tiny_bvh_fenster.vcxproj\n./vcproj/tiny_bvh_gpu.vcxproj\n./vcproj/tiny_bvh_gpu.vcxproj.filters\n./vcproj/tiny_bvh_minimal.vcxproj\n./vcproj/tiny_bvh_pt.vcxproj\n./vcproj/tiny_bvh_speedtest.vcxproj\n./CMakeLists.txt\n./README.md\n./tiny_bvh.h\n./tiny_bvh_anim.cpp\n./tiny_bvh_fenster.cpp\n./tiny_bvh_gpu.cpp\n./tiny_bvh_minimal.cpp\n./tiny_bvh_pt.cpp\n./tiny_bvh_renderer.cpp\n./tiny_bvh_speedtest.cpp\n./tiny_bvh_test.sln\n./tiny_ocl.h\n./traverse.cl\n./wavefront.cl\n",
    "readme": "\n--- ./README.md ---\n# dev\nThis is the tinybvh **development branch**. Here we try out new features. Code should be somewhat stable though.\n\n# tinybvh\nSingle-header BVH construction and traversal library written as \"Sane C++\" (or \"C with classes\"). Some C++11 is used, e.g. for threading. The library has no dependencies. \n\n# tinyocl\nSingle-header OpenCL library, which helps you select and initialize a device. It also loads, compiles and runs kernels, with several convenient features:\n* Include-file expansion for AMD devices\n* Multi-argument passing\n* Host/device buffer management\n* Vendor and architecture detection and propagation to #defines in OpenCL code\n* ..And many other things.\n\n![Rendered with tinybvh](images/test.png)\n\nTo use tinyocl, just include ````tiny_ocl.h````; this will automatically cause linking with ````OpenCL.lib```` in the 'external' folder, which in turn passes on work to vendor-specific driver code. But all that is not your problem!\n\nNote that the ````tiny_bvh.h```` library will work without ````tiny_ocl.h```` and remains dependency-free. The new ````tiny_ocl.h```` is only needed in projects that wish to trace rays _on the GPU_ using BVHs created by ````tiny_bvh.h````. \n  \n# BVH?\nA Bounding Volume Hierarchy is a data structure used to quickly find intersections in a virtual scene; most commonly between a ray and a group of triangles. You can read more about this in a series of articles on the subject: https://jacco.ompf2.com/2022/04/13/how-to-build-a-bvh-part-1-basics .\n\nRight now tiny_bvh comes with the following builders:\n* ````BVH::Build```` : Efficient plain-C/C+ binned SAH BVH builder which should run on any platform.\n* ````BVH::BuildAVX```` : A highly optimized version of BVH::Build for Intel CPUs.\n* ````BVH::BuildNEON```` : An optimized version of BVH::Build for ARM/NEON.\n* ````BVH::BuildHQ```` : A 'spatial splits' BVH builder, for highest BVH quality.\n\nSeveral special-purpose builders are also available:\n* ````BVH::BuildQuick```` : Simple mid-point split BVH builder. For reference only.\n* ````BVH::BuildEx```` : Double-precision version of ````BVH::Build````. Takes ````bvhdbl3```` vertices as input.\n* ````BVH::BuildTLAS```` : Builds a BVH over an array of ````bvhaabb````s or ````BVHInstance````s.\n\nA constructed BVH can be used to quickly intersect a ray with the geometry, using ````BVH::Intersect```` or ````BVH::IsOccluded````, for shadow rays. The double-precision BVH is traversed using ````BVH::IntersectEx````.\n\nThe constructed BVH will have a layout suitable for construction ('````WALD_32BYTE````'). Several other layouts for the same data are available, which all serve one or more specific purposes. You can convert between layouts using ````BVH::Convert````. The available layouts are:\n* ````BVH::WALD_32BYTE```` : A compact format that stores the AABB for a node, along with child pointers and leaf information in a cross-platform-friendly way. The 32-byte size allows for cache-line alignment.\n* ````BVH::ALT_SOA```` : This format stores bounding box information in a SIMD-friendly format, making the BVH faster to traverse.\n* ````BVH::WALD_DOUBLE```` : Double-precision version of ````BVH::WALD_32BYTE````.\n* ````BVH::VERBOSE```` : A format designed for modifying BVHs, e.g. for post-build optimizations using ````BVH::Optimize()````.\n* ````BVH::AILA_LAINE```` : This format uses 64 bytes per node and stores the AABBs of the two child nodes. This is the format presented in the [2009 Aila & Laine paper](https://research.nvidia.com/sites/default/files/pubs/2009-08_Understanding-the-Efficiency/aila2009hpg_paper.pdf) and recommended for basic GPU ray tracing.\n* ````BVH::BASIC_BVH4```` : In this format, each node stores four child pointers, reducing the depth of the tree. This improves performance for divergent rays. Based on the [2008 paper](https://graphics.stanford.edu/~boulos/papers/multi_rt08.pdf) by Ingo Wald et al.\n* ````BVH::BVH4_GPU```` : The ````BASIC_BVH4```` format can be converted to the more compact ````BVH4_GPU```` layout, which will be faster for GPU ray tracing.\n* ````BVH::BVH4_AFRA```` : The ````BASIC_BVH4```` format can also be converted to a SIMD-friendly ````BVH4_AFRA```` layout, currently the fastest option for single-ray traversal on CPU.\n* ````BVH::BASIC_BVH8```` : This format stores eight child pointers, further reducing the depth of the tree. The only purpose is the construction of ````BVH::CWBVH````.\n* ````BVH::CWBVH```` : An advanced 80-byte representation of the 8-wide BVH, for state-of-the-art GPU rendering, based on the [2017 paper](https://research.nvidia.com/publication/2017-07_efficient-incoherent-ray-traversal-gpus-through-compressed-wide-bvhs) by Ylitie et al. and [code by AlanWBFT](https://github.com/AlanIWBFT/CWBVH).\n\nA BVH in the ````BVH::WALD_32BYTE```` format may be _refitted_ in case the triangles moved using ````BVH::Refit````. Refitting is substantially faster than rebuilding and works well if the animation is subtle. Refitting does not work if polygon counts change.\n\n# How To Use\nThe library ````tiny_bvh.h```` is designed to be easy to use. Please have a look at tiny_bvh_minimal.cpp for an example. A Visual Studio 'solution' (.sln/.vcxproj) is included, as well as a CMake file. That being said: The examples consists of only a single source file, which can be compiled with clang or g++, e.g.:\n\n````g++ -std=c++20 -mavx tiny_bvh_minimal.cpp -o tiny_bvh_minimal````\n\nThe single-source sample **ASCII test renderer** can be compiled with\n\n````g++ -std=c++20 -mavx tiny_bvh_renderer.cpp -o tiny_bvh_renderer````\n\nThe cross-platform fenster-based single-source **bitmap renderer** can be compiled with\n\n````g++ -std=c++20 -mavx -mwindows -O3 tiny_bvh_fenster.cpp -o tiny_bvh_fenster```` (on windows)\n\n```g++ -std=c++20 -mavx -O3 -framework Cocoa tiny_bvh_fenster.cpp -o tiny_bvh_fenster``` (on macOS)\n\nThe multi-threaded **path tracing** demo can be compiled with\n\n````g++ -std=c++20 -mavx -mwindows -O3 tiny_bvh_pt.cpp -o tiny_bvh_pt```` (on windows)\n\nThe **performance measurement tool** can be compiled with:\n\n````g++ -std=c++20 -mavx -Ofast tiny_bvh_speedtest.cpp -o tiny_bvh_speedtest````\n\n# Version 1.1.1\n\nVersion 1.1.1 introduces a <ins>change to the API</ins>. The single BVH class with multiple layouts has been replaced with a BVH class per layout. You can simply instantiate the desired layout; conversion (and data ownership) is then handled properly by the library. Examples:\n\n````\nBVH bvh;\nbvh.Build( (bvhvec4*)myTriData, triangleCount );\nbvh.Intersect( ray );\n````\n\n````\nBVH4_CPU bvh;\nbvh.Build( (bvhvec4*)myTriData, triangleCount );\nbvh.Intersect( ray );\n````\n\nIf you wish to use a specific builder (such as the spatial splits builder) or if you need to do custom operations on the BVH, such as post-build optimizing, you can still do the conversions manually. Example:\n\n````\nBVH bvh;\nbvh.Build( (bvhvec4*)myTriData, triangleCount );\nBVH_Verbose tmp;\ntmp.ConvertFrom( bvh );\ntmp.Optimize( 100000 );\nbvh.ConvertFrom( tmp );\nprintf( \"Optimized BVH SAH cost: %f\\n\", bvh.SAHCost() );\n````\n\nNote that in this case, data ownership and lifetime must be managed carefully. Specifically, layouts converted from other layouts use data from the original, so both must be kept alive.\n\nThis version of the library includes the following functionality:\n* Binned SAH BVH builder\n* Fast binned SAH BVH builder using AVX intrinsics\n* Fast binned SAH BVH builder using NEON intrinsices, by [wuyakuma](https://github.com/wuyakuma)\n* Double-precision binned SAH BVH builder\n* Spatial Splits ([SBVH](https://www.nvidia.in/docs/IO/77714/sbvh.pdf), Stich et al., 2009) builder\n* 'Compressed Wide BVH' (CWBVH) data structure\n* BVH optimizer: reduces SAH cost and improves ray tracing performance ([Bittner et al., 2013](https://www.nvidia.in/docs/IO/77714/sbvh.pdf))\n* Collapse to 4-wide and 8-wide BVH\n* Conversion of 4-wide BVH to GPU-friendly 64-byte quantized format\n* Single-ray and packet traversal\n* Fast triangle intersection: Implements the 2016 paper by [Baldwin & Weber](https://jcgt.org/published/0005/03/03/paper.pdf)\n* OpenCL traversal: Aila & Laine, 4-way quantized, CWBVH\n* Support for WASM / EMSCRIPTEN, g++, clang, Visual Studio\n* Optional user-defined memory allocation, by [Thierry Cantenot](https://github.com/tcantenot)\n* Vertex array can now have a custom stride, by [David Peicho](https://github.com/DavidPeicho)\n* Clear data ownership and intuitive management via the new and simplified API, with lots of help from David Peicho\n* You can now also BYOVT ('bring your own vector types'), thanks [Tijmen Verhoef](https://github.com/nemjit001)\n* 'SpeedTest' tool that times and validates all (well, most) traversal kernels.\n\nThe current version of the library is rapidly gaining functionality. Please expect changes to the interface.\n\nPlans, ordered by priority:\n\n* NEW: We now also use the \"Issues\" list for this!\n* TLAS/BLAS traversal with BLAS transforms\n  * Support more than two levels\n* Documentation:\n  * Wiki\n  * Article on architecture and intended use\n* Bridge to rt hw / layouts:\n  * Produce a BVH for Intel rt hw (mind the quads)\n  * Produce a BVH for AMD rt hw\n  * Use inline asm on AMD for aabb/tri intersect\n  * Support templated N-wide BVH\n* Example renderers:\n  * CPU WHitted-style ray tracer\n  * CPU and GPU path tracer\n  * CPU and GPU wavefront path tracer\n* BVH::Optimize:\n  * Faster Optimize algorithm (complete paper implementation)\n  * Understanding optimized SBVH performance\n* CPU single-ray performance\n  * Reverse-engineer Embree & PhysX\n  * Implement Fuetterling et al.'s 2017 paper\n  \n# tinybvh in the Wild\nA list of projects using tinybvh:\n* [unity-tinybvh](https://github.com/andr3wmac/unity-tinybvh): An example implementation for tinybvh in Unity and a foundation for building compute based raytracing solutions, by Andrew MacIntyre.\n\nCreated or know about other projects? [Let me know](mailto:bikker.j@gmail.com)!\n\n# Contact\nQuestions, remarks? Contact me at bikker.j@gmail.com or on twitter: @j_bikker, or BlueSky: @jbikker.bsky.social .\n\n# License\nThis library is made available under the MIT license, which starts as follows: \"Permission is hereby granted, free of charge, .. , to deal in the Software **without restriction**\". Enjoy.\n\n\n",
    "readme_filenames": [
      "./README.md"
    ],
    "github_workflows": {
      ".github/workflows/tinybvh_sdk_ci.yml": "name: tinybvh CI\n\non:\n  push:\n    branches: [ main, dev ]\n  pull_request:\n    branches: [ main, dev ]\n\njobs:\n  build:\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-latest]\n        config: [Release, Debug]\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Install Packages\n      if: ${{ matrix.os == 'ubuntu-latest' }}\n      run: sudo apt install -y libboost-system-dev\n\n    - name: Configure CMake\n      run: >\n        cmake -LA -B ${{github.workspace}}/build\n        -DCMAKE_BUILD_TYPE=${{ matrix.config }}\n\n    - name: Build\n      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.config }}\n\n    - name: Run tests\n      working-directory: ${{github.workspace}}/build\n      run: ctest -C ${{ matrix.config }}\n"
    }
  },
  "llm_calls_before_build": 0,
  "github_workflows_found": [
    ".github/workflows/tinybvh_sdk_ci.yml"
  ],
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM ubuntu:latest\n\n# Install system dependencies and build tools\nRUN apt-get update && \\\n    apt-get install -y git build-essential g++ cmake libboost-system-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /app\n\n# Clone repository and checkout specific commit with fix verification\nRUN git clone https://github.com/jbikker/tinybvh.git && \\\n    cd tinybvh && \\\n    git checkout 44464f51e0f75cf2ebecb08537b79627875b56ea\n\n# Build minimal test case from repository examples (validates BVH functionality)\nWORKDIR /app/tinybvh\nRUN g++ -std=c++20 -mavx tiny_bvh_minimal.cpp -o tiny_bvh_minimal",
  "dockerfile_build_success": true,
  "successful_candidate_index": 2,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "llm_calls_total": 5
}