[
  {
    "number": 272,
    "title": "Briefly explane dom/views.py ",
    "created_at": "2025-01-14T21:32:37Z",
    "closed_at": "2025-01-20T07:57:31Z",
    "labels": [],
    "url": "https://github.com/browser-use/browser-use/issues/272",
    "body": "Hey @GatienBoquet amazing work !!\r\n\r\nJust needed to understand the use of creating custom dom structure .. ? Is that for consistent automation ? Please share a usecase for it ..\r\na brief explanation would be highly appreciated .. \r\n",
    "comments_url": "https://api.github.com/repos/browser-use/browser-use/issues/272/comments",
    "author": "complete-dope",
    "comments": [
      {
        "user": "GatienBoquet",
        "created_at": "2025-01-15T15:14:16Z",
        "body": "Hi\r\nThe two founder are @MagMueller   / @gregpr07 kudos to them !\r\nI'll add this explantation to an article i'm writing.\r\nBut briefly, the custom DOM structure is designed to be easier for LLMs to understand.\r\n"
      },
      {
        "user": "MagMueller",
        "created_at": "2025-01-21T15:46:44Z",
        "body": "So the main purpose of the extraction is to reduce Tokens. So that we only present the LLM whats interactable.\n\nGregor did this extraction and by parsing the HTML into this dictionary, we can calculate hashes for paths and attributes to find them later again on the page, if the page is changing. "
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how the custom DOM structure improves LLM comprehension",
      "Clarification on token efficiency through content filtering",
      "Example use case demonstrating practical implementation benefits",
      "Description of element tracking mechanism for dynamic pages"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 01:56:20"
    }
  },
  {
    "number": 127,
    "title": "Grok Integration?",
    "created_at": "2024-12-26T16:20:22Z",
    "closed_at": "2024-12-26T17:23:34Z",
    "labels": [],
    "url": "https://github.com/browser-use/browser-use/issues/127",
    "body": "Has anybody tried to use this with Groq? I'm getting an `invalid_api_key` error. Please close this issue if it's something stupid I'm doing, and Groq should work fine. Here's a script for reference.\r\n\r\n```\r\nfrom langchain_groq import ChatGroq\r\n#from langchain_openai import ChatOpenAI\r\nfrom browser_use import Agent\r\nimport asyncio\r\n\r\nasync def main():\r\n    agent = Agent(\r\n        task=\"Are there cheap flights from ... to ...?\",\r\n        llm=ChatGroq(model=\"llama3-8b-8192\"),\r\n    )\r\n    result = await agent.run()\r\n    print(result)\r\n\r\nasyncio.run(main())\r\n```\r\nThanks.",
    "comments_url": "https://api.github.com/repos/browser-use/browser-use/issues/127/comments",
    "author": "NathanielComeau",
    "comments": [
      {
        "user": "sbhavani",
        "created_at": "2024-12-26T17:21:02Z",
        "body": "I just checked and it works for me. Try putting the env variable before the script when you run it (e.g. GROQ_API_KEY=XXX python test.py)\r\n\r\nAlso your issue title mentions 'Grok', check if you're referring to the model from xAI or groq.com provider"
      },
      {
        "user": "NathanielComeau",
        "created_at": "2024-12-26T17:23:34Z",
        "body": "Okay, thank you very much for checking it @sbhavani .\r\n\r\nAha! Yes, I was looking to try it out with 'Grok', so that explains why my xAI API key wasn't working.\r\n\r\nThanks very much."
      },
      {
        "user": "akc2267",
        "created_at": "2025-01-14T16:52:35Z",
        "body": "just a note, I got this (kinda) working with Groq with the following. It doesn't complete the full flow but it does open chromium:\r\n\r\n```\r\nfrom langchain_groq import ChatGroq\r\n#from langchain_openai import ChatOpenAI\r\nfrom browser_use import Agent\r\nimport asyncio\r\n\r\nasync def main():\r\n    agent = Agent(\r\n        task=\"Are there cheap flights from AUS to LAX?\",\r\n        llm=ChatGroq(model=\"llama-3.3-70b-versatile\"),\r\n    )\r\n    result = await agent.run()\r\n    print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```\r\n\r\nIn terminal, I run:\r\n`GROQ_API_KEY=api_key_here python groqtest.py`\r\n\r\nNote, don't call your python script \"groq.py\" or you'll end up in a circular dependency error\r\n\n\n---\n\nlooks like it fails because Groq models are not multi-modal"
      }
    ],
    "satisfaction_conditions": [
      "Clarification of API key configuration requirements for Groq integration",
      "Differentiation between Groq (provider) and Grok (xAI model) services",
      "Verification of model compatibility with the Agent's requirements",
      "Confirmation of proper environment setup for Groq API calls",
      "Guidance on avoiding dependency conflicts in implementation"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 01:56:27"
    }
  }
]