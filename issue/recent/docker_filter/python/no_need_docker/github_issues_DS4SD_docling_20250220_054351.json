[
  {
    "number": 950,
    "title": "Support Pillow 11.x",
    "created_at": "2025-02-12T14:07:07Z",
    "closed_at": "2025-02-13T13:19:38Z",
    "labels": [
      "enhancement"
    ],
    "url": "https://github.com/DS4SD/docling/issues/950",
    "body": "### Requested feature\nCurrently Pillow is set in pyproject.toml to `^10.x`. Some other packages I use require Pillow `>=11`. Is `^10` a hard requirement? If not, could this be loosened to `>=10,<12`?\n\nI tried setting it to this in a Github Codespace but gave up when `poetry lock` was resolving dependencies for more than 20 minutes.",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/950/comments",
    "author": "Riezebos",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2025-02-12T14:21:23Z",
        "body": "This should definitely be possible, but I think we have to apply it on multiple repos as well."
      },
      {
        "user": "PeterStaar-IBM",
        "created_at": "2025-02-13T06:50:11Z",
        "body": "completed"
      },
      {
        "user": "Riezebos",
        "created_at": "2025-02-13T07:04:26Z",
        "body": "That was fast, thank you! "
      }
    ],
    "satisfaction_conditions": [
      "Confirmation that Pillow 10.x is not a hard requirement and can be safely upgraded",
      "Avoidance of dependency resolution bottlenecks"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:08:49"
    }
  },
  {
    "number": 610,
    "title": "export_to_markdown with ImageRefMode.EMBEDDED generate error",
    "created_at": "2024-12-16T16:11:39Z",
    "closed_at": "2025-01-30T10:29:56Z",
    "labels": [
      "bug",
      "pdf"
    ],
    "url": "https://github.com/DS4SD/docling/issues/610",
    "body": "### Bug\r\nexport_to_markdown with ImageRefMode.EMBEDDED generate error.\r\n...\r\n\r\n### Steps to reproduce\r\n```\r\nconverter = DocumentConverter()\r\nresult = converter.convert(file_path)\r\nresult.document.export_to_markdown(\r\n                image_mode=ImageRefMode.EMBEDDED,\r\n            )\r\n```\r\ngenerate error: \r\n```\r\n<!-- \ud83d\uddbc\ufe0f\u274c Image not available. Please use `PdfPipelineOptions(generate\\_picture\\_images=True)` --> \r\n```\r\nWhere it's possible to add `PdfPipelineOptions` with `export_to_markdown()` ?\r\n...\r\n\r\n### Docling version\r\nDocling version: 2.12.0\r\nDocling Core version: 2.11.0\r\nDocling IBM Models version: 3.1.0\r\nDocling Parse version: 3.0.0\r\n...\r\n\r\n### Python version\r\nPython 3.12.7\r\n...\r\n\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/610/comments",
    "author": "pprados",
    "comments": [
      {
        "user": "PeterStaar-IBM",
        "created_at": "2025-01-30T08:02:04Z",
        "body": "@pprados Could you retry with a newer version of Docling, I think this might have been fixed by now. If not, please share the doc and command you ran, so we can re-produce and fix."
      },
      {
        "user": "pprados",
        "created_at": "2025-01-30T10:29:56Z",
        "body": "It's fixed."
      }
    ],
    "satisfaction_conditions": [
      "The solution must resolve the error when using ImageRefMode.EMBEDDED with export_to_markdown()",
      "The resolution must work with the user's existing DocumentConverter workflow",
      "The fix must be validated with the user's Docling version stack"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:08:58"
    }
  },
  {
    "number": 583,
    "title": "Turning off unused features (OCR, tables)",
    "created_at": "2024-12-12T21:43:08Z",
    "closed_at": "2024-12-13T07:54:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/DS4SD/docling/issues/583",
    "body": "### Question\r\nHi, I'm wondering if it's possible to disable certain parts of Docling to speed up processing.\r\n\r\nI'm processing PDFs of academic papers, and I'm not interested in any tabular data. What I would like to do is disable all OCR and all table parsing, since I'll never use these features for this particular problem.\r\n\r\nIs this possible? I can't tell from the documentation how to do it, if so.\r\n",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/583/comments",
    "author": "thatbudakguy",
    "comments": [
      {
        "user": "dolfim-ibm",
        "created_at": "2024-12-13T07:54:40Z",
        "body": "Yes, you can initializer the DocumentConverter with something like this\r\n\r\n```py\r\n    pipeline_options = PdfPipelineOptions()\r\n    pipeline_options.do_ocr = False\r\n    pipeline_options.do_table_structure = False\r\n\r\n    doc_converter = DocumentConverter(\r\n        format_options={\r\n            InputFormat.PDF: PdfFormatOption(pipeline_options=pipeline_options)\r\n        }\r\n    )\r\n```"
      },
      {
        "user": "thatbudakguy",
        "created_at": "2024-12-13T18:04:19Z",
        "body": "thank you!"
      }
    ],
    "satisfaction_conditions": [
      "Method to disable OCR functionality",
      "Method to disable table parsing functionality",
      "Configuration approach for performance optimization"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:09:08"
    }
  },
  {
    "number": 244,
    "title": "OCR Extracted Information",
    "created_at": "2024-11-05T10:36:24Z",
    "closed_at": "2024-11-18T06:32:41Z",
    "labels": [
      "question",
      "ocr"
    ],
    "url": "https://github.com/DS4SD/docling/issues/244",
    "body": "Hi, where does OCR extracted information is stored ? I cant see it in output object or is it attached with specific tags ? Thanks",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/244/comments",
    "author": "maliktalha370",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-11-06T09:16:44Z",
        "body": "@maliktalha370 Can you please elaborate on what your expectations would be? The text information we output in JSON or Markdown is both the programmatic text embedded in PDFs, and the OCR text in the places where bitmaps were found. We don't have an indication which text was recognized by OCR and which text was from programmatic PDF content. Is this what you are asking?"
      },
      {
        "user": "PeterStaar-IBM",
        "created_at": "2024-11-11T09:30:38Z",
        "body": "@maliktalha370 Could you reply to the reply of @cau-git? We are trying to understand, otherwise we need to close it."
      },
      {
        "user": "maliktalha370",
        "created_at": "2024-11-18T06:32:41Z",
        "body": "Yes @cau-git @PeterStaar-IBM This was I was trying to understand that whether we can identify in anyway which information is extracted from ocr and which one is from parser.  If there's any tag assigned for ocr extracted text, It would be really great. Overall your answer satisfies my question. Thanks !"
      }
    ],
    "satisfaction_conditions": [
      "Clear distinction between OCR-extracted text and programmatic PDF text in the output"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:09:36"
    }
  },
  {
    "number": 113,
    "title": "Missing ONNX file",
    "created_at": "2024-09-27T18:09:29Z",
    "closed_at": "2024-09-30T17:28:10Z",
    "labels": [],
    "url": "https://github.com/DS4SD/docling/issues/113",
    "body": "```\r\n# Initialize the DocumentConverter with the specified options\r\ndoc_converter = DocumentConverter(\r\n    artifacts_path=model_file_path,\r\n    pipeline_options=pipeline_options\r\n)\r\n```\r\n\r\nthat specifically throws the error\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling/document_converter.py\", line 54, in __init__\r\n    self.model_pipeline = pipeline_cls(\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling/pipeline/standard_model_pipeline.py\", line 24, in __init__\r\n    LayoutModel(\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling/models/layout_model.py\", line 46, in __init__\r\n    self.layout_predictor = LayoutPredictor(\r\n  File \"/home/user/docling/lib/python3.10/site-packages/docling_ibm_models/layoutmodel/layout_predictor.py\", line 98, in __init__\r\n    raise FileNotFoundError(\"Missing ONNX file: {}\".format(self._onnx_fn))\r\nFileNotFoundError: Missing ONNX file: /home/user/.cache/huggingface/hub/models--ds4sd--docling-models/snapshots/ae5a4eedb278abbd529aadd4a9d1091f4ea07291/model_artifacts/layout/beehive_v0.0.5/model.pt/model_artifacts/layout/beehive_v0.0.5/model.pt\r\n```",
    "comments_url": "https://api.github.com/repos/DS4SD/docling/issues/113/comments",
    "author": "thistleknot",
    "comments": [
      {
        "user": "cau-git",
        "created_at": "2024-09-30T07:34:21Z",
        "body": "@thistleknot Could you please report what is in your variable `model_file_path`? You can also remove the `artifacts_path` argument entirely and it should work."
      },
      {
        "user": "thistleknot",
        "created_at": "2024-09-30T17:28:10Z",
        "body": "I had a hard coded path to where the .pt file was (after doing a .find for it), but your suggestion worked.  I simply removed the artificats parm.  You might want to update the readme to reflect this, as you have a parm with no definition."
      },
      {
        "user": "kbruegge",
        "created_at": "2025-02-01T20:30:36Z",
        "body": "Hey @cau-git,\n\nI'm having the same issue after a fresh install and executing the example snippet from the README.\n\n```\n<full_path_here>.venv/lib/python3.12/site-packages/docling_ibm_models/layoutmodel/layout_predictor.py\", line 96, in __init__\n    raise FileNotFoundError(\"Missing ONNX file: {}\".format(self._onnx_fn))\nFileNotFoundError: Missing ONNX file: <home_dir>.cache/huggingface/hub/models--ds4sd--docling-models/snapshots/36bebf56681740529abd09f5473a93a69373fbf0/model_artifacts/layout/beehive_v0.0.5/model.pt\n```\n\nI'm on MacOS 15.2 and I'm using `uv` for managing the venv.  Any ideas? Let me know if you need more information."
      }
    ],
    "satisfaction_conditions": [
      "Ensures automatic resolution of model file paths without manual specification",
      "Provides clear documentation about parameter requirements",
      "Handles Hugging Face model cache paths correctly",
      "Works with default configuration in fresh installations"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:10:17"
    }
  }
]