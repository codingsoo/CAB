[
  {
    "number": 107,
    "title": "text encoder network details?",
    "created_at": "2024-10-16T07:16:21Z",
    "closed_at": "2024-10-17T08:56:27Z",
    "labels": [],
    "url": "https://github.com/jy0205/Pyramid-Flow/issues/107",
    "body": "I noticed that in your code, for the text encoder part, you used the clip and T5 models. Based on this, I have two questions: 1. Will the clip and T5 models update parameters during training? 2. What is the difference between these two clip models?\r\nLooking forward to your answer, thank you",
    "comments_url": "https://api.github.com/repos/jy0205/Pyramid-Flow/issues/107/comments",
    "author": "xuzukang",
    "comments": [
      {
        "user": "feifeiobama",
        "created_at": "2024-10-16T07:31:15Z",
        "body": "We followed SD3 in the text encoder design, where these models are frozen during training. The two CLIP models are used separately for the text branch of MM-DiT and AdaLN."
      },
      {
        "user": "xuzukang",
        "created_at": "2024-10-16T07:35:53Z",
        "body": "In training process, only the parameters of MM-DiT and VAE will be updated?"
      },
      {
        "user": "feifeiobama",
        "created_at": "2024-10-16T07:53:07Z",
        "body": "> In training process, only the parameters of MM-DiT and VAE will be updated?\r\n\r\nThe VAE is also frozen during training. We used pre-extracted VAE latents to train the MM-DiT."
      },
      {
        "user": "xuzukang",
        "created_at": "2024-10-16T12:07:00Z",
        "body": "> > In training process, only the parameters of MM-DiT and VAE will be updated?\r\n> \r\n> The VAE is also frozen during training. We used pre-extracted VAE latents to train the MM-DiT.\r\n>\r\n> Thank you very much for your answer, can I understand it as: The paper states that vae comes from MAGVIT, which means that vae encoder and vae decoder both come from the MAGVIT model and are not need training. only the MM-DiT needs trained?\r\n\n\n---\n\n> > > In training process, only the parameters of MM-DiT and VAE will be updated?\r\n> > \r\n> > \r\n> > The VAE is also frozen during training. We used pre-extracted VAE latents to train the MM-DiT.\r\n> > Thank you very much for your answer, can I understand it as: The paper states that vae comes from MAGVIT, which means that vae encoder and vae decoder both come from the MAGVIT model and are not need training. only the MM-DiT needs trained?\r\n\r\n>Thank you for your great work. I really want to figure out the composition of each part of pyramid-flow: I now know that CLIP_1, CLIP_2, T5, MM-DiT come from SD3, of which only MM-DiT needs to be trained in pyramid-flow, VAE-encoder comes from MAGVIT and does not need to be trained. So where does VAE-decoder come from and does it need to be trained?"
      },
      {
        "user": "feifeiobama",
        "created_at": "2024-10-16T12:31:53Z",
        "body": "The VAE encoder and decoder were trained from scratch, with some of the key design choices following MAGVIT-v2."
      },
      {
        "user": "xuzukang",
        "created_at": "2024-10-16T12:50:34Z",
        "body": ">> The VAE encoder and decoder were trained from scratch, with some of the key design choices following MAGVIT-v2.\r\n\r\n>Got it, thank you very much for your answer"
      }
    ],
    "satisfaction_conditions": [
      "Clarification of which components (CLIP, T5, VAE encoder/decoder, MM-DiT) are trainable versus frozen during training",
      "Explanation of distinct functional roles for duplicate components (e.g., two CLIP models)",
      "Differentiation between pre-trained components and those trained from scratch",
      "Clear relationship between model components and referenced papers (SD3, MAGVIT)"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:16:13"
    }
  },
  {
    "number": 50,
    "title": "What is exact optimal version of python for Pyramid?",
    "created_at": "2024-10-12T16:21:52Z",
    "closed_at": "2024-10-13T00:48:02Z",
    "labels": [],
    "url": "https://github.com/jy0205/Pyramid-Flow/issues/50",
    "body": "What is exact optimal version of python for Pyramid?",
    "comments_url": "https://api.github.com/repos/jy0205/Pyramid-Flow/issues/50/comments",
    "author": "ptits",
    "comments": [
      {
        "user": "feifeiobama",
        "created_at": "2024-10-12T23:47:33Z",
        "body": "I recommend using Python 3.8.10 as we originally did."
      },
      {
        "user": "ptits",
        "created_at": "2024-10-13T00:02:56Z",
        "body": "thanks! works fine!"
      }
    ],
    "satisfaction_conditions": [
      "A Python version officially supported by Pyramid",
      "A stable Python version with proven compatibility"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:16:20"
    }
  },
  {
    "number": 18,
    "title": "Can you fix the demo huggingface please?",
    "created_at": "2024-10-10T18:45:15Z",
    "closed_at": "2024-10-11T12:08:38Z",
    "labels": [],
    "url": "https://github.com/jy0205/Pyramid-Flow/issues/18",
    "body": "the question is solved thanks for replying! not sure how to delete the issue im sorry",
    "comments_url": "https://api.github.com/repos/jy0205/Pyramid-Flow/issues/18/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "feifeiobama",
        "created_at": "2024-10-10T19:11:17Z",
        "body": "This is due to the GPU quota limit, the demo can only generate 25 frames at a time. We have two options to play it at 1 second & 24 fps or 3 seconds & 8 fps. We could not decide which is better, both are very unfortunate compromises.\r\n\r\nWe initially chose 3 seconds & 8 fps, but now we have added an FPS control slider so you can choose for yourself.\n\n---\n\nThank you for your suggestion, we will continue to improve the model and look into these hosting platforms."
      }
    ],
    "satisfaction_conditions": [
      "Acknowledges and explains the technical limitation causing the issue",
      "Provides a user-configurable compromise for the limitation"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:16:25"
    }
  },
  {
    "number": 14,
    "title": "Setup instructions ",
    "created_at": "2024-10-10T13:18:45Z",
    "closed_at": "2024-10-10T15:57:18Z",
    "labels": [],
    "url": "https://github.com/jy0205/Pyramid-Flow/issues/14",
    "body": "I create a new conda env on a Ubuntu 24 linux \r\nconda create --name pyramid python=3.10\r\n\r\nDid a git clone of this project and then ran pip install -r requirements.txt\r\nAnd it throws errors that it can't find a compatible scipy package and tries to build one and fail. \r\n\r\nDo you have alternate setup instructions?\r\n\r\nThanks,\r\nAsh\r\n",
    "comments_url": "https://api.github.com/repos/jy0205/Pyramid-Flow/issues/14/comments",
    "author": "AshD",
    "comments": [
      {
        "user": "feifeiobama",
        "created_at": "2024-10-10T13:24:44Z",
        "body": "Thank you for your interest in our project. We are using a Python version of 3.8.10, perhaps re-running the commands with `conda create --name ENV_NAME python==3.8.10` will solve the problem."
      },
      {
        "user": "FurkanGozukara",
        "created_at": "2024-10-10T15:25:24Z",
        "body": "@feifeiobama please upgrade to python 3.10\r\n\r\npython 3.8 is history"
      },
      {
        "user": "AshD",
        "created_at": "2024-10-10T15:57:18Z",
        "body": "Thanks python 3.8.10 worked! closing..."
      }
    ],
    "satisfaction_conditions": [
      "Identifies a Python version compatible with the project's dependencies",
      "Resolves scipy dependency conflicts during installation",
      "Provides environment setup instructions that avoid build-from-source failures",
      "Works with conda environment management"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 02:16:32"
    }
  }
]