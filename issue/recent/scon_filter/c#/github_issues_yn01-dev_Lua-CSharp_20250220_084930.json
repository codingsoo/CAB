[
  {
    "number": 90,
    "title": "Error: 'LuaAsset' could not be found after installing via NuGet to Unity 6",
    "created_at": "2025-01-12T15:22:20Z",
    "closed_at": "2025-01-12T15:36:21Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/90",
    "body": "I created a new Unity 6000.0.33f1 project, installed NuGet via git URL, and installed LuaCSharp through NuGet and afterwards installed the LuaCSharp package via Package Manager from git URL.\r\n\r\nAfter that I created a simple test script in the Assets root folder:\r\n\r\n```\r\nusing UnityEngine;\r\n\r\nnamespace DefaultNamespace\r\n{\r\n\tpublic class MonoBehaviour1 : MonoBehaviour\r\n\t{\r\n\t\tpublic LuaAsset script;\r\n\t}\r\n}\r\n```\r\n\r\nThis says LuaAsset could not be found:\r\n\r\n```\r\nAssets\\MonoBehaviour1.cs(10,10): error CS0246: The type or namespace name 'LuaAsset' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nI repeated this by creating an `Editor` folder with another script thinking LuaAsset may be editor-only but this results in the same error.\u00a0\r\n\r\nThen I added Assembly Definitions, one for the runtime script and another for the editor script, referencing Lua.Unity for both and Lua.Unity.Editor for the editor assembly. But no matter what, the error sticks.\r\n\r\nAlso added a test.lua file under Assets and selected it. Inspector reads \"Test (Lua Asset)\" indicating that the Lua importer is active.\r\n\r\nI tried about everything I could think of but the LuaAsset type just isn't available.",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/90/comments",
    "author": "CodeSmile-0000011110110111",
    "comments": [
      {
        "user": "yn01-dev",
        "created_at": "2025-01-12T15:25:25Z",
        "body": "~~Do you have both the core package and the Unity extension installed?~~\r\nAnd have you simply forgotten to `using Lua.Unity`?"
      },
      {
        "user": "CodeSmile-0000011110110111",
        "created_at": "2025-01-12T15:36:11Z",
        "body": "Oh god, my (total beginner's) mistake. Yes, that's it, and it works.\r\n\r\nIn my defense, I rely on Rider to autofix such things but it didn't give me that option initally. I assume Rider was still \"scanning\" for types at that point and I didn't stop to try again a second time.\n\n---\n\nmy mistake"
      }
    ],
    "satisfaction_conditions": [
      "Identifies the required namespace for LuaAsset",
      "Addresses IDE/editor recognition of newly added packages"
    ]
  },
  {
    "number": 65,
    "title": "Number expected, got Number",
    "created_at": "2025-01-01T19:32:48Z",
    "closed_at": "2025-01-01T19:39:51Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/issues/65",
    "body": "chunk:1: bad argument #2 to 'anonymous' (Number expected, got Number)\r\nI dont understand this error\r\nIt occurs at:\r\n```csharp\r\nluaexec.Environment[\"additem\"] = new LuaFunction((context, buffer, ct) => // additem(spawnId, id, x, y, z, rx, ry, rz, rw, damaged, glue)\r\n{\r\n    string spawnid = context.GetArgument<string>(0);\r\n    int id = context.GetArgument<int>(1);\r\n    int x = context.GetArgument<int>(2);\r\n    int y = context.GetArgument<int>(3);\r\n    int z = context.GetArgument<int>(4);\r\n    int rx = context.GetArgument<int?>(5) ?? 0;\r\n    int ry = context.GetArgument<int?>(6) ?? 0;\r\n    int rz = context.GetArgument<int?>(7) ?? 0;\r\n    int rw = context.GetArgument<int?>(8) ?? 0;\r\n    bool damaged = context.GetArgument<bool?>(9) ?? false;\r\n    bool glue = context.GetArgument<bool?>(10) ?? false;\r\n    JArray itdata = (JArray)(scene[\"itemData\"] ?? new JArray());\r\n    JObject newItem = new JObject();\r\n    newItem[\"spawnId\"] = spawnid;\r\n    newItem[\"id\"] = id;\r\n    JObject newItemPos = new JObject();\r\n    newItemPos[\"x\"] = x;\r\n    newItemPos[\"y\"] = y;\r\n    newItemPos[\"z\"] = z;\r\n    JObject newItemRot = new JObject();\r\n    newItemRot[\"x\"] = rx;\r\n    newItemRot[\"y\"] = ry;\r\n    newItemRot[\"z\"] = rz;\r\n    newItemRot[\"w\"] = rw;\r\n    JObject newItemData = new JObject();\r\n    newItemData[\"damaged\"] = damaged;\r\n    newItemData[\"glue\"] = glue;\r\n    newItem[\"pos\"] = newItemPos;\r\n    newItem[\"rot\"] = newItemRot;\r\n    newItem[\"data\"] = newItemData;\r\n    itdata.Add(newItem);\r\n    scene[\"itemData\"] = itdata;\r\n    return new ValueTask<int>(0);\r\n});\r\n```",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/65/comments",
    "author": "ImNotDario",
    "comments": [
      {
        "user": "ImNotDario",
        "created_at": "2025-01-01T19:40:16Z",
        "body": "I re-read the docs, it says to use double now it works. Would be useful if you added int\r\n"
      },
      {
        "user": "yn01-dev",
        "created_at": "2025-01-01T23:34:09Z",
        "body": "This was fixed in #62."
      }
    ],
    "satisfaction_conditions": [
      "Clarification of numeric type handling in Lua-C# interop",
      "Documentation of supported argument types",
      "Resolution of ambiguous type conversion errors",
      "Framework-level type handling explanation"
    ]
  },
  {
    "number": 46,
    "title": "Optimize: VM implementation \"switch case\" to \"delegate array\"",
    "created_at": "2024-10-19T06:27:48Z",
    "closed_at": "2024-11-14T08:32:46Z",
    "labels": [],
    "url": "https://github.com/yn01-dev/Lua-CSharp/pull/46",
    "body": "This PR is a large optimization.\r\nNBodyBenchmark \r\n.NET8  12ms -> 6.2ms\r\nIL2CPP 81ms ->15ms\r\n\r\n",
    "comments_url": "https://api.github.com/repos/yn01-dev/Lua-CSharp/issues/46/comments",
    "author": "Akeit0",
    "comments": [
      {
        "user": "Akeit0",
        "created_at": "2024-10-22T13:59:59Z",
        "body": "All changes are internal, so I think nothing is broken.\n\n---\n\nI think I've finished revising them according to your comment."
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-10-25T00:35:19Z",
        "body": "I haven't looked into the implementation of LuaVirtualMachine in detail yet, so I'll merge it in as soon as I've checked it.\n\n---\n\nI have checked the VM implementation. It looks very good. The only thing that bothers me is that SetOperations is separated into a separate Operators class. Is there a reason for this?\r\n\r\nAlso, I would also be grateful if you could let me know if you have any references for this optimization.\n\n---\n\nThere is a conflict due to the merge of #47, could I resolve this on my end?"
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-04T02:08:44Z",
        "body": "Of course!\n\n---\n\n> I have checked the VM implementation. It looks very good. The only thing that bothers me is that SetOperations is separated into a separate Operators class. Is there a reason for this?\r\n> \r\n> Also, I would also be grateful if you could let me know if you have any references for this optimization.\r\n\r\nConsidering that LuaVirtualMachine is a static class, and that using lambda expressions reduces readability and the visibility of exceptions, I use nested class.\n\n---\n\n> Also, I would also be grateful if you could let me know if you have any references for this optimization.\r\n\r\nNo references available. I looked at the generated code and found that it was less efficient, so I adjusted it to generate the optimal code"
      },
      {
        "user": "yn01-dev",
        "created_at": "2024-11-05T02:49:05Z",
        "body": "I've resolved the conflicts and formatted the code.\r\n\r\nIf possible, could you please add comments to each step of the code? This will help me and other contributors understand the code properly."
      },
      {
        "user": "Akeit0",
        "created_at": "2024-11-05T09:35:20Z",
        "body": "@AnnulusGames \r\nOK! Shall I leave the original async code in the comments?\n\n---\n\nAre these comments sufficient?"
      }
    ],
    "satisfaction_conditions": [
      "Clear justification for structural code organization decisions",
      "Evidence of optimization effectiveness analysis",
      "Maintainable code documentation",
      "Conflict-free integration with existing codebase",
      "Preservation of core functionality"
    ]
  }
]