[
  {
    "number": 22,
    "title": "Support for lib / fun / c struct / global vars / type",
    "created_at": "2024-12-10T06:28:25Z",
    "closed_at": "2024-12-12T14:38:03Z",
    "labels": [],
    "url": "https://github.com/crystal-lang-tools/tree-sitter-crystal/pull/22",
    "body": "Closes #18\r\n\r\nStill some edge cases and may not have done everything the best way, feedback welcome.\r\n\r\nWith this, we're at ~60% stdlib coverage.",
    "comments_url": "https://api.github.com/repos/crystal-lang-tools/tree-sitter-crystal/issues/22/comments",
    "author": "nobodywasishere",
    "comments": [
      {
        "user": "keidax",
        "created_at": "2024-12-10T17:28:01Z",
        "body": "By getting rid of the changes in `conflicts`, I got this  conflict:\r\n\r\n```\r\nUnresolved conflict for symbol sequence:\r\n\r\n  'fun'  identifier  '('  identifier  \u2022  ')'  \u2026\r\n\r\nPossible interpretations:\r\n\r\n  1:  'fun'  identifier  '('  (_expression  identifier)  \u2022  ')'  \u2026\r\n  2:  'fun'  identifier  '('  (fun_param  identifier)  \u2022  ')'  \u2026\r\n\r\nPossible resolutions:\r\n\r\n  1:  Specify a higher precedence in `_expression` than in the other rules.\r\n  2:  Specify a higher precedence in `fun_param` than in the other rules.\r\n  3:  Add a conflict for these rules: `_expression`, `fun_param`\r\n```\r\n\r\nThis is confusing at first. Tree-sitter is supposed to only allow tokens in valid locations, so why would `$._expression` be valid in the parameter list?\r\n\r\nAfter considering `$.top_level_fun_def` I realized what's happening: if the `fun` definition doesn't have any params, then the body could start immediately. In that case, `( _expression )` could be legitimately parsed as a parenthesized statement.\r\n\r\nThese are both valid syntax (and we'll want test cases to distinguish them):\r\n``` crystal\r\n# equivalent to a_little_fun()\r\nfun a_little_fun;\r\n(a : Int32)\r\nend\r\n\r\n# equivalent to more_fun(a : Int32)\r\nfun more_fun\r\n(a : Int32)\r\nend\r\n```\r\n\r\nNote that this is the opposite of how `def`s are parsed:\r\n\r\n``` crystal\r\n# equivalent to a_def()\r\ndef a_def\r\n(a : Int32)\r\nend\r\n```\r\n\r\nI think this should be sufficient to resolve the conflict:\r\n\r\n----------------------------------------\r\n\r\n``` javascript\r\n    top_level_fun_def: $ => {\r\n      const params = seq(\r\n        '(', field('params', $.fun_param_list), ')',\r\n      )\r\n      const real_name = seq('=',\r\n        field('real_name', choice($.identifier, $.constant, $.string)),\r\n      )\r\n      const return_type = field('type', seq(/[ \\t]:\\s/, $._bare_type))\r\n\r\n      return seq(\r\n        prec.right(seq(\r\n          'fun',\r\n          field('name', $.identifier),\r\n          optional(real_name),\r\n          optional(params),\r\n          optional(return_type),\r\n        )),\r\n        field('body', optional($._statements)),\r\n        'end',\r\n      )\r\n    },\r\n\r\n    // [...]\r\n\r\n    fun_param: $ => {\r\n      const type = field('type', seq(/[ \\t]:\\s/, $._bare_type))\r\n\r\n      return seq(\r\n        choice($.identifier, $.constant),\r\n        type,\r\n      )\r\n    },\r\n```\r\n\r\nThe two key changes are making the type mandatory on `fun_param`, and using `prec.right`.\r\n\r\nMaking the type mandatory means that `fun foo ( a )` isn't ambiguous any more -- `a` can't be a parameter because it doesn't have a type attached.\r\n\r\n`prec.right` ensures that `fun identifier (<possible param list>)` is always parsed as a param list and not a parenthesized statement.\r\n\r\n(I also noticed that extracting the top-level fun signature to its own rule helps, but I can't really explain why. This is where my understanding of LR parsers gets shaky.)\r\n\r\nThis still doesn't perfectly match what the Crystal parser is doing. For example, with the above change, tree-sitter parses this fine:\r\n``` crystal\r\nfun foo\r\n(a)\r\nend\r\n\r\n# (top_level_fun_def\r\n#   name: (identifier)\r\n#   body: (identifier))\r\n```\r\nBut Crystal doesn't accept it:\r\n```\r\nIn scratch.cr:27:3\r\n\r\n 27 | (a)\r\n        ^\r\nError: expecting token ':', not ')'\r\n```\r\n\r\nFor now, I would say that being more lenient is good. But it's worth exploring some more edge cases around how `fun` gets parsed.\r\n"
      },
      {
        "user": "nobodywasishere",
        "created_at": "2024-12-10T21:29:48Z",
        "body": "Thank you for this write-up and the fix for the issue! I really appreciate it. If we write up a blog post about the tree sitter parser when it's more done, I think it'd be cool for that to be a part of it as a deeper dive into the edge cases of Crystal syntax."
      }
    ],
    "satisfaction_conditions": [
      "Resolves parser conflicts between function parameter lists and parenthesized statements",
      "Handles edge cases where type annotations are mandatory vs optional in different contexts",
      "Maintains compatibility with Crystal's unique 'fun' definition parsing behavior",
      "Provides clear precedence rules for parser ambiguity resolution",
      "Documents edge cases for future reference and education"
    ]
  }
]