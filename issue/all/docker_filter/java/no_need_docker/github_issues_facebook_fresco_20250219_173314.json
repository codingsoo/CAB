[
  {
    "number": 1703,
    "title": "Loading the GIF causes the project to crash",
    "created_at": "2017-03-17T11:30:05Z",
    "closed_at": "2017-03-18T14:10:50Z",
    "labels": [
      "duplicate",
      "build",
      "question"
    ],
    "url": "https://github.com/facebook/fresco/issues/1703",
    "body": "\r\n\r\n```java\r\n//my code\r\n\r\n Uri uri = Uri.parse(address);\r\n        DraweeController draweeController =\r\n                Fresco.newDraweeControllerBuilder()\r\n                        .setUri(uri)\r\n                        .setAutoPlayAnimations(true) \r\n                        .build();\r\n        nivShowImg.setController(draweeController);\r\n```\r\n\r\n```java\r\n//my version\r\ncompile 'com.facebook.fresco:fresco:1.1.0'\r\ncompile 'com.facebook.fresco:animated-gif:1.1.0'\r\n```\r\n\r\n```java\r\n//my error\r\n java.lang.NoSuchFieldError: com.facebook.imagepipeline.common.ImageDecodeOptions.forceOldAnimationCode\r\n                                                               at com.facebook.imagepipeline.animated.factory.AnimatedImageFactoryImpl.decodeGif(AnimatedImageFactoryImpl.java:84)\r\n                                                               at com.facebook.imagepipeline.decoder.DefaultImageDecoder.decodeGif(DefaultImageDecoder.java:142)\r\n                                                               at com.facebook.imagepipeline.decoder.DefaultImageDecoder$1.decode(DefaultImageDecoder.java:65)\r\n                                                               at com.facebook.imagepipeline.decoder.DefaultImageDecoder.decode(DefaultImageDecoder.java:123)\r\n                                                               at com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder.doDecode(DecodeProducer.java:239)\r\n                                                               at com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder.access$200(DecodeProducer.java:111)\r\n                                                               at com.facebook.imagepipeline.producers.DecodeProducer$ProgressiveDecoder$1.run(DecodeProducer.java:144)\r\n                                                               at com.facebook.imagepipeline.producers.JobScheduler.doJob(JobScheduler.java:207)\r\n                                                               at com.facebook.imagepipeline.producers.JobScheduler.access$000(JobScheduler.java:27)\r\n                                                               at com.facebook.imagepipeline.producers.JobScheduler$1.run(JobScheduler.java:78)\r\n                                                               at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\r\n                                                               at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\r\n                                                               at com.facebook.imagepipeline.core.PriorityThreadFactory$1.run(PriorityThreadFactory.java:43)\r\n                                                               at java.lang.Thread.run(Thread.java:841)\r\n\r\n```\r\n#question\r\nWhat is the solution to this problem, or what is the cause of the problem",
    "comments_url": "https://api.github.com/repos/facebook/fresco/issues/1703/comments",
    "author": "bxhuhu",
    "comments": [
      {
        "user": "oprisnik",
        "created_at": "2017-03-18T14:10:50Z",
        "body": "I guess some of your Gradle dependencies got mixed up. We removed `forceOldAnimationCode`. Try and clean/rebuild your project\n\n---\n\nSee also #1660"
      },
      {
        "user": "bxhuhu",
        "created_at": "2017-03-23T14:57:40Z",
        "body": "Thanks @oprisnik  "
      }
    ],
    "satisfaction_conditions": [
      "Identifies version incompatibility between Fresco core library and animated-gif module",
      "Provides guidance on aligning dependency versions to maintain API compatibility",
      "Addresses dependency synchronization without relying on deprecated features"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:58:13"
    }
  },
  {
    "number": 1645,
    "title": "When trying to fetchImageFromBitmapCache() for GIF image, imageReference is always null",
    "created_at": "2017-01-30T09:49:57Z",
    "closed_at": "2017-01-30T16:38:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/facebook/fresco/issues/1645",
    "body": "I want to allow users to save GIF images in our app. I am trying to get GIF image from Fresco cache via `fetchImageFromBitmapCache()` but it always returns NULL for GIF images.\r\nFor JPG and PNG images there is no problem.",
    "comments_url": "https://api.github.com/repos/facebook/fresco/issues/1645/comments",
    "author": "rafaelekol",
    "comments": [
      {
        "user": "oprisnik",
        "created_at": "2017-01-30T11:19:01Z",
        "body": "Did you add `compile 'com.facebook.fresco:animated-gif:1.0.1'` to your `build.gradle`?"
      },
      {
        "user": "rafaelekol",
        "created_at": "2017-01-30T11:28:44Z",
        "body": "Yes I have that line.\r\n```\r\ncompile ('com.facebook.fresco:animated-gif:1.0.1') {\r\n        exclude module: 'bolts-android'\r\n    }\r\n```"
      },
      {
        "user": "oprisnik",
        "created_at": "2017-01-30T16:38:35Z",
        "body": "I guess you have to use `fetchDecodedImage` instead since animated images are handled a bit differently than normal static bitmaps (not in the same bitmap cache currently).\r\n\r\nHowever, if you want to allow people to save images, you should get the encoded image instead of the decoded image, i.e. `fetchEncodedImage`."
      },
      {
        "user": "rafaelekol",
        "created_at": "2017-01-31T05:24:12Z",
        "body": "Thanks, it worked. I managed to save files with this code:\r\n\r\n```\r\nDataSource<CloseableReference<PooledByteBuffer>>\r\n                dataSource = Fresco.getImagePipeline().fetchEncodedImage(ImageRequest.fromUri(imageUrl), App.getContext());\r\n\r\n        DataSubscriber<CloseableReference<PooledByteBuffer>> dataSubscriber =\r\n                new BaseDataSubscriber<CloseableReference<PooledByteBuffer>>() {\r\n                    @Override\r\n                    protected void onNewResultImpl(\r\n                            DataSource<CloseableReference<PooledByteBuffer>> dataSource) {\r\n                        if (!dataSource.isFinished()) {\r\n                            return;\r\n                        }\r\n                        CloseableReference<PooledByteBuffer> ref = dataSource.getResult();\r\n                        if (ref != null) {\r\n                            try {\r\n                                PooledByteBuffer pooledByteBuffer = ref.get();\r\n                                PooledByteBufferInputStream sourceIs = new PooledByteBufferInputStream(pooledByteBuffer);\r\n                                BufferedInputStream bis = new BufferedInputStream(sourceIs);\r\n                                String newFilePath = getAppFolderPath() + UUID.randomUUID().toString().toLowerCase() + \"_\" + URLUtil.guessFileName(imageUrl, null, null);\r\n                                File targetFile = new File(newFilePath);\r\n                                createDirectories(targetFile.getPath());\r\n                                try {\r\n                                    BufferedOutputStream fout = new BufferedOutputStream(new FileOutputStream(newFilePath));\r\n                                    int i;\r\n                                    do {\r\n                                        i = bis.read();\r\n                                        if (i != -1)\r\n                                            fout.write(i);\r\n                                    } while (i != -1);\r\n                                    bis.close();\r\n                                    fout.close();\r\n                                    registerMediaInDeviceGallery(new File(newFilePath));\r\n                                    showMessage(R.string.saved_to_gallery);\r\n                                } catch (IOException e) {\r\n                                    targetFile.delete();\r\n                                    e.printStackTrace();\r\n                                    showMessage(R.string.failed_to_save_to_gallery);\r\n                                }\r\n\r\n                            } finally {\r\n                                CloseableReference.closeSafely(ref);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    protected void onFailureImpl(DataSource<CloseableReference<PooledByteBuffer>> dataSource) {\r\n                        Throwable t = dataSource.getFailureCause();\r\n                        Log.e(TAG, \"onFailureImpl: \", t);\r\n                        showMessage(R.string.failed_to_save_to_gallery);\r\n                    }\r\n                };\r\n\r\n        dataSource.subscribe(dataSubscriber, Runnable::run);\r\n```"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why Fresco's bitmap cache doesn't work for GIF images",
      "Identification of the correct Fresco API method for retrieving encoded image data",
      "Differentiation between bitmap cache and encoded image handling in Fresco",
      "Support for saving original encoded image bytes rather than decoded frames"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:58:23"
    }
  }
]