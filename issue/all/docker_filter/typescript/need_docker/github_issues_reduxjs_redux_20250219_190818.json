[
  {
    "number": 621,
    "title": "Problem with componentWillMount on connected component",
    "created_at": "2015-08-25T13:21:41Z",
    "closed_at": "2015-08-25T13:32:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/reduxjs/redux/issues/621",
    "body": "I have a problem with server rendering when use `componentWillMount` method for request data. Some of my requests are pre-fetched on server-side and some of them not.\nExample:\n\n``` javascript\n// HomePage container\nclass HomePage extends Component {\n  static willRender = store => {\n    // I don't want fetch anything - let's client do this job\n  }\n\n  componentWillMount() {\n    this.props.fetchSongs();\n    this.props.fetchAlbums();\n    this.props.fetchBands();\n  }\n\n  ...\n}\n\nexport default connect(select, mapDispatchToProps)(HomePage);\n```\n\nWhen server render markup client can not use it, I see this error in console:\n\n```\nWarning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) eoa8oo3k.1.$/\"><div class=\"loader-block\"\n (server) eoa8oo3k.1.$/\"><div data-reactid=\".meeoa\n```\n\nAs I understand it's because this method invoked on the client side before rendering and on server side \"after\".\n",
    "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/621/comments",
    "author": "tadjik1",
    "comments": [
      {
        "user": "gaearon",
        "created_at": "2015-08-25T13:32:50Z",
        "body": "This is just how React works, isn't it? Either you generate identical markup, and then client is able to reuse it, or you generate a different markup, and client cannot reuse it.\n\nIn your example the server renders the data, but the client renders `<div class=\"loader-block\"` first. Unfortunately I can't help you further because I don't understand the problem from the issue description.\n\n\n---\n\nIf you want to only fetch something on the client, put it into `componentDidMount` which executes only on the client:\n\n``` js\n  componentDidMount() {\n    this.props.fetchSongs();\n    this.props.fetchAlbums();\n    this.props.fetchBands();\n  }\n```\n"
      },
      {
        "user": "tadjik1",
        "created_at": "2015-08-25T13:34:27Z",
        "body": "yes, I want to make some requests only on client side. thanks for description\n"
      }
    ],
    "satisfaction_conditions": [
      "Ensure client-side-only data fetching for specific requests",
      "Maintain server/client markup consistency for hydration",
      "Provide clear differentiation between server-side and client-side data fetching logic"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:51:47"
    }
  },
  {
    "number": 1687,
    "title": "Replace es3ify with Babel ES3 transforms",
    "created_at": "2016-05-01T22:59:50Z",
    "closed_at": "2016-05-02T14:30:31Z",
    "labels": [
      "help wanted",
      "infrastructure"
    ],
    "url": "https://github.com/reduxjs/redux/issues/1687",
    "body": "The only reason it was added is because Babel ES3 transforms were broken.\nThey have since been fixed.\n\nNow that es3ify itself is broken (see Travis), I\u2019d appreciate somebody just putting those plugins in and removing es3ify from our build process.\n",
    "comments_url": "https://api.github.com/repos/reduxjs/redux/issues/1687/comments",
    "author": "gaearon",
    "comments": [
      {
        "user": "chentsulin",
        "created_at": "2016-05-02T12:48:37Z",
        "body": "Submitted a PR at #1688 \n"
      },
      {
        "user": "gaearon",
        "created_at": "2016-05-02T14:30:32Z",
        "body": "Thank you!\n"
      }
    ],
    "satisfaction_conditions": [
      "Removes es3ify from the build process",
      "Implements Babel ES3 transform plugins as replacement",
      "Maintains functional build process"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:52:26"
    }
  }
]