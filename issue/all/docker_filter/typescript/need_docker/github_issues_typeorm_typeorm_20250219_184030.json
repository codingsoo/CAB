[
  {
    "number": 4718,
    "title": "TypeORM tries to drop views that are needed by the pg_stat_statements extension",
    "created_at": "2019-09-10T08:49:04Z",
    "closed_at": "2020-10-04T02:50:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/4718",
    "body": "**Issue type:**\r\n\r\n[x] question\r\n[ ] bug report\r\n[ ] feature request\r\n[ ] documentation issue\r\n\r\n**Database system/driver:**\r\n\r\n[ ] `cordova`\r\n[ ] `mongodb`\r\n[ ] `mssql`\r\n[ ] `mysql` / `mariadb`\r\n[ ] `oracle`\r\n[x] `postgres`\r\n[ ] `cockroachdb`\r\n[ ] `sqlite`\r\n[ ] `sqljs`\r\n[ ] `react-native`\r\n[ ] `expo`\r\n\r\n**TypeORM version:**\r\n\r\n[x] `latest`\r\n[ ] `@next`\r\n[ ] `0.x.x` (or put your version here)\r\n\r\n**Steps to reproduce or a small repository showing the problem:**\r\n\r\n1. Enable extension pg_stat_statments\r\n2. Start your application with the synchronize option set to true\r\n\r\nThe error that is caused:\r\n\r\n`QueryFailedError: cannot drop view pg_stat_statements because extension pg_stat_statements requires it`\r\n\r\nWhy is TypeORM trying to drop a view that is needed by the extension? Is TypeORM not compatible with pg_stat_statements?\r\n\r\n<!--\r\n    To answer those questions you need to put \"x\" inside the square brackets, for example:\r\n    [x] `mysql`\r\n    [ ] `postgres`\r\n\r\n    Also, please format your code properly (by taking code blocks into ```ts .... ```)\r\n!>\r\n",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/4718/comments",
    "author": "lucaslenz",
    "comments": [
      {
        "user": "Kononnable",
        "created_at": "2019-10-16T08:32:03Z",
        "body": "I don't know this extension, but it looks like it creates it's own tables/views in your schema. Typeorm while synchronizing deletes every database object which isn't described using typeorm decorators(or entity schemas). It can't distinguish if such object is no longer necessary or is it something completely not related to your app code.\r\n\r\nIf you want to use typeorm with tables/views not related to your app code you probably need to make dummy view/table in typeorm and disable synchronization for it - just empty class decorated with Column/ViewEntity with `synchronize:false` and proper name."
      },
      {
        "user": "lucaslenz",
        "created_at": "2019-10-28T12:50:33Z",
        "body": "Thanks for your advice.\r\nI solved the problem by only using Migrations instead of the synchronization feature as you suggested.\r\n\r\nCan be closed."
      },
      {
        "user": "zveljkovic",
        "created_at": "2022-02-25T15:33:15Z",
        "body": "I would like this to be reopened as we have a need to reset the database and would like to use `schema:drop` but it fails with\r\n\r\n`\r\nquery: 'DROP VIEW IF EXISTS \"public\".\"pg_stat_statements\" CASCADE;',\r\n  parameters: undefined,\r\n  driverError: error: must be owner of view pg_stat_statements\r\n`\r\n\r\nIt would be nice to exclude some views/tables from dropping by config."
      },
      {
        "user": "Ginden",
        "created_at": "2022-02-25T16:26:18Z",
        "body": "@zveljkovic You can describe these views and mark them with `synchronize: false`."
      }
    ],
    "satisfaction_conditions": [
      "Mechanism to prevent TypeORM from dropping views/tables required by PostgreSQL extensions",
      "Clear compatibility strategy between TypeORM and external database objects",
      "Configuration option to exclude specific database objects from schema synchronization/drops",
      "Documentation of best practices for working with non-TypeORM-managed database objects"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:39:10"
    }
  },
  {
    "number": 3281,
    "title": "Relation entity does not load on findOne",
    "created_at": "2018-12-18T22:06:16Z",
    "closed_at": "2018-12-19T06:41:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/3281",
    "body": "**Issue type:**\r\n[X] bug report\r\n\r\n**Database system/driver:**\r\n[X] `mysql` / `mariadb`\r\n\r\n**TypeORM version:**\r\n[X] `@next`\r\n\r\nOn 2.9.0, with findOne repository method, we can load association with FindOptions **relations**  \r\nSo that code line will return Entity and its association\r\n`await connection.getRepository(Entity).findOne({id: 12}, {relations: ['association']});`\r\n\r\nThe same call **does not work** on on @next branch 3.0.0-alpha22\r\nIt return the entity WITHOUT the association. The only way it works is to give as it first parameter directly the id number. So we can't use query :(\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/3281/comments",
    "author": "mohamed-badaoui",
    "comments": [
      {
        "user": "pleerock",
        "created_at": "2018-12-19T06:28:20Z",
        "body": "Why you don't use `await connection.getRepository(Entity).findOne({ where: {id: 12}, relations: ['association']});`\n\n---\n\nI don't remember motivation of this change, but probably it was made to prevent a confusion since second argument also can have its own `where` argument."
      },
      {
        "user": "mohamed-badaoui",
        "created_at": "2018-12-19T06:41:01Z",
        "body": "All right, thanks @pleerock.\r\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of correct parameter structure for findOne in TypeORM 3.0.0-alpha22",
      "Demonstration of relation loading with query conditions",
      "Compatibility with TypeORM 3.0.0-alpha22",
      "Clarification of API changes between versions 2.9.0 and 3.0.0"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:41:35"
    }
  },
  {
    "number": 2924,
    "title": "BeforeInsert Issue",
    "created_at": "2018-10-12T23:56:44Z",
    "closed_at": "2018-10-24T20:17:28Z",
    "labels": [
      "question",
      "comp: subscribers and listeners"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/2924",
    "body": "**Issue type:**\r\n\r\n[ ] question\r\n[x ] bug report\r\n[ ] feature request\r\n[ ] documentation issue\r\n\r\n**Database system/driver:**\r\n\r\n[ ] `cordova`\r\n[ ] `mongodb`\r\n[ ] `mssql`\r\n[x ] `mysql` / `mariadb`\r\n[ ] `oracle`\r\n[x ] `postgres`\r\n[ ] `sqlite`\r\n[ ] `sqljs`\r\n[ ] `react-native`\r\n[ ] `expo`\r\n\r\n**TypeORM version:**\r\n\r\n[x ] `latest`\r\n[ ] `@next`\r\n[ ] `0.x.x` (or put your version here)\r\n\r\n**Steps to reproduce or a small repository showing the problem:**\r\n\r\nPlacing @BeforeInsert() and @AfterInsert do not work\r\n\r\n```\r\n@AfterInsert()\r\n  modifyText() {\r\n    console.log(\"Something is being inserted\");\r\n  }\r\n```\r\n\r\n```\r\n@BeforeInsert()\r\n  modifyText() {\r\n    this.text = `${this.text} was modified before insert`;\r\n  }\r\n```\r\n\r\n```\r\n@BeforeInsert()\r\nhashpassword(){\r\n   this.password = ........\r\n}\r\n```\r\n\r\nI've seen this in other issues and they were closed but the issue was never actually resolved.",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/2924/comments",
    "author": "JamesCoonce",
    "comments": [
      {
        "user": "billyjov",
        "created_at": "2018-10-14T20:18:34Z",
        "body": "@JamesCoonce  `@BeforeInsert` work for me using version `0.2.7`. You have to be extra careful when working with asynchronous processes e.g your last use case for hashing a password.\r\n\r\nIt should work with the folowing syntax: \r\n\r\n```\r\n@BeforeInsert\r\nasync hashpassword() {\r\n    this.password = await your-hash-process;\r\n}\r\n```"
      },
      {
        "user": "rustamwin",
        "created_at": "2018-10-15T10:25:47Z",
        "body": "try it in subscribers"
      },
      {
        "user": "JamesCoonce",
        "created_at": "2018-10-16T13:50:22Z",
        "body": "I'm also using 0.2.7. Here is a basic example. This doesn't even work. It does no modify.\r\n```\r\nimport { Entity, Column, PrimaryGeneratedColumn, BeforeInsert} from 'typeorm';\r\n\r\n@Entity()\r\nexport class Todo {\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({ length: 500 })\r\n  text: string;\r\n\r\n  @Column()\r\n  complete: boolean;\r\n\r\n  @BeforeInsert()\r\n  modifyText() {\r\n    this.text = `${this.text} was modified before insert`;\r\n  }\r\n}\r\n```\r\n\r\nInside of my todoService I have this\r\n\r\n```\r\npublic async create(todo: CreateTodosDTO): Promise<Todo> {\r\n        return await this.todoRepository.save(todo);\r\n    }\r\n```"
      },
      {
        "user": "feather-jmalone",
        "created_at": "2018-10-16T14:23:33Z",
        "body": "what does the value of `todo` look like? is it an object that has the properties of `Todo` (e.g. `{id: 1, text: 'text', complete: true}`, or is it an actual instance (e.g. `const todo = new Todo()`)?"
      },
      {
        "user": "JamesCoonce",
        "created_at": "2018-10-16T14:31:23Z",
        "body": "When I send the post request it's \r\n\r\n```\r\n{\r\n  \"text\": \"Today is Monday\",\r\n  \"complete\": false\r\n}\r\n```\r\n\r\nWhat I get back is \r\n\r\n```\r\n{\r\n\t\"text\": \"Today is Monday\",\r\n\t\"complete\": false,\r\n\t\"id\": 5\r\n}\r\n```\r\n\r\nI check the database and it's the same. It's not being modified before insert."
      },
      {
        "user": "feather-jmalone",
        "created_at": "2018-10-16T14:44:06Z",
        "body": "i could be wrong about this, but my understanding is that because `BeforeInsert` is an instance-level method, you need an actual instance of `Todo` in order for it to be invoked (you can't reference `this.password` if there's no `this`). The object you're passing in the request is just an object that happens to have the same properties as `Todo`. "
      },
      {
        "user": "JamesCoonce",
        "created_at": "2018-10-16T15:53:42Z",
        "body": "That works. I need to create an actual instance first."
      },
      {
        "user": "gintsgints",
        "created_at": "2018-10-21T09:33:42Z",
        "body": "@JamesCoonce consider closing issue then."
      },
      {
        "user": "pilattebe",
        "created_at": "2019-06-19T18:24:37Z",
        "body": "I know why this works that way but it shouldn\u2019t IMO. "
      },
      {
        "user": "vinimdocarmo",
        "created_at": "2019-08-14T15:15:22Z",
        "body": "> That works. I need to create an actual instance first.\r\n\r\nHow can one call a validation method using repository.save passing just a plain object instead of an entity instance?"
      },
      {
        "user": "liqwid",
        "created_at": "2019-10-11T00:39:29Z",
        "body": "> > That works. I need to create an actual instance first.\r\n> \r\n> How can one call a validation method using repository.save passing just a plain object instead of an entity instance?\r\n\r\n`Entity.prototype[methodName].apply(object, args)`\r\ngiven entity often is a DTO, that's useful IMO\r\n\r\nof course this brings the problem that any other instance methods would be unavailable in the call\r\n\r\nanother obvious solution is to instantiate.\r\n\r\nAnyway it should be explicitly mentioned in docs that instantiation is _required_ to use hooks"
      },
      {
        "user": "niyodusengaclement",
        "created_at": "2021-03-12T08:11:10Z",
        "body": "You can use the create method to create an instance`const data = repository.create(yourDto)` and then save returned data `repository.save(data)`\r\n\r\nThis will solve the issue"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why BeforeInsert/AfterInsert hooks don't trigger when saving plain objects",
      "Clarification on the difference between entity instances vs plain objects in TypeORM hooks",
      "Documentation of instance requirement for entity hooks to trigger during save operations",
      "Guidance on proper entity instantiation before saving to trigger lifecycle hooks"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:41:53"
    }
  },
  {
    "number": 1608,
    "title": "Create from nested object with lazy relation",
    "created_at": "2018-02-19T04:30:29Z",
    "closed_at": "2018-02-19T08:59:03Z",
    "labels": [
      "question",
      "comp: lazy loading"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/1608",
    "body": "**Issue type:**\r\n\r\n[] question\r\n[ ] bug report\r\n[x] feature request\r\n[ ] documentation issue\r\n\r\n**Database system/driver:**\r\n\r\n[ ] `cordova`\r\n[ ] `mongodb`\r\n[ ] `mssql`\r\n[ ] `mysql` / `mariadb`\r\n[ ] `oracle`\r\n[x] `postgres`\r\n[ ] `sqlite`\r\n[ ] `sqljs`\r\n[ ] `websql`\r\n\r\n**TypeORM version:**\r\n\r\n[x] `latest`\r\n[ ] `@next`\r\n[ ] `0.x.x` (or put your version here)\r\n\r\n**Steps to reproduce or a small repository showing the problem:**\r\n\r\nGiven\r\n```ts\r\nimport { BaseEntity, ManyToOne, OneToMany } from 'typeorm'\r\n\r\nclass Author extends BaseEntity {\r\n  @Column()\r\n  name: string\r\n\r\n  @OneToMany(() => Post)\r\n  posts: Promise<Post[]>\r\n}\r\n\r\nclass Post extends BaseEntity {\r\n  @ManyToOne(() => Author, 'posts', { cascadeInsert: true })\r\n  author: Promise<Author>\r\n}\r\n\r\nawait Post.create({author: Promise.resolve({name: 'author1'})}).save\r\n```\r\n\r\nGot\r\n```\r\nSTART TRANSACTION\r\nexecuting query:  INSERT INTO \"author\" DEFAULT VALUES  RETURNING \"id\"\r\nquery failed:  INSERT INTO \"author\" DEFAULT VALUES  RETURNING \"id\"\r\nerror:  { error: null value in column \"name\" violates not-null constraint\r\n...\r\n```\r\n\r\nBut eager relation works:  `Post.create({author: {name: 'author1'}})`\r\n\r\n",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/1608/comments",
    "author": "gutenye",
    "comments": [
      {
        "user": "pleerock",
        "created_at": "2018-02-19T07:05:11Z",
        "body": "You need to use following syntax:\r\n\r\n```ts\r\nawait Post.create({author: PromiseUtils.create({name: 'author1'})}).save\r\n```\r\n\r\nLazy relations aren't what people usually need to use. Just be aware."
      },
      {
        "user": "gutenye",
        "created_at": "2018-02-21T10:44:14Z",
        "body": "@pleerock\r\n It works, thanks.\r\n\r\nI use `typeorm` with `GraphQL`. If I understand it right, Lazy relations are the only way to use inside `GraphQL` resolvers. \r\n\r\nBut lazy relations are more complex than eager relations in many cases, is there a way to use eager relations with `GraphQL`?"
      },
      {
        "user": "pleerock",
        "created_at": "2018-02-21T11:26:10Z",
        "body": "I don't use lazy relations with graphql. Instead I created abstraction and use `connection.relationIdLoader` (can be found in latest `@next`) to find related entities for relation resolvers. I'll publish a framework with concrete implementation in the near future."
      }
    ],
    "satisfaction_conditions": [
      "Support for creating nested entities with lazy-loaded relations without violating database constraints",
      "Clear guidance on handling GraphQL resolver integration with TypeORM relations",
      "Abstraction for relation handling that avoids manual promise management",
      "Maintain data integrity during nested entity creation",
      "Documentation of best practices for TypeORM/GraphQL integration patterns"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:43:58"
    }
  },
  {
    "number": 1418,
    "title": "BUG or SUPPORT something wrong with joinable tables",
    "created_at": "2018-01-07T15:16:29Z",
    "closed_at": "2018-01-23T06:22:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/1418",
    "body": "I have `TestEntity.ts`:\r\n```js\r\n@Entity('test_1288');\r\nexport class TestEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column(type => JoinEntity)\r\n    jName: JoinEntity = new JoinEntity({spec: \"fffffffff\"});\r\n}\r\n```\r\nand joinable table `JoinEntity.ts`:\r\n```js\r\n@Entity(\"join_1288\")\r\nexport class JoinEntity {\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column()\r\n    spec: string;\r\n}\r\n```\r\n\r\nand of course `test.ts`:\r\n```js\r\ndescribe(\"github issues > #1288 check calculated columns (sql in @Column)\", () => {\r\n\r\n    let connections: Connection[];\r\n    before(async () => {\r\n        return connections = await createTestingConnections({\r\n            entities: [__dirname + \"/entity/*{.js,.ts}\"]\r\n        });\r\n    });\r\n    beforeEach(() => {\r\n        return reloadTestingDatabases(connections);\r\n    });\r\n    after(() => {\r\n        return closeTestingConnections(connections);\r\n    });\r\n\r\n    it(\"should persist successfully and return entity\", () => Promise.all(connections.map(async connection => {\r\n        // create objects to save\r\n        const joinEntity1 = new JoinEntity();\r\n        joinEntity1.spec = \"Entity #1 spec (for TestEntity)\";\r\n\r\n        const testEntity1 = new TestEntity();\r\n        testEntity1.name = \"Entity #1\";\r\n        testEntity1.jName.spec = \"Entity #1 some spec\";\r\n\r\n        const testEntity2 = new TestEntity();\r\n        testEntity2.name = \"Entity #2\";\r\n\r\n        // persist\r\n        await connection.manager.save([\r\n            testEntity1,\r\n            testEntity2\r\n        ]);\r\n```\r\n\r\nbut what I see in a query?:\r\n```SQL\r\nINSERT INTO \"test_1288\"(\"name\", \"jNameSpec\") VALUES ($1,$2)  RETURNING \"id\", \"jNameId\"\r\n```\r\nany comments about this?",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/1418/comments",
    "author": "cybermerlin",
    "comments": [
      {
        "user": "pleerock",
        "created_at": "2018-01-08T13:20:56Z",
        "body": "Thank you for clear example. Looks correct. What issue do you have? What do you think is wrong?\r\n  \n\n---\n\nYou are using a concept called \"embedded entities\". When you embed entity it merges all properties from it into your original entity. In your case result will be `test_1288` table with 4 columns:\r\n\r\n* id\r\n* name\r\n* jNameId\r\n* jNameSpec\r\n\r\nWhere `id` and `jNameSpec` are both primary columns and they are resulted in a *composite primary key*. This is how embedded entities are working. Im not sure why are you using \"joinable\" table terminology here, but looks like you are confusing this with concept of real relations (many-to-many, one-to-many, etc.) \r\n\r\nAlso there are two issues with your code:\r\n\r\n* your second entity does not need a decorator. Remove `@Entity(\"join_1288\")` from JoinEntity.\r\n* you have multiple primary keys and both are auto-generated columns - this is not supported (and will not be because of database-level limitations)"
      },
      {
        "user": "cybermerlin",
        "created_at": "2018-01-13T10:42:01Z",
        "body": "I was thinking something like: \r\ntables: test_1288, join_1288\r\n and \r\ntest_1288.jName are FK to join_1288.id \r\n      and if I have to get spec value then all I need is just call testEntity1.jName.spec (like in ibatis on advanced types)\n\n---\n\nthank for waiting for my reaction (I was very busy)."
      },
      {
        "user": "pleerock",
        "created_at": "2018-01-15T09:22:47Z",
        "body": "you need to use relations, not `@Column(() => Entity)` syntax for your purpose."
      },
      {
        "user": "cybermerlin",
        "created_at": "2018-01-21T20:00:43Z",
        "body": "thx.\r\nmaybe u show me some link to that helping page, it's will be helpful for me?"
      },
      {
        "user": "pleerock",
        "created_at": "2018-01-23T06:22:47Z",
        "body": "open a documentation site and take a look on section panel, you'll see \"Relations\" there."
      }
    ],
    "satisfaction_conditions": [
      "Clarification on the difference between embedded entities and relational mappings in TypeORM",
      "Explanation of proper relation configuration for FK relationships between tables",
      "Documentation reference for implementing entity relationships",
      "Guidance on accessing nested entity properties through relations",
      "Clarification on primary key constraints in entity configurations"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:44:19"
    }
  },
  {
    "number": 642,
    "title": "Data type \"boolean\" is not supported in \"mysql\" database.",
    "created_at": "2017-07-10T09:59:36Z",
    "closed_at": "2017-07-12T06:17:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/642",
    "body": "typeorm `0.1.0-alpha.28` is giving now error `Data type \"boolean\" is not supported in \"mysql\" database.` if using boolean datatype. Running with sqlite this works fine. \r\n\r\nThis used to work with 0.0.11. I suppose I could fallback to tinyint as solution for now.",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/642/comments",
    "author": "jounii",
    "comments": [
      {
        "user": "hugoserrana",
        "created_at": "2017-07-10T10:47:59Z",
        "body": "@jounii The MySql does not have internal BOOLEAN data type. Types like BOOLEAN and BOOL are TINYINT(1) internally. \r\n\r\nIn Changelog the TypeOrm team wrote this:\r\n> some column types were removed. Now orm uses directly column types of underlying database\r\n\r\nI think they made the right decision because the types are mapped explicitly. I imagine this will reduce errors in maintaining this awesome library."
      },
      {
        "user": "pleerock",
        "created_at": "2017-07-10T13:56:26Z",
        "body": "@jounii if you define column type explicitly then you must use `tinyint` because explicitly defined types are now only database-supported types as @hugoserrana said. \r\n\r\nBut if you variable is `boolean` you can simply omit type definition and it will be converted to tinyint automatically, e.g. for `@Column() enabled: boolean` you don't need to specify type - its automatically mapped to tinyint."
      },
      {
        "user": "jounii",
        "created_at": "2017-07-12T05:57:35Z",
        "body": "Mysql does have alias for BOOLEAN and BOOL to mapped to TINYINT. If you logic is right, shouldn't the sqlite implementation driver also rule tinyint and others out too? Sqlite uses internally only \"integer\" type and aliases rest.\r\n\r\nHave to try if the boolean entity member is properly mapped if I don't specify the types manually. \n\n---\n\nWorks ok without defining the type. Problem solved for now, thanks. \r\n\r\nRelated to this is if the tinyint (and others specific data size types) go out of fashion, the Column options would need some sort of data length/type hinting options so the driver could choose best suiting internal type.\r\n\r\nMaybe possibility to define data type converter class/function so you could customise these yourself. I suppose I could override the DriverFactory to provide own wrapper driver, but it'll be exercise for later. "
      },
      {
        "user": "feather-jmalone",
        "created_at": "2017-08-25T00:02:48Z",
        "body": "maybe i'm missing something, but in `0.1.0-alpha.34` and `0.1.0-alpha.35`, i'm unable to work around the issue as recommended. i tried the following in my entity definition:\r\n\r\n`@Column({\r\n        nullable: false,\r\n        default: false\r\n    })\r\n    someFlag: boolean;`\r\n\r\nand also \r\n\r\n`@Column()\r\n    someFlag: boolean;`\r\n\r\nboth result in the following exception: `TypeORM connection error:  { DataTypeNotSupportedError: Data type \"\" is not supported in \"mysql\" database.`\r\n\r\ndid something change?\r\n\r\ni can't get the column working unless i specify `'tinyint'` as the first parameter for `@Column`. consequently, values come back as `1` or `0` instead of `true` or `false`. "
      },
      {
        "user": "pleerock",
        "created_at": "2017-08-25T16:11:21Z",
        "body": "Looks like it cannot figure out parameter type. Parameter type is automatically determined only if you setup reflect-metadata properly and setup tsconfig properly. Read more about them on a homepage"
      },
      {
        "user": "feather-jmalone",
        "created_at": "2017-08-25T21:06:42Z",
        "body": "ah, you're right. i did not have `reflect-metadata`. however, when i added `import \"reflect-metadata\"` to my main `app.ts` file as the docs suggested, i still got the error. adding the same line to the entity `.ts` file is what ultimately fixed the issue.\r\n\r\nthanks for the help!"
      },
      {
        "user": "pleerock",
        "created_at": "2017-08-26T06:09:33Z",
        "body": "reflect-metadata should be loaded before any your entity is loaded. Probably you have loaded entities before your imported reflect-metadata in your app.ts "
      },
      {
        "user": "feather-jmalone",
        "created_at": "2017-08-26T07:06:26Z",
        "body": "i don't think so, but i am still new to TypeScript and TypeORM. here's an abbreviated version of my `app.ts` (took out Express-related code in the `createConnection` callback), does anything seem strange to you?\r\n\r\n```\r\nimport {createConnection} from 'typeorm';\r\nimport \"reflect-metadata\";\r\n\r\n// Establish the database connection before doing anything else\r\ncreateConnection({\r\n    type: 'mysql',\r\n    host: process.env.DB_HOST,\r\n    port: process.env.DB_PORT,\r\n    username: process.env.DB_USER,\r\n    password: process.env.DB_PASS,\r\n    database: process.env.DB_NAME,\r\n    entities: [\r\n        __dirname + '/entity/*.js'\r\n    ],\r\n    autoSchemaSync: true\r\n}).then(connection => {\r\n\r\n    // Initialize Express and other things\r\n\r\n// Log database connection errors\r\n}).catch(error => \r\n{\r\n    console.log('TypeORM connection error: ', error)\r\n});\r\n```\r\nthanks again for your help. although my particular issue is solved, i wanna help with future documentation if this is in fact a scenario that's unaccounted for."
      },
      {
        "user": "pleerock",
        "created_at": "2017-08-26T17:46:26Z",
        "body": "its not an unaccounted scenario, Im sure its something on your side. You can create a demo git repo with problem reproduction and I'll take why its happening on you"
      }
    ],
    "satisfaction_conditions": [
      "Automatic boolean-to-tinyint mapping without explicit type definitions",
      "Consistent boolean value representation (true/false) in application layer",
      "Clear configuration requirements for type inference",
      "Database-agnostic type handling for cross-platform compatibility",
      "Error prevention for common type mapping pitfalls"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:47:27"
    }
  },
  {
    "number": 539,
    "title": "Allow manual rollback or commit of transaction",
    "created_at": "2017-06-14T01:51:23Z",
    "closed_at": "2017-06-15T18:29:45Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/539",
    "body": "",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/539/comments",
    "author": "yonilerner",
    "comments": [
      {
        "user": "pleerock",
        "created_at": "2017-06-14T12:23:36Z",
        "body": "Everything you wrap into transaction will be executed and in the end transaction will be commited. You can throw exception in your transaction function and rollback will be executed. Why do you need more then this? But yeah, you can do manual rollback and commit, but using more low-level api."
      },
      {
        "user": "yonilerner",
        "created_at": "2017-06-14T17:59:05Z",
        "body": "@pleerock How can I access this lower level API? I dont see any references in the documentation.\r\n\r\nThrowing exceptions of course works, but its often more cumbersome than really necessary if all I want to do is rollback a transaction based on a condition "
      },
      {
        "user": "pleerock",
        "created_at": "2017-06-15T17:55:00Z",
        "body": "as of `0.1.0-alpha.9` its possible using this syntax:\r\n\r\n```ts\r\nconst queryRunner = connection.driver.createQueryRunner(); // queryRunner is a single real connection to the database obtained from a connection pool\r\nawait queryRunner.startTransaction();\r\n// execute sql queries using queryRunner\r\nawait queryRunner.commitTransaction(); // or .rollbackTransaction()\r\nawait queryRunner.release(); // don't forget to release connection, very important!\r\n```\r\n\r\nExecute any sql operations using queryRunner. USE ONLY this queryRunner to execute queries, don't use entity managers, repositories because they are running queries on their own query runners. In the case you want to use managers/repositories you need to create them using this api:\r\n\r\n```ts\r\nconst entityManager = connection.createIsolatedManager(yourQueryRunner);\r\n```\r\n\r\nor \r\n\r\n```ts\r\nconst entityRepository = connection.createIsolatedRepository(Entity, yourQueryRunner);\r\n```"
      },
      {
        "user": "yonilerner",
        "created_at": "2017-06-15T18:29:45Z",
        "body": "Great, thank you!"
      },
      {
        "user": "EVINK",
        "created_at": "2020-09-11T01:04:48Z",
        "body": "@pleerock\r\n\r\nHi, there! I am using UPDATE SQL in queryRunner.query API, and I do not commit it, but it has changed data to db later.\r\n\r\nHere is my code\r\n\r\n```ts\r\n// A request is coming, since I do not commit it , so the data in db not changes after responded\r\n// but it is changed while an another request arrived (this new request had calling \"startTransaction() \")\r\nconst queryRunner = getConnection().createQueryRunner()\r\ntry{\r\n    await queryRunner.startTransaction() \r\n    await queryRunner.connect()\r\n    await queryRunner.query('UPDATE ...')\r\n}catch(err){\r\n    return next(err)\r\n}finally{\r\n   queryRunner.release()\r\n}\r\n\r\n```\r\nHow I gonna do if I want to ensure the data not changed?\r\n\r\n"
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates manual transaction control without relying on exception handling",
      "Ensures transaction isolation when using repositories/managers",
      "Provides clear connection lifecycle management guidance",
      "Supports conditional commit/rollback logic without implicit persistence"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:49:03"
    }
  },
  {
    "number": 506,
    "title": "Schema sync/drop in 0.1.0-alpha.3",
    "created_at": "2017-05-31T14:38:02Z",
    "closed_at": "2017-06-03T19:49:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/506",
    "body": "I've got some problems with typeorm@0.1.0-alpha.3:\r\n\r\n`typeorm schema:sync`\r\n\r\n`UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): TypeError: this.metadataArgsStorage.filterTables is not a function`\r\n\r\nThe same issue with `schema:drop` command.\r\nnodejs: v6.10.3\r\nenv: windows 10 x64\r\nserver: PostgreSQL 9.4.11 on x86_64-unknown-linux-gnu, compiled by gcc (Debian 4.9.2-10) 4.9.2, 64-bit\"\r\n\r\nBy the way: where can i find the information about debug way for typeorm cli commands?\r\nThanks.",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/506/comments",
    "author": "rkylsyi",
    "comments": [
      {
        "user": "pleerock",
        "created_at": "2017-06-03T05:50:02Z",
        "body": "You have this issue because your `ormconfig.json` is not an array, ormconfig.json should contain an array of connection options, e.g.:\r\n\r\n```json\r\n[{\r\n  \"driver\": {\r\n    \"type\": \"mysql\",\r\n    \"host\": \"localhost\",\r\n    \"port\": 3306,\r\n    \"username\": \"test\",\r\n    \"password\": \"test\",\r\n    \"database\": \"test\",\r\n    \"usePool\": true,\r\n    \"extra\": {\r\n      \"timezone\": \"utc\"\r\n    }\r\n  },\r\n  \"autoSchemaSync\": true,\r\n  \"entities\": [\r\n    \"modules/**/entity/{*.ts,*.js}\"\r\n  ],\r\n  \"subscribers\": [\r\n    \"modules/**/subscriber/{*.ts,*.js}\"\r\n  ]\r\n}]\r\n```\r\n\r\n> where can i find the information about debug way for typeorm cli commands? \r\n\r\nyou debug it just the regular way you usually debug javascript"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of required configuration structure for typeorm@0.1.0-alpha.3",
      "Clarification of connection options format expectations",
      "Guidance for debugging typeorm CLI commands"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:49:18"
    }
  },
  {
    "number": 303,
    "title": "Connection pooling doesn't really pool connections",
    "created_at": "2017-02-22T00:41:50Z",
    "closed_at": "2017-02-23T17:25:22Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/typeorm/typeorm/issues/303",
    "body": "It looks like when you create a connection and have connection pooling on type orm creates a \"pool of 1 connection\", and then when you close the connection type orm ends the pool.  Ideally what we want to do is create a pool of 50 connections in our web api that type orm re-uses across requests.  I'm new to type orm.  Hopefully I'm just missing some way to configure this.",
    "comments_url": "https://api.github.com/repos/typeorm/typeorm/issues/303/comments",
    "author": "swilliams-a3digital",
    "comments": [
      {
        "user": "pleerock",
        "created_at": "2017-02-22T06:18:15Z",
        "body": "> when you close the connection type orm ends the pool\r\n\r\nyou should not close connection in the app lifecycle. You open connection once in application bootstrap and close only when application shut downs. Connection pools are handled in a single orm connection, and when you are closing connection - you are closing pool too. If you don't close connection - pool will work as you expect."
      },
      {
        "user": "swilliams-a3digital",
        "created_at": "2017-02-22T20:36:01Z",
        "body": "Thanks for the quick reply.  If I create the \"type orm connection\" in the app bootstrap, and I have a bunch of simultaneous requests that all use the one \"type orm connection\" will there be any issues?  \r\n\r\nMy concern is:\r\nrequest A comes in, type orm does a persist and while its waiting for the promise to resolve node handles request B that uses the same type orm connection and there is some problem because the connection is in use.\r\n\r\nI'm hoping the answer is the one \"type orm\" connection will open multiple my sql db connections if it needs to do multiple things at the same time\r\n\r\n"
      },
      {
        "user": "pleerock",
        "created_at": "2017-02-23T03:19:01Z",
        "body": "> If I create the \"type orm connection\" in the app bootstrap, and I have a bunch of simultaneous requests that all use the one \"type orm connection\" will there be any issues\r\n\r\nno, because its designed to work this way.\r\n\r\n> I'm hoping the answer is the one \"type orm\" connection will open multiple my sql db connections if it needs to do multiple things at the same time\r\n\r\nyes it is. Real database connection is used from pull per each `persist` / `remove`/ or any other `find` method call"
      },
      {
        "user": "swilliams-a3digital",
        "created_at": "2017-02-23T17:14:21Z",
        "body": "Thank you so much for the fast answer to my question.  You can close this issue.\r\n"
      },
      {
        "user": "zxr90",
        "created_at": "2017-04-22T06:48:05Z",
        "body": "> yes it is. Real database connection is used from pull per each persist / remove/ or any other find method call\r\n\r\nSorry to hijack this issue but i have a similar question while browsing the docs. Is there an option to control the max number of real database connection? If no, what is the default pool size?\r\n\r\nI'm coming off Activerecord and in Rails, they allow you to setup your own connection pool size when initializing the app."
      },
      {
        "user": "pleerock",
        "created_at": "2017-04-24T08:33:07Z",
        "body": "@zxr90 I have created separate issue for your issue. You can setup connection pool using \"extra\" option in connection driver options and pass there underlying driver options (for example if you are using mysql see mysql driver options on how to do this)"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to maintain a single persistent database connection throughout the application lifecycle",
      "Clarification that connection pools automatically handle concurrent requests through underlying driver connections",
      "Configuration mechanism for connection pool size parameters",
      "Demonstration of connection reuse across multiple API requests",
      "Lifecycle management strategy for database connections in web applications"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:50:10"
    }
  }
]