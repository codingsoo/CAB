[
  {
    "number": 20769,
    "title": "Ctrl-C kills VSCode if started from command prompt",
    "created_at": "2017-02-16T22:41:00Z",
    "closed_at": "2017-11-23T14:52:47Z",
    "labels": [
      "bug",
      "help wanted",
      "windows",
      "workbench-os-integration"
    ],
    "url": "https://github.com/microsoft/vscode/issues/20769",
    "body": "- VSCode Version: 1.9.1\r\n- OS Version: Windows 10 Anniversary Update\r\n\r\nSteps to Reproduce:\r\n\r\n1. From the command prompt, run \"C:\\Program Files (x86)\\Microsoft VS Code\\Code.exe\". \r\n2. Press Ctrl-C from command prompt, VSCode exits immediately",
    "comments_url": "https://api.github.com/repos/microsoft/vscode/issues/20769/comments",
    "author": "wm1",
    "comments": [
      {
        "user": "joaomoreno",
        "created_at": "2017-02-17T10:06:38Z",
        "body": "This is as expected."
      },
      {
        "user": "wm1",
        "created_at": "2017-02-17T17:46:33Z",
        "body": "Why such a behavior is expected? A child process (at least on Windows) started from cmd.exe is not supposed to be killed when the parent process receives a Ctrl-C.\r\n\r\nI work from command line all the time, and start Code there. Ctrl-C killing the editor is not a great experience for me."
      },
      {
        "user": "joaomoreno",
        "created_at": "2017-02-17T20:19:42Z",
        "body": "What should Ctrl C do, then?"
      },
      {
        "user": "wm1",
        "created_at": "2017-02-17T21:06:27Z",
        "body": "Depends on whether the child process shares the console with the parent cmd process or not.\r\n- For child console process that shares console, Ctrl-C would likely kill the running child process;\r\n- For child GUI process that does not have a console at all, Ctrl-C on the parent cmd process should have no impact on it."
      },
      {
        "user": "joaomoreno",
        "created_at": "2017-02-18T07:37:26Z",
        "body": "Code.exe **is** a child console process. That's just how Chromium works.\r\n\r\nIf you don't want that, I suggest to use what we put in the `PATH`: simply type `code`. It should point to `...\\Microsoft VS Code\\bin\\code.cmd`. This will get you a detached Code."
      },
      {
        "user": "wm1",
        "created_at": "2017-02-18T16:06:27Z",
        "body": "Before replying last time I did check that code.exe is a gui process:\r\n\r\n`link.exe /dump /headers \"C:\\Program Files (x86)\\Microsoft VS Code\\Code.exe\" | findstr subsystem\r\n               2 subsystem (Windows `**GUI**`)`\r\n\r\nAnyhow, code.cmd solves my problem. And I guess that is why nobody complains about this issue. I was not aware of this script as I never allow programs to update PATH.\r\n\r\nIn the meantime, I figure out that \"start **/b** <path-to-code.exe>\" also works, which basically sets CREATE_NEW_PROCESS_GROUP and thus the new process won't receive Ctrl-C targeting the original group."
      },
      {
        "user": "joaomoreno",
        "created_at": "2017-11-23T14:52:47Z",
        "body": "To keep the number of issues in our inbox on a manageable level, we're closing issues that have been on the backlog for a long time but haven't gained traction: We look at the number of votes the issue has received and the number of duplicates issues filed.\r\n\r\nThanks for your understanding. Happy coding!"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why Code.exe terminates with Ctrl-C when launched directly",
      "Method to launch VSCode without inheriting console process group",
      "Clarification of process type (GUI vs console) expectations",
      "Alternative launch method that maintains workflow efficiency"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:28:27"
    }
  }
]