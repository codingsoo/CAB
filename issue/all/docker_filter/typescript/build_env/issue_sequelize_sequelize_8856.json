{
  "number": 8856,
  "title": "add support of || (double-pipe) concat operator",
  "created_at": "2018-01-08T10:11:05Z",
  "closed_at": "2018-01-11T04:54:10Z",
  "labels": [
    "question"
  ],
  "url": "https://github.com/sequelize/sequelize/issues/8856",
  "body": "<!--\r\n\r\nPlease note this is an issue tracker, not a support forum.\r\nFor general questions, please use StackOverflow or Slack.\r\n\r\nFor bugs, please fill out the template below.\r\n\r\n-->\r\n\r\n## What are you doing?\r\n<!-- Post a minimal, self-contained code sample that reproduces the issue, including models and associations -->\r\n\r\nI try to concat (`||`) binary data to a field using `updateQuery`.\r\n\r\n```js\r\nvar query = db.dialect.QueryGenerator.updateQuery('myTable', { data: db.literal('data || $data') }, { id:1 } ) )\r\n...\r\ndb.query(query, {\r\n  type: db.QueryTypes.UPDATE,\r\n  bind: {\r\n    data: myBuffer\r\n  }\r\n});\r\n```\r\nI would like to use `db.col()` and `db.literal()` in my previous expression, but the `||` operator is not available:\r\n`{ data: db.concat(db.col('data'), db.literal('$data')) }`\r\n\r\n\r\n__Dialect:__  any\r\n__Dialect version:__ latest\r\n__Database version:__ latest\r\n__Sequelize version:__ latest\r\n__Tested with latest release:__ No (If yes, specify that version)\r\n\r\n\r\n**Note :** _Your issue may be ignored OR closed by maintainers if it's not tested against latest version OR does not follow issue template._\r\n",
  "comments_url": "https://api.github.com/repos/sequelize/sequelize/issues/8856/comments",
  "author": "FranckFreiburger",
  "comments": [
    {
      "user": "sushantdhiman",
      "created_at": "2018-01-11T04:54:10Z",
      "body": "You can use `sequelize.fn` \r\n\r\n```js\r\n  await Test.sync({ force: true });\r\n\r\n  await Test.create({ a: 'gdsds' });\r\n\r\n  var query = sequelize.dialect.QueryGenerator.updateQuery('Tests', {\r\n    a: sequelize.fn('CONCAT', sequelize.col('a'), sequelize.literal('$a::text'))\r\n  });\r\n\r\n  await sequelize.query(query, {\r\n    type: sequelize.QueryTypes.UPDATE,\r\n    bind: {\r\n      a: 'ABC'\r\n    }\r\n  });\r\n\r\n  console.log(await Test.findAll({ raw: true }));\r\n```\r\n\r\n```sql\r\nExecuting (default): DROP TABLE IF EXISTS \"Tests\" CASCADE;\r\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Tests\" (\"id\"   SERIAL , \"a\" VARCHAR(255), \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\r\nExecuting (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\r\nExecuting (default): INSERT INTO \"Tests\" (\"id\",\"a\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,'gdsds','2018-01-11 04:52:59.466 +00:00','2018-01-11 04:52:59.466 +00:00') RETURNING *;\r\nExecuting (default): UPDATE \"Tests\" SET \"a\"=CONCAT(\"a\", $1::text)\r\nExecuting (default): SELECT \"id\", \"a\", \"createdAt\", \"updatedAt\" FROM \"Tests\" AS \"Test\";\r\n[ { id: 1,\r\n    a: 'gdsdsABC',\r\n    createdAt: 2018-01-11T04:52:59.466Z,\r\n    updatedAt: 2018-01-11T04:52:59.466Z } ]\r\n\r\n```"
    },
    {
      "user": "FranckFreiburger",
      "created_at": "2018-01-11T07:40:29Z",
      "body": "Thanks for the reply.\r\nUsing CONCAT is the first alternative I thought of.\r\nI use pgsql and I cannot find a clear information in the doc to know if CONCAT supports binary data (operates on BYTEA), however, `||` clearly supports BYTEA concatenation.\r\n\r\n"
    },
    {
      "user": "sushantdhiman",
      "created_at": "2018-01-11T07:44:16Z",
      "body": "Can you try and see if `CONCAT` works on binary data, possibly typecast with `bytea`"
    },
    {
      "user": "FranckFreiburger",
      "created_at": "2018-01-11T08:14:21Z",
      "body": "without casting:\r\nsql: `UPDATE \"images\" SET \"data\"=CONCAT(\"data\", $1) WHERE \"id\" = 1`\r\nerr: `SequelizeDatabaseError: column \"data\" is of type bytea but expression is of type text:`\r\n\n\n---\n\nwith casting:\r\nsql: `UPDATE \"images\" SET \"data\"=CAST(CONCAT(CAST(\"data\" AS TEXT), $1::text) AS BYTEA) WHERE \"id\" = 1`\r\nerr: `invalid byte sequence for encoding \"UTF8\": 0x9`\r\n"
    },
    {
      "user": "sushantdhiman",
      "created_at": "2018-01-11T08:34:51Z",
      "body": "Just using `literal` will work\r\n\r\n```js\r\n    await Test.sync({ force: true });\r\n\r\n    await Test.create({ a: new Buffer('thing') });\r\n\r\n    var query = sequelize.dialect.QueryGenerator.updateQuery('Tests', {\r\n      a: sequelize.literal('$a || a')\r\n    });\r\n\r\n    await sequelize.query(query, {\r\n      type: sequelize.QueryTypes.UPDATE,\r\n      bind: {\r\n        a: 'some'\r\n      }\r\n    });\r\n\r\n    const result = await Test.findAll();\r\n\r\n    console.log(result[0].get('a').toString('utf8'));\r\n```\r\n\r\n```sql\r\nExecuting (default): DROP TABLE IF EXISTS \"Tests\" CASCADE;\r\nExecuting (default): CREATE TABLE IF NOT EXISTS \"Tests\" (\"id\"   SERIAL , \"a\" BYTEA, \"createdAt\" TIMESTAMP WITH TIME ZONE NOT NULL, \"updatedAt\" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY (\"id\"));\r\nExecuting (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tests' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;\r\nExecuting (default): INSERT INTO \"Tests\" (\"id\",\"a\",\"createdAt\",\"updatedAt\") VALUES (DEFAULT,E'\\\\x7468696e67','2018-01-11 08:33:37.006 +00:00','2018-01-11 08:33:37.006 +00:00') RETURNING *;\r\nExecuting (default): UPDATE \"Tests\" SET \"a\"=$1 || a\r\nExecuting (default): SELECT \"id\", \"a\", \"createdAt\", \"updatedAt\" FROM \"Tests\" AS \"Test\";\r\nsomething\r\n```"
    },
    {
      "user": "FranckFreiburger",
      "created_at": "2018-01-11T08:47:07Z",
      "body": "I agree.\r\nThe drawback of literal is that we lost sequelize tools like column name escaping, etc..."
    },
    {
      "user": "sushantdhiman",
      "created_at": "2018-01-11T08:54:09Z",
      "body": "If you are binding variables in query, I see no problem with that if query is correctly generated"
    },
    {
      "user": "FranckFreiburger",
      "created_at": "2018-01-11T08:56:27Z",
      "body": "It's ok for me, thanks."
    }
  ],
  "satisfaction_conditions": [
    "Support for binary data concatenation using the || operator in Sequelize's query generation",
    "Integration with Sequelize's column escaping and type safety features",
    "Avoidance of explicit type casting in query construction",
    "Native operator support within Sequelize's expression DSL"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-04-05 00:22:15"
  },
  "git_commit_info": {
    "sha": "27124e954abe199a3ae66bc36bab0e050cfe5d59",
    "date": "2013-03-04T22:35:30Z",
    "message": "Mutiple calls to define with the same daoName would add duplicate entries into the factory system.\n\n- added test to check factory size",
    "author": "Rob Raux"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-8e0d96a90cab01a9df734c1c4bd76418a7faf738.pack\n./.git/objects/pack/pack-8e0d96a90cab01a9df734c1c4bd76418a7faf738.rev\n./.git/objects/pack/pack-8e0d96a90cab01a9df734c1c4bd76418a7faf738.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/main\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/main\n./.git/logs/HEAD\n./.git/index\n./.gitignore\n./.gitmodules\n./.travis.yml\n./.watchr.js\n./LICENSE\n./README.md\n./bin\n./bin/sequelize\n./changelog.md\n./docs\n./docs/api.js\n./docs/assets\n./docs/assets/css\n./docs/assets/css/external-small.png\n./docs/assets/css/logo.png\n./docs/assets/css/main.css\n./docs/assets/favicon.png\n./docs/assets/img\n./docs/assets/img/spinner.gif\n./docs/assets/index.html\n./docs/assets/js\n./docs/assets/js/api-filter.js\n./docs/assets/js/api-list.js\n./docs/assets/js/api-search.js\n./docs/assets/js/apidocs.js\n./docs/assets/js/yui-prettify.js\n./docs/assets/vendor\n./docs/assets/vendor/prettify\n./docs/assets/vendor/prettify/CHANGES.html\n./docs/assets/vendor/prettify/COPYING\n./docs/assets/vendor/prettify/README.html\n./docs/assets/vendor/prettify/prettify-min.css\n./docs/assets/vendor/prettify/prettify-min.js\n./docs/classes\n./docs/classes/QueryInterface.html\n./docs/classes/Sequelize.html\n./docs/classes/index.html\n./docs/data.json\n./docs/files\n./docs/files/index.html\n./docs/files/index.js.html\n./docs/files/lib_dao-factory.js.html\n./docs/files/lib_dialects_abstract_query.js.html\n./docs/files/lib_dialects_sqlite_query-interface.js.html\n./docs/files/lib_sequelize.js.html\n./docs/index.html\n./docs/modules\n./docs/modules/Sequelize.html\n./docs/modules/index.html\n./examples\n./examples/Associations\n./examples/Associations/app.js\n./examples/Count\n./examples/Count/app.js\n./examples/MinMax\n./examples/MinMax/app.js\n./examples/Performance\n./examples/Performance/app.js\n./examples/default-values\n./examples/default-values/app.js\n./examples/image-handling\n./examples/image-handling/app.js\n./examples/image-handling/source.png\n./examples/method-passing\n./examples/method-passing/app.js\n./examples/sequelize-with-options\n./examples/sequelize-with-options/app.js\n./examples/using-multiple-model-files\n./examples/using-multiple-model-files/Project.js\n./examples/using-multiple-model-files/Task.js\n./examples/using-multiple-model-files/app.js\n./index.js\n./lib\n./lib/associations\n./lib/associations/belongs-to.js\n./lib/associations/has-many-double-linked.js\n./lib/associations/has-many-single-linked.js\n./lib/associations/has-many.js\n./lib/associations/has-one.js\n./lib/associations/mixin.js\n./lib/dao-factory-manager.js\n./lib/dao-factory.js\n./lib/dao.js\n./lib/data-types.js\n./lib/dialects\n./lib/dialects/abstract\n./lib/dialects/abstract/query.js\n./lib/dialects/connector-manager.js\n./lib/dialects/mysql\n./lib/dialects/mysql/connector-manager.js\n./lib/dialects/mysql/query-generator.js\n./lib/dialects/mysql/query.js\n./lib/dialects/postgres\n./lib/dialects/postgres/connector-manager.js\n./lib/dialects/postgres/query-generator.js\n./lib/dialects/postgres/query.js\n./lib/dialects/query-generator.js\n./lib/dialects/sqlite\n./lib/dialects/sqlite/connector-manager.js\n./lib/dialects/sqlite/query-generator.js\n./lib/dialects/sqlite/query-interface.js\n./lib/dialects/sqlite/query.js\n./lib/emitters\n./lib/emitters/custom-event-emitter.js\n./lib/migration.js\n./lib/migrator.js\n./lib/query-chainer.js\n./lib/query-interface.js\n./lib/sequelize.js\n./lib/sql-string.js\n./lib/utils.js\n./package.json\n./spec-jasmine\n./spec-jasmine/assets\n./spec-jasmine/assets/migrations\n./spec-jasmine/assets/migrations/20111117063700-createPerson.js\n./spec-jasmine/assets/migrations/20111130161100-emptyMigration.js\n./spec-jasmine/assets/migrations/20111205064000-renamePersonToUser.js\n./spec-jasmine/assets/migrations/20111205162700-addSignatureColumnToUser.js\n./spec-jasmine/assets/migrations/20111206061400-removeShopIdColumnFromUser.js\n./spec-jasmine/assets/migrations/20111206063000-changeSignatureColumnOfUserToMendatory.js\n./spec-jasmine/assets/migrations/20111206163300-renameSignatureColumnOfUserToSig.js\n./spec-jasmine/assets/project.js\n./spec-jasmine/associations\n./spec-jasmine/associations/belongs-to.spec.js\n./spec-jasmine/associations/has-many.spec.js\n./spec-jasmine/associations/has-one.spec.js\n./spec-jasmine/config\n./spec-jasmine/config/config.js\n./spec-jasmine/config/factories.js\n./spec-jasmine/config/helpers.js\n./spec-jasmine/dao-factory.spec.js\n./spec-jasmine/dao.spec.js\n./spec-jasmine/mysql\n./spec-jasmine/mysql/associations.has-many.spec.js\n./spec-jasmine/mysql/associations.spec.js\n./spec-jasmine/mysql/connector-manager.spec.js\n./spec-jasmine/mysql/dao-factory.spec.js\n./spec-jasmine/mysql/query-generator.spec.js\n./spec-jasmine/postgres\n./spec-jasmine/postgres/associations.has-many.spec.js\n./spec-jasmine/postgres/associations.spec.js\n./spec-jasmine/postgres/query-generator.spec.js\n./spec-jasmine/sequelize.spec.js\n./spec-jasmine/sqlite\n./spec-jasmine/sqlite/dao-factory.spec.js\n./spec-jasmine/sqlite/dao.spec.js\n./spec-jasmine/sqlite/query-generator.spec.js\n./spec-jasmine/utils.spec.js\n./spec\n./spec/assets\n./spec/assets/migrations\n./spec/assets/migrations/20111117063700-createPerson.js\n./spec/assets/migrations/20111130161100-emptyMigration.js\n./spec/assets/migrations/20111205064000-renamePersonToUser.js\n./spec/assets/migrations/20111205162700-addSignatureColumnToUser.js\n./spec/assets/migrations/20111206061400-removeShopIdColumnFromUser.js\n./spec/assets/migrations/20111206063000-changeSignatureColumnOfUserToMendatory.js\n./spec/assets/migrations/20111206163300-renameSignatureColumnOfUserToSig.js\n./spec/assets/project.js\n./spec/associations\n./spec/associations/belongs-to.spec.js\n./spec/associations/has-many.spec.js\n./spec/associations/has-one.spec.js\n./spec/associations/mixin.spec.js\n./spec/buster-helpers.js\n./spec/buster.js\n./spec/config\n./spec/config/config.js\n./spec/config/factories.js\n./spec/config/helpers.js\n./spec/dao-factory.spec.js\n./spec/dao.spec.js\n./spec/dao.validations.spec.js\n./spec/migrator.spec.js\n./spec/postgres\n./spec/postgres/dao.spec.js\n./spec/query-chainer.spec.js\n./spec/query-interface.spec.js\n./spec/sequelize.spec.js\n./spec/sqlite\n./spec/sqlite/dao.spec.js\n",
    "readme": "\n--- ./README.md ---\n# Sequelize #\n\nThe Sequelize library provides easy access to MySQL, SQLite or PostgreSQL databases by mapping database entries to objects and vice versa. To put it in a nutshell... it's an ORM (Object-Relational-Mapper). The library is written entirely in JavaScript and can be used in the Node.JS environment.\n\n## Important Notes ##\n\n### 1.6.0 ###\n\n- We changed the way timestamps are handled. From v1.6.0 on timestamps are stored and loaded as UTC.\n- Support for synchronous migrations has been dropped. `up` and `down` methods in migrations do have a third parameter which is the callback parameter. Pass an error or an error message as first parameter to the callback if something went wrong in the migration.\n\n## Blogposts/Changes ##\n- [v1.4.1](http://blog.sequelizejs.com/post/24403298792/changes-in-sequelize-1-4-1): deprecation of node < 0.6, logging customization, ...\n- [v1.4.0](http://blog.sequelizejs.com/post/24345409723/changes-in-sequelize-1-4-0): postgresql, connection pooling, ...\n- [v1.3.0](http://blog.depold.com/post/15283366633/changes-in-sequelize-1-3-0): migrations, cross-database, validations, new listener notation, ...\n- [v1.2.1](http://blog.depold.com/post/12319530694/changes-in-sequelize-1-2-1): changes some defaults and some interfaces\n- [v1.0.0](http://blog.depold.com/post/5936116582/changes-in-sequelize-1-0-0): complete rewrite\n\n## Features ##\n\n- Schema definition\n- Schema synchronization/dropping\n- Easy definition of class/instance methods\n- Instance saving/updating/dropping\n- Asynchronous library\n- Associations\n- Importing definitions from single files\n\n## Documentation, Examples and Updates ##\n\nYou can find the documentation and announcements of updates on the [project's website](http://www.sequelizejs.com).\nIf you want to know about latest development and releases, follow me on [Twitter](http://twitter.com/sdepold).\nAlso make sure to take a look at the examples in the repository. The website will contain them soon, as well.\n\n- [Documentation](http://www.sequelizejs.com)\n- [Twitter](http://twitter.com/sdepold)\n- [IRC](irc://irc.freenode.net/sequelizejs)\n- [Google Groups](https://groups.google.com/forum/#!forum/sequelize)\n- [XING](https://www.xing.com/net/priec1b5cx/sequelize) (pretty much inactive, but you might want to name it on your profile)\n\n## Roadmap\n\nA very basic roadmap. Chances aren't too bad, that not mentioned things are implemented as well. Don't panic :)\n\n### 1.6.0 (ToDo)\n- ~~Fix last issues with eager loading of associated data~~\n- ~~Find out why Person.belongsTo(House) would add person_id to house. It should add house_id to person~~\n\n### 1.7.0\n- Check if lodash is a proper alternative to current underscore usage.\n- Transactions\n- Support for update of tables without primary key\n- MariaDB support\n- Support for update and delete calls for whole tables without previous loading of instances\n- Eager loading of nested associations [#388](https://github.com/sdepold/sequelize/issues/388#issuecomment-12019099)\n- Model#delete\n- Validate a model before it gets saved. (Move validation of enum attribute value to validate method)\n- BLOB [#99](https://github.com/sdepold/sequelize/issues/99)\n\n### 1.7.x\n- Complete support for non-id primary keys\n\n### 1.8.0\n- API sugar (like Model.select().where().group().include().all())\n- Schema dumping\n- ~~enum support~~\n- attributes / values of a dao instance should be scoped\n\n### 2.0.0\n- save datetimes in UTC\n\n## Collaboration 2.0 ##\n\nI'm glad to get pull request if any functionality is missing or something is buggy. But _please_ ... run the tests before you send me the pull request.\n\nStill interested? Coolio! Here is how to get started:\n\n### 1. Prepare your environment ###\n\nHere comes a little surprise: You need [Node.JS](http://nodejs.org). In order to be\na productive developer, I would recommend the latest v0.8. Also I usually recommend\n[NVM](https://github.com/creationix/nvm).\n\nOnce Node.JS is installed on your computer, you will also have access to the lovely\nNode Package Manager (NPM).\n\n### 2. Database... Come to me! ###\n\nFirst class citizen of Sequelize was MySQL. Over time, Sequelize began to\nbecome compatible to SQLite and PostgreSQL. In order to provide a fully\nfeatured pull request, you would most likely want to install of them. Give\nit a try, it's not that hard.\n\nIf you are too lazy or just don't know how to get this work,\nfeel free to join the IRC channel (freenode@#sequelizejs).\n\nFor MySQL and PostgreSQL you'll need to create a DB called `sequelize_test`.\nFor MySQL this would look like this:\n\n```console\n$ echo \"CREATE DATABASE sequelize_test;\" | mysql -uroot\n```\n\n**CLEVER NOTE:** your local MySQL install must be with username `root`\n  without password. If you want to customize that just hack in the\n  tests, but make sure to don't commit your credentials, we don't want\n  to expose your personal data in sequelize codebase ;)\n\n**AND ONE LAST THING:** Once `npm install` worked for you (see below), you'll\nget SQLite tests for free :)\n\n\n### 3. Install the dependencies ###\n\nJust \"cd\" into sequelize directory and run `npm install`, see an example below:\n\n```console\n$ cd path/to/sequelize\n$ npm install\n```\n\n### 4. Run the tests ###\n\nRight now, the test base is split into the `spec` folder (which contains the\nlovely [BusterJS](http://busterjs.org) tests) and the `spec-jasmine` folder\n(which contains the ugly and awkward node-jasmine based tests). A main goal\nis to get rid of the jasmine tests!\n\nAs you might haven't installed all of the supported SQL dialects, here is how\nto run the test suites for your development environment:\n\n```console\n$ # run all tests at once:\n$ npm test\n\n$ # run only the jasmine tests (for all dialects):\n$ npm run test-jasmine\n\n$ # run all of the buster specs (for all dialects):\n$ npm run test-buster\n\n$ # run the buster specs for mysql:\n$ npm run test-buster-mysql\n\n$ # run the buster specs for sqlite:\n$ npm run test-buster-sqlite\n\n$ # run the buster specs for postgresql:\n$ npm run test-buster-postgres\n```\n\n### 5. That's all ###\n\nJust commit and send pull requests.\nHappy hacking and thank you for contributing.\nAh and one last thing: If you think you deserve it, feel free to add yourself to the\n`package.json`. Also I always look for projects which are using sequelize. If you have\none of them, drop me a line!\n\n### 6. Some words about coding style ###\n\nAs people are regularly complaining about missing semi-colons and strangely formatted\nthings, I just want to explain the way I code JavaScript (including Sequelize\n... obviously). I won't reject any pull-request because of having a different code\nstyle than me but it would be good to have a consistent way of coding in the whole\nproject. Here are my rules of thumb:\n\n- No semi-colons. Where possible I try to avoid semi-colons. Please don't discuss this topic with me. Thanks.\n- Curly braces for single line if blocks. I always add curly braces to if blocks. Same for loops and other places.\n- Spacing. Indentation = 2 spaces. Also I add a lot of spaces where possible. See below.\n- Anonymous functions over names functions. Usually I declare a function and assign it to a variable: `var foo = function() {}`\n- Variable declarations. If multiple variables are defined, I use a leading comma for separation.\n- Camelcased variable names. No underscores.\n- Make sure that key is in objects when iterating over it. See below.\n\n#### 6.1. Spaces ####\n\nUse spaces when defining functions.\n\n```js\nfunction(arg1, arg2, arg3) {\n  return 1\n}\n```\n\nUse spaces for if statements.\n\n```js\nif (condition) {\n  // do something\n} else {\n  // something else\n}\n```\n\n#### 6.2. Variable declarations ####\n\n```js\nvar num  = 1\n  , user = new User()\n  , date = new Date()\n```\n\n#### 6.3. For-In-loops ####\n\n```js\nfor (var key in obj) {\n  if (obj.hasOwnProperty(key)) {\n    console.log(obj[key])\n  }\n}\n```\n\n#### 6.4. JSHint options ####\n\n```js\n{\n  \"camelcase\": true,\n  \"curly\": true,\n  \"forin\": true,\n  \"indent\": 2,\n  \"unused\": true,\n  \"asi\": true,\n  \"evil\": false,\n  \"laxcomma\": true\n}\n```\n\n# Build status\n\nThe automated tests we talk about just so much are running on\n[Travis public CI](http://travis-ci.org), here is its status:\n\n[![Build Status](https://secure.travis-ci.org/sdepold/sequelize.png)](http://travis-ci.org/sdepold/sequelize)\n\n\n\n--- ./changelog.md ---\n# v2.0.0 #\n- [DEPENDENCIES] upgrade mysql to alpha7. You *MUST* use this version or newer for DATETIMEs to work\n\n# v1.6.0 #\n- [DEPENDENCIES] upgraded most dependencies. most important: mysql was upgraded to 2.0.0-alpha-3\n- [DEPENDENCIES] mysql is now an optional dependency. #355 (thanks to clkao)\n- [REFACTORING] separated tests for dialects\n- [REFACTORING] reduced number of sql queries used for adding an element to a N:M association. #449 (thanks to innofluence/janmeier)\n- [REFACTORING] dropped support for synchronous migrations. added third parameter which needs to get called once the migration has been finished. also this adds support for asynchronous actions in migrations.\n- [OTHERS] code was formatted to fit the latest code style guidelines (thanks to durango)\n- [OTHERS] Explicitly target ./docs folder for generate-docs script. #444 (thanks to carsondarling)\n- [BUG] fixed wrong version in sequelize binary\n- [BUG] local options have higher priority than global options (thanks to guersam)\n- [BUG] fixed where clause when passing an empty array (thanks to kbackowski)\n- [BUG] fixed updateAttributes for models/tables without primary key (thanks to durango)\n- [BUG] fixed the location of the foreign key when using belongsTo (thanks to ricardograca)\n- [BUG] don't return timestamps if only specific attributes have been seleceted (thanks to ricardograca)\n- [BUG] fixed removeColumn for sqlite\n- [FEATURE] added association prefetching /eager loading for find and findAll. #465\n- [FEATURE] it's now possible to use callbacks of async functions inside migrations (thanks to mphilpot)\n- [FEATURE] improved comfort of sequelize.query. just pass an sql string to it and wait for the result\n- [FEATURE] Migrations now understand NODE_ENV (thanks to gavri)\n- [FEATURE] Performance improvements (thanks to Mick-Hansen and janmeier from innofluence)\n- [FEATURE] Model.find and Model.findAll can now take a String with an ID. (thanks to ghernandez345)\n- [FEATURE] Compatibility for JSON-like strings in Postgres (thanks to aslakhellesoy)\n- [FEATURE] honor maxConcurrentQueries option (thanks to dchester)\n- [FEATURE] added support for stored procedures (inspired by wuyuntao)\n- [FEATURE] added possibility to use pg lib's native api (thanks to denysonique)\n- [FEATURE] added possibility to define the attributes of received associations (thanks to joshm)\n- [FEATURE] added findOrCreate, which returns a the already existing instance or creates one (thanks to eveiga)\n- [FEATURE] minConnections option for MySQL pooling (thanks to dominiklessel)\n- [FEATURE] added BIGINT data type which is treated like a string (thanks to adamsch1)\n- [FEATURE] https://github.com/sdepold/sequelize/pull/345\n- [FEATURE] allow definition of a models table name (thanks to slamkajs)\n- [FEATURE] allow usage of enums. #440 (thanks to KevinMartin)\n- [FEATURE] allows updateAttributes to target specific fields only (thanks to Pasvaz)\n- [FEATURE] timestamps are now stored as UTC. #461 (thanks to innofluence/janmeier)\n- [FEATURE] results of raw queries are parsed with dottie. #468 (thanks to kozze89)\n- [FEATURE] support for array serialization. pg only. #443 (thanks to clkao)\n- [FEATURE] add increment and decrement methods on dao. #408 (thanks to janmeier/innofluence)\n- [FEATURE] unified the result of describeTable\n\n# v1.5.0 #\n- [REFACTORING] use underscore functions for Utils.isHash (thanks to Mick-Hansen/innofluence)\n- [REFACTORING] removed the 'failure' event and replaced it with 'error'\n- [BUG] fixed booleans for sqlite (thanks to vlmonk)\n- [BUG] obsolete reference attribute for many-to-many associations are removed correctly\n- [BUG] associations can be cleared via passing null to the set method\n- [BUG] \"fixed\" quota handling (thanks to dgf)\n- [BUG] fixed destroy in postgresql (thanks to robraux)\n- [FEATURE] added possibility to set protocol and to remove port from postgresql connection uri (thanks to danielschwartz)\n- [FEATURE] added possibility to not use a junction table for many-to-many associations on the same table (thanks to janmeier/innofluence)\n- [FEATURE] results of the `import` method is now cached (thanks to janmeier/innofluence)\n- [FEATURE] added possibility to check if a specific object or a whole bunch of objects is currently associated with another object (thanks to janmeier/innofluence)\n- [FEATURE] added possibility to globally disable adding of NULL values to sql queries (thanks to janmeier/innofluence)\n- [FEATURE] Model.create can now also be used to specify values for mass assignment (thanks to janmeier/innofluence)\n- [FEATURE] QueryChainer will now provide the results of the added emitters in the order the emitters have been added (thanks to LaurentZuijdwijk and me ;))\n- [FEATURE] QueryChainer can now be initialized with serial items\n- [FEATURE] node 0.8 compatibility\n- [FEATURE] added options to hasMany getters (thanks to janmeier/innofluence)\n- [FEATURE] pooling option is now correctly passed to postgres (thanks to megshark)\n\n# v1.4.1 #\n- [DEPRECATION] Added deprecation warning for node < v0.6.\n- [FEATURE] added selective saving of instances (thanks to kioopi)\n- [FEATURE] added command to binary for creating a migration skeleton with current timestamp\n- [FEATURE] added `complete` function for each finder method (thanks to sstoiana)\n- [BUG] fixed quotation for sqlite statements (thanks to vlmonk)\n- [BUG] fixed timestamp parsing in migratios (thanks to grn)\n- [FEATURE] added consistent logging behaviour to postgres (thanks to reacuna)\n\n# v1.4.0 #\n- [BUG] fixed booleans in sqlite (thanks to alexstrat)\n- [BUG] fixed forced sync of many-to-many associations (thanks to SirUli)\n- [FEATURE] objects are now compatible to JSON.stringify. (thanks to grayt0r)\n- [FEATURE] When instantiating the sequelize object, you can now pass a function to logging. This allows you to customize the logging behavior. Default is now: console.log (thanks to kenperkins)\n- [BUG] The default logging is still console.log but is wrapped after initialization as it crashes node < 0.6.x.\n- [FEATURE] postgresql support. (thanks to swoodtke)\n- [FEATURE] connection-pooling for mysql. (thanks to megshark)\n- [FEATURE] added possibility to define NOW as default value for date data-types. Use Sequelize.NOW as defaultValue\n- [BUG] Fixed date handling in sqlite (thanks to iizukanao)\n\n# v1.3.7 #\n- [BUG] fixed issue where multiple belongsTo or hasOne associations to the same table overwrite each other\n- [BUG] fixed memory leaks (thanks to megshark)\n\n# v1.3.6 #\n- [BUG] don't update an existing updatedAt-attribute if timestamps option for a DAO is false\n\n# v1.3.5 #\n- [BUG] fixed missed DAO renaming in migrations (thanks to nov)\n\n# v1.3.4 #\n- [REFACTORING] renamed Model/ModelFactory/ModelFactoryManager to DAO/DAOFactory/DAOFactoryManager\n- [IMPROVEMENT] `npm test` will run the test suite (thanks to gabrielfalcao)\n- [IMPROVEMENT] documentation about setting up local development environment (thanks to gabrielfalcao)\n- [REFACTORING] removed updatedAt + createdAt from SequelizeMeta\n\n# v1.3.3 #\n- [BUG] fixed sql-event emitter in all possible locations (thanks to megshark)\n\n# v1.3.2 #\n- [FEATURE] sqlite is now emitting the 'sql'-event as well (thanks to megshark)\n\n# v1.3.1 #\n- [REFACTORING] renamed ModelManager to ModelFactoryManager\n- [IMPROVEMENT] decreased delay of CustomEventEmitter execution from 5ms to 1ms\n- [IMPROVEMENT] improved performance of association handling (many-to-many) (thanks to magshark)\n- [FEATURE] added possibility to specify name of the join table (thanks to magshark)\n- [FEATURE] mysql is emitting a 'sql'-event when executing a query\n- [BUG] correctly delete existing SequelizeMeta entry from database after undoing migration\n- [BUG] fix path of migration files in executable (thanks to bcg)\n\n# v1.3.0 #\n- [REFACTORING] Model#all is now a function and not a getter.\n- [REFACTORING] Renamed ModelDefinition to ModelFactory\n- [REFACTORING] Private method scoping; Attributes are still public\n- [REFACTORING] Use the new util module for node 0.6.2\n- [FEATURE] QueryChainer can now run serially\n- [FEATURE] Association definition is chainable: Person.hasOne(House).hasMany(Address)\n- [FEATURE] Validations (Thanks to [hiddentao](https://github.com/hiddentao))\n- [FEATURE] jQuery-like event listeners: .success(callback) and .error(callback)\n- [FEATURE] aliasing for select queries: Model.find({ where: 'id = 1', attributes: ['id', ['name', 'username']] }) ==> will return the user's name as username\n- [FEATURE] cross-database support. currently supported: mysql, sqlite\n- [FEATURE] migrations\n- [TEST] removed all expresso tests and converted them to jasmine\n\n# v1.2.1 #\n- [REFACTORING] renamed the global options for sync, query and define on sequelize; before: options.queryOptions; now: options.query\n- [FEATURE] allow definition of charset via global define option in sequelize or via charset option in sequelize.define\n- [FEATURE] allow definition of mysql engine via global define option in sequelize or via engine option in sequelize.define; default is InnoDB now\n- [FEATURE] find and findAll will now search in a list of values via: Model.findAll({where: { id: [1,2,3] }}); will return all models with id 1, 2 and 3\n- [TEST] force latin1 charset for travis\n\n# v1.2.0 #\n- [FEATURE] min/max function for models, which return the min/max value in a column\n- [FEATURE] getModel for modelManager for getting a model without storing it in a variable; use it via sequelize.modelManager.getModel('User')\n- [TEST] test suite refactoring for jasmine\n\n# v1.1.4 #\n- [BUG] tables with identical prefix (e.g. wp_) can now be used in many-to-many associations\n\n# v1.1.3 #\n- [BUG] scoped options in model => a model can now have the attribute options\n- [FEATURE] added drop method for sequelize, that drops all currently registered tables\n\n# v1.1.2 #\n- [BUG] prevent malfunction after being idle\n\n# v1.1.1 #\n- [BUG] fixed memory leaks\n- [FEATURE] added query queueing (adjustable via maxConcurrentQueries in config; default: 50)\n\n# v1.1.0 #\n- [BUG] defaultValue 0 is now working\n- [REMOVED] mysql-pool usage (will give it a new try later)\n- [CHORE] updated node-mysql to 0.9.4\n\n# v1.0.2 #\n- [BUG] Fixed where clause generation for models with explicit primary keys (allanca)\n- [BUG] Set insertId for non-default auto increment fields (allanca)\n\n# v1.0.1 #\n- [FEATURE] Added Model.count(callback), which returns the number of elements saved in the database\n- [BUG] Fixed self associations\n\n# v1.0.0 #\n- complete rewrite\n- added new emitter syntax\n- sql injection protection\n- select now supports hash usage of where\n- select now supports array usage of where\n- added a lot of options to find/findAll\n- Wrapped queries correctly using `foo`\n- using expresso 0.7.2\n- moved config for test database into seperated config file\n- Added method for adding and deleting single associations\n\n# v0.4.3 #\n- renamed loadAssociatedData to fetchAssociations\n- renamed Model#associatedData to fetchedAssociations\n- added fetchAssociations to finder methods\n- store data found by finder method in the associatedData hash + grep them from there if reload is not forced\n- added option to sequelize constructor for disabling the pluralization of tablenames: disableTableNameModification\n- allow array as value for chainQueries => Sequelize.chainQueries([save: [a,b,c]], callback)\n- remove the usage of an array => Sequelize.chainQueries({save: a}, {destroy: b}, callback)\n\n# v0.4.2 #\n- fixed bugs from 0.4.1\n- added the model instance method loadAssociatedData which adds the hash Model#associatedData to an instance which contains all associated data\n\n# v0.4.1 #\n- THIS UPDATE CHANGES TABLE STRUCTURES MASSIVELY!\n- MAKE SURE TO DROP YOUR CURRENT TABLES AND LET THEM CREATE AGAIN!\n\n- names of many-to-many-association-tables are chosen from passed association names\n- foreign keys are chosen from passed association name\n- added many-to-many association on the same model\n- added hasManyAndBelongsTo\n- added hasOneAndBelongsTo\n- nodejs-mysql-native 0.4.2\n\n# v0.4.0 #\n- added error handling when defining invalid database credentials\n- Sequelize#sync, Sequelize#drop, model#sync, model#drop returns errors via callback\n- code is now located under lib/sequelize to use it with nDistro\n- added possibility to use non default mysql database (host/port)\n- added error handling when defining invalid database port/host\n- schema definitions can now contain default values and null allowance\n- database credentials can now also contain an empty / no password\n\n# v0.3.0 #\n- added possibility to define class and instance methods for models\n- added import method for loading model definition from a file\n\n# v0.2.6 #\n- refactored Sequelize to fit CommonJS module conventions\n\n# v0.2.5 #\n- added BOOLEAN type\n- added FLOAT type\n- fixed DATE type issue\n- fixed npm package\n\n# v0.2.4 #\n- fixed bug when using cross associated tables (many to many associations)\n\n# v0.2.3 #\n- added latest mysql connection library\n  - fixed id handling on save\n  - fixed text handling (varchar > 255; text)\n- using the inflection library for naming tables more convenient\n- Sequelize.TEXT is now using MySQL datatype TEXT instead of varchar(4000)\n\n# v0.2.2 #\n- released project as npm package\n\n# v0.2.1 #\n- fixed date bug\n\n# v0.2.0 #\n- added methods for setting associations\n- added method for chaining an arbitraty amount of queries\n\n# v0.1.0 #\n- first stable version\n- implemented all basic functions\n- associations are working\n\n\n\n\n--- ./docs/assets/vendor/prettify/README.html ---\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html>\n  <head>\n    <title>Javascript code prettifier</title>\n\n    <link href=\"src/prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n\n    <script src=\"src/prettify.js\" type=\"text/javascript\"></script>\n\n    <style type=\"text/css\">\n      body { margin-left: .5in }\n      h1, h2, h3, h4, .footer { margin-left: -.4in; }\n    </style>\n  </head>\n\n  <body onload=\"prettyPrint()\" bgcolor=\"white\">\n    <small style=\"float: right\">Languages : <a href=\"README-zh-Hans.html\">CH</a></small>\n    <h1>Javascript code prettifier</h1>\n\n    <h2>Setup</h2>\n    <ol>\n      <li><a href=\"http://code.google.com/p/google-code-prettify/downloads/list\">Download</a> a distribution\n      <li>Include the script and stylesheets in your document\n        (you will need to make sure the css and js file are on your server, and\n         adjust the paths in the <tt>script</tt> and <tt>link</tt> tag)\n        <pre class=\"prettyprint\">\n&lt;link href=\"prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n&lt;script type=\"text/javascript\" src=\"prettify.js\">&lt;/script></pre>\n      <li>Add <code class=\"prettyprint lang-html\">onload=\"prettyPrint()\"</code> to your\n      document's body tag.\n      <li>Modify the stylesheet to get the coloring you prefer</li>\n    </ol>\n\n    <h2>Usage</h2>\n    <p>Put code snippets in\n    <tt>&lt;pre class=\"prettyprint\"&gt;...&lt;/pre&gt;</tt>\n    or <tt>&lt;code class=\"prettyprint\"&gt;...&lt;/code&gt;</tt>\n    and it will automatically be pretty printed.\n\n    <table summary=\"code examples\">\n      <tr>\n        <th>The original\n        <th>Prettier\n      <tr>\n        <td><pre style=\"border: 1px solid #888;padding: 2px\"\n             ><a name=\"voila1\"></a>class Voila {\npublic:\n  // Voila\n  static const string VOILA = \"Voila\";\n\n  // will not interfere with embedded <a href=\"#voila1\">tags</a>.\n}</pre>\n\n        <td><pre class=\"prettyprint\"><a name=\"voila2\"></a>class Voila {\npublic:\n  // Voila\n  static const string VOILA = \"Voila\";\n\n  // will not interfere with embedded <a href=\"#voila2\">tags</a>.\n}</pre>\n    </table>\n\n    <h2>FAQ</h2>\n    <h3 id=\"langs\">Which languages does it work for?</h3>\n    <p>The comments in <tt>prettify.js</tt> are authoritative but the lexer\n    should work on a number of languages including C and friends,\n    Java, Python, Bash, SQL, HTML, XML, CSS, Javascript, and Makefiles.\n    It works passably on Ruby, PHP, VB, and Awk and a decent subset of Perl\n    and Ruby, but, because of commenting conventions, doesn't work on\n    Smalltalk, or CAML-like languages.</p>\n\n    <p>LISPy languages are supported via an extension:\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-lisp.js\"\n     ><code>lang-lisp.js</code></a>.</p>\n    <p>And similarly for\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-css.js\"\n     ><code>CSS</code></a>,\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-hs.js\"\n     ><code>Haskell</code></a>,\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-lua.js\"\n     ><code>Lua</code></a>,\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-ml.js\"\n     ><code>OCAML, SML, F#</code></a>,\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-vb.js\"\n     ><code>Visual Basic</code></a>,\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-sql.js\"\n     ><code>SQL</code></a>,\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-proto.js\"\n     ><code>Protocol Buffers</code></a>, and\n    <a href=\"http://code.google.com/p/google-code-prettify/source/browse/trunk/src/lang-wiki.js\"\n     ><code>WikiText</code></a>..\n\n    <p>If you'd like to add an extension for your favorite language, please\n    look at <tt>src/lang-lisp.js</tt> and file an\n    <a href=\"http://code.google.com/p/google-code-prettify/issues/list\"\n     >issue</a> including your language extension, and a testcase.</p>\n\n    <h3>How do I specify which language my code is in?</h3>\n    <p>You don't need to specify the language since <code>prettyprint()</code>\n    will guess.  You can specify a language by specifying the language extension\n    along with the <code>prettyprint</code> class like so:</p>\n    <pre class=\"prettyprint lang-html\"\n>&lt;pre class=&quot;prettyprint <b>lang-html</b>&quot;&gt;\n  The lang-* class specifies the language file extensions.\n  File extensions supported by default include\n    \"bsh\", \"c\", \"cc\", \"cpp\", \"cs\", \"csh\", \"cyc\", \"cv\", \"htm\", \"html\",\n    \"java\", \"js\", \"m\", \"mxml\", \"perl\", \"pl\", \"pm\", \"py\", \"rb\", \"sh\",\n    \"xhtml\", \"xml\", \"xsl\".\n&lt;/pre&gt;</pre>\n\n    <h3>It doesn't work on <tt>&lt;obfuscated code sample&gt;</tt>?</h3>\n    <p>Yes.  Prettifying obfuscated code is like putting lipstick on a pig\n    &mdash; i.e. outside the scope of this tool.</p>\n\n    <h3>Which browsers does it work with?</h3>\n    <p>It's been tested with IE 6, Firefox 1.5 &amp; 2, and Safari 2.0.4.\n    Look at <a href=\"tests/prettify_test.html\">the test page</a> to see if it\n    works in your browser.</p>\n\n    <h3>What's changed?</h3>\n    <p>See the <a href=\"CHANGES.html\">change log</a></p>\n\n    <h3>Why doesn't Prettyprinting of strings work on WordPress?</h3>\n    <p>Apparently wordpress does \"smart quoting\" which changes close quotes.\n    This causes end quotes to not match up with open quotes.\n    <p>This breaks prettifying as well as copying and pasting of code samples.\n    See\n    <a href=\"http://wordpress.org/support/topic/125038\"\n    >WordPress's help center</a> for info on how to stop smart quoting of code\n    snippets.</p>\n\n    <h3 id=\"linenums\">How do I put line numbers in my code?</h3>\n    <p>You can use the <code>linenums</code> class to turn on line\n    numbering.  If your code doesn't start at line number 1, you can\n    add a colon and a line number to the end of that class as in\n    <code>linenums:52</code>.\n\n    <p>For example\n<pre class=\"prettyprint\">&lt;pre class=\"prettyprint linenums:<b>4</b>\"\n&gt;// This is line 4.\nfoo();\nbar();\nbaz();\nboo();\nfar();\nfaz();\n&lt;pre&gt;</pre>\n    produces\n<pre class=\"prettyprint linenums:4\"\n>// This is line 4.\nfoo();\nbar();\nbaz();\nboo();\nfar();\nfaz();\n</pre>\n\n    <h3>How do I prevent a portion of markup from being marked as code?</h3>\n    <p>You can use the <code>nocode</code> class to identify a span of markup\n    that is not code.\n<pre class=\"prettyprint\">&lt;pre class=prettyprint&gt;\nint x = foo();  /* This is a comment  &lt;span class=\"nocode\"&gt;This is not code&lt;/span&gt;\n  Continuation of comment */\nint y = bar();\n&lt;/pre&gt;</pre>\nproduces\n<pre class=\"prettyprint\">\nint x = foo();  /* This is a comment  <span class=\"nocode\">This is not code</span>\n  Continuation of comment */\nint y = bar();\n</pre>\n\n    <p>For a more complete example see the issue22\n    <a href=\"tests/prettify_test.html#issue22\">testcase</a>.</p>\n\n    <h3>I get an error message \"a is not a function\" or \"opt_whenDone is not a function\"</h3>\n    <p>If you are calling <code>prettyPrint</code> via an event handler, wrap it in a function.\n    Instead of doing\n    <blockquote>\n      <code class=\"prettyprint lang-js\"\n       >addEventListener('load', prettyPrint, false);</code>\n    </blockquote>\n    wrap it in a closure like\n    <blockquote>\n      <code class=\"prettyprint lang-js\"\n       >addEventListener('load', function (event) { prettyPrint() }, false);</code>\n    </blockquote>\n    so that the browser does not pass an event object to <code>prettyPrint</code> which\n    will confuse it.\n\n    <br><br><br>\n\n    <div class=\"footer\">\n<!-- Created: Tue Oct  3 17:51:56 PDT 2006 -->\n<!-- hhmts start -->\nLast modified: Wed Jul 19 13:56:00 PST 2010\n<!-- hhmts end -->\n    </div>\n  </body>\n</html>\n\n\n",
    "readme_filenames": [
      "./README.md",
      "./changelog.md",
      "./docs/assets/vendor/prettify/README.html"
    ]
  },
  "llm_calls_before_build": 35,
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM node:10\n\nRUN sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list && \\\n    sed -i 's|security.debian.org|archive.debian.org/|g' /etc/apt/sources.list && \\\n    sed -i '/stretch-updates/d' /etc/apt/sources.list && \\\n    apt-get update && apt-get install -y \\\n    build-essential \\\n    python \\\n    git \\\n    libpq-dev \\\n    libsqlite3-dev\n\nWORKDIR /app\n\nRUN git clone https://github.com/sequelize/sequelize.git . && \\\n    git checkout 27124e954abe199a3ae66bc36bab0e050cfe5d59\n\nRUN npm install --production",
  "dockerfile_build_success": true,
  "llm_calls_total": 45
}