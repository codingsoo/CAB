[
  {
    "number": 1428,
    "title": "Move a window with manage=off & sticky=on to a spacific position on the screen",
    "created_at": "2022-09-19T17:31:19Z",
    "closed_at": "2022-09-19T18:30:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/1428",
    "body": "Is that possible? Thanks in advance!",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/1428/comments",
    "author": "itaysharir",
    "comments": [
      {
        "user": "koekeishiya",
        "created_at": "2022-09-19T17:38:16Z",
        "body": "I use the following for mpv sometimes when I want some video playing in the corner:\r\n\r\n`yabai -m rule --add app=\"^mpv$\" manage=off border=off sticky=on layer=above opacity=1.0 grid=8:8:6:0:2:2`"
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates how to position a window with both 'manage=off' and 'sticky=on' properties using yabai",
      "Shows a method to define persistent window placement rules",
      "Addresses positioning while maintaining window's 'above layer' and persistent visibility"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:20"
    }
  },
  {
    "number": 1375,
    "title": "color format for window borders",
    "created_at": "2022-08-29T03:22:32Z",
    "closed_at": "2022-08-29T20:49:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/1375",
    "body": "Great tool, so far been loving yabai. However, when trying to customize it for my use, I haven't really figured out the color format I should use for the window borders. I've tried with standard HEX (ex. 58a6ff) but as I've seen in the config files of other people, the format they use seems to be different (ex. 0xE0808080).\r\n\r\nWhat color format is used to configure window borders? Thank you in advance, and please excuse my ignorance if I haven't found the place where this information could be!",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/1375/comments",
    "author": "0rphee",
    "comments": [
      {
        "user": "PhrantiK",
        "created_at": "2022-08-29T09:08:16Z",
        "body": "Throw the hex on the end of 0xFF and you're good to go. \r\n\r\nWith the example you mentioned it would be: ``0xFF58A6FF``\r\n\r\n"
      },
      {
        "user": "koekeishiya",
        "created_at": "2022-08-29T09:29:46Z",
        "body": "It is mentioned in the docs. I don't really see an issue with the way it is worded, but maybe it is unclear for some people.\r\n\r\n> active_window_border_color [0xAARRGGBB]\r\nColor of the border of the focused window.\r\n\r\n> normal_window_border_color [0xAARRGGBB]\r\nColor of the border of an unfocused window.\r\n\r\nThe format is `0xAARRGGBB`, basically `AA` is the alpha channel, `RR` is the red channel, `GG` is the green channel, and `BB` is the blue channel. 8-bits to represent each channel.\r\n\r\nI guess most tools online only translate the `RGB` channel to `#RRGGBB` e.g: `255, 87, 51` to `#FF5733`.\r\nThe equivalent for yabai (fully opaque) would be `0xFFFF5733`. I guess the `0x` part might be confusing. "
      },
      {
        "user": "0rphee",
        "created_at": "2022-08-29T20:49:32Z",
        "body": "Oh thank you! It's clear to me now."
      },
      {
        "user": "carlosvigil",
        "created_at": "2023-05-30T17:37:20Z",
        "body": "> I guess most tools online only translate the `RGB` channel to `#RRGGBB` e.g: `255, 87, 51` to `#FF5733`. The equivalent for yabai (fully opaque) would be `0xFFFF5733`. I guess the `0x` part might be confusing.\r\n\r\nyes, the 0xFF part is confusing. Everywhere else I've seen color the Alpha channel is trailing. Not sure what the 0x is for. Asking BingAI and searching for 10 digit hex color picker didn't lead anywhere either."
      },
      {
        "user": "24unix",
        "created_at": "2023-05-30T17:42:02Z",
        "body": "0x indicates that a hex value follows.\r\nDigital Colour Meter can give a hex RGB output, just add 0xXX, where XX is the opacity from 00 to 255 in hex.\r\n"
      },
      {
        "user": "koekeishiya",
        "created_at": "2023-05-30T17:50:46Z",
        "body": "There are various representations when encoding in 32 bits. I just happened to be introduced to the ARGB color model, and so that is the natural one for me to use. You can probably google for \"ARGB32 color model\" if you want to read about these things."
      },
      {
        "user": "carlosvigil",
        "created_at": "2023-05-30T17:55:36Z",
        "body": "@koekeishiya @24unix Thanks, seems like there's ever more to learn. I'll hold off on that rabbit hole for today."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of the ARGB32 color model structure",
      "Conversion guidance from standard #RRGGBB to 0xAARRGGBB",
      "Clarification of alpha channel usage",
      "Differentiation from common RGBA representations"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:34"
    }
  },
  {
    "number": 727,
    "title": "How do I only tile certain apps?",
    "created_at": "2020-11-19T04:56:11Z",
    "closed_at": "2020-11-23T08:46:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/727",
    "body": "My current configuration is has the layout set to `bsp` to tile windows and I'm using a list of apps that are specifically disabled with `yabai -m rule --add manage=off app=\"$app\"`.\r\n\r\nI want to invert my configuration so that all apps float by default and I have a specific list of apps that are managed. How would I accomplish this? I tried setting the global mode to `float` and manually setting `manage=on` on those apps but it didn't work.",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/727/comments",
    "author": "Hum4n01d",
    "comments": [
      {
        "user": "koekeishiya",
        "created_at": "2020-11-20T11:11:02Z",
        "body": "First set the space layout to bsp.\r\n\r\nThen `yabai -m rule --add app!=\"^(Safari|Finder|Notes)$\" manage=off `\r\n\r\nThis will float every app except Safari, Finder, and Notes."
      },
      {
        "user": "rockyzhang24",
        "created_at": "2020-11-20T15:09:50Z",
        "body": "Just for curiosity, why is that inverted way not correct? That is: setting the layout to float by `yabai -m config layout float` followed by setting a rule to make some windows be managed by `yabai -m rule --add app=\"^(Safari|Finder|Notes)$\" manage=on`. \r\nThank you!"
      },
      {
        "user": "koekeishiya",
        "created_at": "2020-11-20T15:23:37Z",
        "body": "Floating spaces are not set up the same way; they are not initialized in a way that allowws for any tiling to happen, if that makes sense. They are simply \"left alone\". The space layout setting will override any potential modifier that is put on the window in this case.\r\n\r\nEdit:\r\nThe reason for this is simply that the additional complexity and introduction of potential error sources and edge-cases that has to be dealt with, is simply not worth it just for user convenience.  I understand that people may disagree, but this is not something that I am going to change."
      },
      {
        "user": "Hum4n01d",
        "created_at": "2020-11-23T08:46:28Z",
        "body": "Thank you!"
      },
      {
        "user": "benajaero",
        "created_at": "2022-12-19T13:36:19Z",
        "body": "this saved my life, you da goat no cap"
      },
      {
        "user": "zerone0x",
        "created_at": "2023-03-18T03:43:17Z",
        "body": "reaally good, I need to close yabai everytime when I use zoom"
      }
    ],
    "satisfaction_conditions": [
      "Invert default window management behavior to float all apps by default while allowing specific apps to be tiled",
      "Work with yabai's rule system without relying on global float layout configuration",
      "Use exclusion-based rules to manage exceptions rather than inclusion-based rules",
      "Maintain tiling layout functionality for managed apps"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:06:31"
    }
  },
  {
    "number": 674,
    "title": "Question: is it possible to auto-stack new windows?",
    "created_at": "2020-09-28T14:14:40Z",
    "closed_at": "2020-09-28T14:45:43Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/674",
    "body": "Hello,\r\n\r\nFisrt off, that you for making yabai and being so incredibly helpful to those who use it. it's appreciated :)\r\n\r\nIs it possible to configure (on a per-space basis or globally) a rule like `yabai -m window --insert stack`, so that new windows created in that space automatically stack onto the most recent window?\r\n\r\nMy use case is that I really like stacks, but i also really like bsp layout and the ability to have more than one stack in a given space.\r\nIf i set the layout of a space to `bsp`, i can have multiple stacks but all new windows cause splits\r\nIf i set the layout of a space to `stack`, all new windows stack, but it's no longer possible to split a stack and have multiple stacks\r\n\r\nI'm stuck on this one. Any advice or direction would be greatly appreciated",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/674/comments",
    "author": "alextremblay",
    "comments": [
      {
        "user": "dominiklohmann",
        "created_at": "2020-09-28T14:22:04Z",
        "body": "You can cause the next insertion to happen in `stack` mode on the focused window whenever the focused window changes:\r\n\r\n```\r\nyabai -m signal --add event=window_focused action='yabai -m window $YABAI_WINDOW_ID --insert stack'\r\nyabai -m signal --add event=application_front_switched action='yabai -m window --insert stack'\r\n```\r\n\r\nYou can hide the insertion overlay by setting the config option `insert_feedback_color`.\r\n\r\n```\r\nyabai -m config insert_feedback_color 0x00FFFFFF\r\n```"
      },
      {
        "user": "alextremblay",
        "created_at": "2020-09-28T14:45:43Z",
        "body": "awesome, thank you!\r\n\r\nThat's almost perfect\r\n\r\nThe only time it fails is if you close a window and create a new one. I added \r\n```\r\nyabai -m signal --add event=application_terminated action='yabai -m window --insert stack'\r\nyabai -m signal --add event=window_destroyed action='yabai -m window --insert stack'\r\n```\r\nand now it's working great.\r\n\r\nThank you so much!"
      },
      {
        "user": "stefanopagliari",
        "created_at": "2022-06-28T20:40:02Z",
        "body": "@alextremblay and @dominiklohmann thank you for this. It largely address what I was looking for.\r\nWould it be possible to modify this so that new windows are stacked only if there are currently 3 windows on the screen?\r\nI have a wide-screen and by default I prefer not to have more than three windows"
      },
      {
        "user": "pyinto",
        "created_at": "2024-01-05T14:18:41Z",
        "body": "> awesome, thank you!\r\n> \r\n> That's almost perfect\r\n> \r\n> The only time it fails is if you close a window and create a new one. I added\r\n> \r\n> ```\r\n> yabai -m signal --add event=application_terminated action='yabai -m window --insert stack'\r\n> yabai -m signal --add event=window_destroyed action='yabai -m window --insert stack'\r\n> ```\r\n> \r\n> and now it's working great.\r\n> \r\n> Thank you so much!\r\n\r\nDoes this still work for you? Did you add anything else? I still see that windows sometimes open not in the stack.\r\n"
      },
      {
        "user": "gennaro-tedesco",
        "created_at": "2024-11-29T08:42:39Z",
        "body": "I too see no effect in `bsp` layouts with the above configurations, namely new windows still open in a new tile (horizontal or vertical) rather than stack on the existing ones. "
      }
    ],
    "satisfaction_conditions": [
      "Automatic stacking of new windows without manual intervention",
      "Works in BSP layout while preserving multi-stack capability",
      "Handles window lifecycle events comprehensively",
      "Persistent configuration across window operations",
      "Non-disruptive to existing layout flexibility"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:01"
    }
  },
  {
    "number": 623,
    "title": "Is it possible to draw/move a window off screen?",
    "created_at": "2020-07-22T19:47:53Z",
    "closed_at": "2020-07-23T09:03:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/623",
    "body": "Hey @koekeishiya \ud83d\udc4b \r\n\r\nWondering if it's possible to intentionally draw/move an application window off the screen?  \r\nI'd like to have an application running which I can Cmd+Tab to to gain focus, but I don't want it displayed (minimization isn't an option).\r\n\r\nIf not, I'm sure I could cook up my own little patch to use personally, I just wanted to see if it was possible natively.\r\n",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/623/comments",
    "author": "cmacrae",
    "comments": [
      {
        "user": "dominiklohmann",
        "created_at": "2020-07-22T20:15:15Z",
        "body": "You can move a _floating_ window to the bottom right side of the screen such that it is barely visible.\r\n\r\n```sh\r\nyabai -m window --move abs:10000:10000\r\n```\r\n\r\nDid you consider minimizing the window using yabai, or moving it to a temporary space that you create ad-hoc?"
      },
      {
        "user": "cmacrae",
        "created_at": "2020-07-23T09:03:39Z",
        "body": "Thanks @dominiklohmann \ud83d\ude4c   \r\nI'd prefer to avoid minimize, as I effectively want to frequently give the window focus using Cmd+Tab, but not display it, and have that all happen without interrupting my current workspace/window setup (so, don't want to minimize/unminimize or switch spaces).\r\n\r\nThanks! This is good enough for me \ud83d\ude01 "
      },
      {
        "user": "dominiklohmann",
        "created_at": "2020-07-23T09:19:12Z",
        "body": "Note: If you hold <kbd>option</kbd> before releasing <kbd>command</kbd> when using <kbd>command</kbd> + <kbd>tab</kbd>, you force the target application's windows to be deminimized."
      }
    ],
    "satisfaction_conditions": [
      "Allows positioning windows completely off-screen while maintaining application focusability",
      "Avoids window minimization and space switching",
      "Maintains window presence in application switcher (Cmd+Tab)",
      "Doesn't require manual deminimization steps"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:16"
    }
  },
  {
    "number": 576,
    "title": "how to controll the second monitor?",
    "created_at": "2020-06-15T09:56:28Z",
    "closed_at": "2020-06-16T02:30:49Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/576",
    "body": "The main monitor create three desktop and I can focus them,\r\nThen I create three desktop on the second monitor But I don't kown the index of second monitor\r\nso,I can't focus them by shortcuts\r\nneed help",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/576/comments",
    "author": "Insua",
    "comments": [
      {
        "user": "koekeishiya",
        "created_at": "2020-06-15T11:20:25Z",
        "body": "The location of the space in mission-control is the index you specify to focus a space.\r\nYou can also retrieve information using the query command:\r\n```\r\n~ yabai -m query --spaces                                                                        13:18\r\n[{\r\n        \"id\":6,\r\n        \"label\":\"\",\r\n        \"index\":1,\r\n        \"display\":1,\r\n        \"windows\":[516, 171],\r\n        \"type\":\"bsp\",\r\n        \"visible\":1,\r\n        \"focused\":1,\r\n        \"native-fullscreen\":0,\r\n        \"first-window\":171,\r\n        \"last-window\":516\r\n},{\r\n        \"id\":7,\r\n        \"label\":\"\",\r\n        \"index\":2,\r\n        \"display\":1,\r\n        \"windows\":[328],\r\n        \"type\":\"bsp\",\r\n        \"visible\":0,\r\n        \"focused\":0,\r\n        \"native-fullscreen\":0,\r\n        \"first-window\":328,\r\n        \"last-window\":328\r\n},{\r\n        ...\r\n},{\r\n        \"id\":20,\r\n        \"label\":\"\",\r\n        \"index\":11,\r\n        \"display\":1,\r\n        \"windows\":[505],\r\n        \"type\":\"float\",\r\n        \"visible\":0,\r\n        \"focused\":0,\r\n        \"native-fullscreen\":1,\r\n        \"first-window\":0,\r\n        \"last-window\":0\r\n}]\r\n\r\n# use the \"index\" value to focus the space\r\n~ yabai -m space --focus 11   \r\n```"
      },
      {
        "user": "Insua",
        "created_at": "2020-06-15T14:42:01Z",
        "body": "thanks,can I put only index 2 and 6 to monitor 2,and other spaces to monitor 2"
      },
      {
        "user": "koekeishiya",
        "created_at": "2020-06-15T18:19:34Z",
        "body": "The index is controlled by macOS and cannot be changed. \r\nYou can give names to spaces by using their original index, and then refer to the name afterwards:\r\n\r\n```\r\n# set name my_space for space with mission-control index 2\r\nyabai -m space 2 --label my_space\r\n\r\n# focus space with mission-control index 2\r\nyabai -m space --focus my_space\r\n```"
      },
      {
        "user": "Insua",
        "created_at": "2020-06-16T02:30:49Z",
        "body": "> The index is controlled by macOS and cannot be changed.\r\n> You can give names to spaces by using their original index, and then refer to the name afterwards:\r\n> \r\n> ```\r\n> # set name my_space for space with mission-control index 2\r\n> yabai -m space 2 --label my_space\r\n> \r\n> # focus space with mission-control index 2\r\n> yabai -m space --focus my_space\r\n> ```\r\n\r\n\u8c22\u8c22\uff01"
      }
    ],
    "satisfaction_conditions": [
      "A method to uniquely identify and reference desktops on the second monitor without relying on macOS-controlled indexes",
      "Support for persistent desktop identification across monitor configurations",
      "Keyboard shortcut compatibility with desktop identification method",
      "Clear mapping between logical desktop groupings and physical monitors"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:29"
    }
  },
  {
    "number": 530,
    "title": "question: why is yabai asking for permission again after every update?",
    "created_at": "2020-05-20T01:35:27Z",
    "closed_at": "2020-05-20T05:59:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/530",
    "body": "why is yabai asking for permission again after every update?",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/530/comments",
    "author": "tuananh",
    "comments": [
      {
        "user": "dominiklohmann",
        "created_at": "2020-05-20T05:41:18Z",
        "body": "From the README:\r\n\r\n> **Code\u00a0Signing** When building from source (or installing from HEAD), it is recommended to codesign the binary so it retains its accessibility and automation privileges when updated or rebuilt.\r\n\r\n\r\n"
      },
      {
        "user": "tuananh",
        "created_at": "2020-05-20T05:59:26Z",
        "body": "Thanks!"
      }
    ],
    "satisfaction_conditions": [
      "Explains why system permissions are reset after software updates",
      "Identifies a method to preserve authorization settings across updates",
      "Addresses macOS security mechanisms affecting persistent permissions"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:54"
    }
  },
  {
    "number": 522,
    "title": "[Question] How to go from a vertical split to a horizontal split?",
    "created_at": "2020-05-13T14:07:31Z",
    "closed_at": "2020-05-13T14:14:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/522",
    "body": "Sorry if it's a noob question but I've been using chunkwm/yabai for ~2 years and I haven't figured this out yet.\r\n\r\nLet's say I have two windows like this:\r\n```\r\n==========================\r\n        window 1\r\n--------------------------\r\n        window 2\r\n==========================\r\n```\r\n\r\nHow can I change it to this?\r\n```\r\n==========================\r\n            |\r\n  window 1  |  window 2\r\n            |\r\n==========================\r\n```",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/522/comments",
    "author": "denisidoro",
    "comments": [
      {
        "user": "dominiklohmann",
        "created_at": "2020-05-13T14:09:09Z",
        "body": "Three ways:\r\n\r\n- `yabai -m window --toggle split`\r\n- Drag window 1 to the left quarter of window 2\r\n- Drag window 2 to the right quarter of window 1"
      },
      {
        "user": "johnallen3d",
        "created_at": "2020-05-13T14:14:43Z",
        "body": "One more (hacky) option?\r\n\r\n```\r\nyabai -m space --rotate 90\r\n```"
      },
      {
        "user": "denisidoro",
        "created_at": "2020-05-13T14:19:28Z",
        "body": "@johnallen3d thanks! this is what I used to do, but the behavior wasn't what I expected when a display has 3+ windows"
      },
      {
        "user": "johnallen3d",
        "created_at": "2020-05-13T14:20:50Z",
        "body": "Makes sense @denisidoro! I just tried out `yabai -m window --toggle split` with 3 windows. \ud83d\ude0d "
      }
    ],
    "satisfaction_conditions": [
      "Solution must allow changing window split orientation between vertical and horizontal layouts",
      "Method must work reliably with multiple windows",
      "Solution should use standard window manager functionality"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:59"
    }
  },
  {
    "number": 392,
    "title": "Move/resize named window",
    "created_at": "2020-01-29T15:37:00Z",
    "closed_at": "2020-01-29T16:17:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/392",
    "body": "The `window` command only works with the focused window as far as I can see. Is it possible to resize and move a window by `title`? \r\n\r\nSomething like `yabai -m window title=\"^MyTitle.*$\" --resize=abs:1000:1000`",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/392/comments",
    "author": "henrik242",
    "comments": [
      {
        "user": "dominiklohmann",
        "created_at": "2020-01-29T15:48:52Z",
        "body": "```sh\r\nyabai -m query --windows |\r\n  jq '.[] | select(.title | test(\"^MyTitle.*$\")).id' |\r\n  xargs -I{} yabai -m window {} --resize abs:1000:1000"
      },
      {
        "user": "henrik242",
        "created_at": "2020-01-29T15:49:12Z",
        "body": "OK, I figured it out:\r\n```\r\nWINDOW_SEL=$(yabai -m query --windows |jq '.[] | select (.title | contains(\"MyTitle\")) | .id')\r\nyabai -m window $WINDOW_SEL --resize abs:1000:1000\r\n```\r\nEDIT: Heh, you beat me to it.  Thanks!  Would have been nice with a built-in ID selector though :)"
      },
      {
        "user": "dominiklohmann",
        "created_at": "2020-01-29T17:15:06Z",
        "body": "Note that your version fails if multiple windows match the query."
      },
      {
        "user": "henrik242",
        "created_at": "2020-01-30T08:54:07Z",
        "body": "@dominiklohmann By the way, am I right to assume that I can't use `--resize` and `--move` in the same `window` message?  Right now I have issue two separate commands."
      },
      {
        "user": "koekeishiya",
        "created_at": "2020-01-30T15:04:51Z",
        "body": "> By the way, am I right to assume that I can't use --resize and --move in the same window message? Right now I have issue two separate commands.\r\n\r\nYeah, that is correct. There is no technical reason for this, it's just how I happened to write the message parsing logic. Might revisit this idea in the future, but I don't think it's a big deal.\r\nThe overhead of having to issue two separate commands is not that important considering the fact that the macOS AX API will always be the bottleneck here."
      },
      {
        "user": "dominiklohmann",
        "created_at": "2020-01-30T22:52:46Z",
        "body": "Note that you don't need to issue the query twice:\r\n\r\n```sh\r\nyabai -m query --windows |\r\n  jq '.[] | select(.title | test(\"zsh\")).id' |\r\n  xargs -L1 sh -c '\r\n    yabai -m window $0 --toggle float &&\r\n    yabai -m window $0 --resize abs:500:500\r\n  '\r\n```"
      },
      {
        "user": "henrik242",
        "created_at": "2020-01-31T06:49:19Z",
        "body": "@dominiklohmann I guess whether that is only one command or not is a matter of opinion ;) "
      },
      {
        "user": "tophee",
        "created_at": "2022-08-15T07:41:04Z",
        "body": "I've spent quite some time trying to figure this one out. I somehow thought it could be done with a rule, but then I couldn't figure out how to trigger the rule... Anyway, I agree that it would be nice to have a simpler command for selecting named windows, i.e. something similar to how rules work.\r\n\r\nFor example, instead of \r\n~~~\r\nyabai -m query --windows |\r\n  jq '.[] | select(.title | test(\"^MyTitle.*$\")).id' |\r\n  xargs -I{} yabai -m window {} --resize abs:1000:1000\r\n~~~\r\n\r\nsomething like \r\n~~~\r\nyabai -m window title=\"^MyTitle.*$\" --resize abs:1000:1000\r\n~~~\r\n\r\nEdit: I just realized that I provided the exact same example as OP. LOL. That just shows how intuitive that feature would be..."
      },
      {
        "user": "koekeishiya",
        "created_at": "2022-08-25T02:18:05Z",
        "body": "> something like\r\n> `yabai -m window title=\"^MyTitle.*$\" --resize abs:1000:1000`\r\n\r\nThe \"problem\" with this syntax is that there are a lot of properties (and combinations of properties) that may be interesting to filter by, and mixing it straight into the command structure like this makes it both complicated to read, and potentially to parse. \r\n\r\nIf filters are allowed in-place instead of a `WINDOW_SEL`, then it would have to be allowed every place that currently allows a `WINDOW_SEL`, to maintain consistency (and simplicity) in the CLI.\r\n\r\nIn theory that means that the parser would have to allow for, and understand, something like the following (even though it might not make sense from a practical pov):\r\n`yabai -m window title=\"^MyTitle.*$\" app=\"^MyApp.*$\" space=1 --swap title=\"^OtherTitle.*$\" app=\"^OtherApp.*$\" space=2`\r\n\r\nI think the above command would be ambiguous from a parser pov, unless extra context is given. Not saying that it would be impossible, but I think it makes things a lot more complex both from a user pov and certainly from an implementation-pov.\r\n\r\nThe thing that is great about the current design (in my opinion anyway) is that you know how to issue commands that affect certain entities (windows, spaces, displays) using very simple syntax, and when more complex needs arises, there is a standard way to retrieve the information that you need to script that behaviour.\r\n"
      },
      {
        "user": "tophee",
        "created_at": "2022-08-25T07:05:34Z",
        "body": "Thanks a lot for explaining. It makes more sense now. I am looking at this from the perspective of someone who is not a software engineer and who has just started using yabai. I can't tell, at this point, whether I would prioritize consistency over ease of use, but if that's what you want to do, that's obviously fine. \r\n\r\nFrom my perspective, another way of making yabai easier to use would be to simply highlight this design decision in the documentation. Of course, you can say that all the information is already there, but it still took me quite a while to figure out the importance of the query command. As someone who is getting started with yabai, it felt like that would be for more sophisticated setups so it didn't occur to me for a while that I really need to jump through that hoop to select a window by its title. So I think it might help users to have that clarified more explictly early on in the docs, even if it may seem redundant to more experienced users.\r\n\r\nAs I think more about it, I think I might be able to turn around your consistency argument to argue for a simplification of selecting named windows: what about allowing labels for windows? Why should `WINDOW_SEL` not accept `LABEL`? If that were added, it would at least allow us to query windows once, label them, and then refer to them via their label...\r\n\r\n \r\n\r\n"
      },
      {
        "user": "koekeishiya",
        "created_at": "2022-08-25T13:15:16Z",
        "body": "> Thanks a lot for explaining. It makes more sense now. I am looking at this from the perspective of someone who is not a software engineer and who has just started using yabai. I can't tell, at this point, whether I would prioritize consistency over ease of use, but if that's what you want to do, that's obviously fine.\r\n\r\nI think it is important to have an interface that is easy-to-understand in terms how to do things. I agree that adding a single option that would let you select a window by its title as proposed is easier for the specific thing you are trying to do here, but from an overall design pov it makes things more unclear; as in there are now multiple ways of doing the same thing, but only when some properties are applied -- it makes the interface convoluted over time.\r\n\r\n> From my perspective, another way of making yabai easier to use would be to simply highlight this design decision in the documentation. Of course, you can say that all the information is already there, but it still took me quite a while to figure out the importance of the query command. As someone who is getting started with yabai, it felt like that would be for more sophisticated setups so it didn't occur to me for a while that I really need to jump through that hoop to select a window by its title. So I think it might help users to have that clarified more explictly early on in the docs, even if it may seem redundant to more experienced users.\r\n\r\nI agree that it could certainly be outlined with more info/samples in the wiki, but it is not really high on my priority list. I don't spend too much time on this project these days, and would rather do programming when I do make time for it. The wiki used to be open for the community to edit, but people made changes that made things incorrect, and I would have to spend a lot of time to continually review changes (and revert some of them), which is why I locked it down.\r\n\r\n> As I think more about it, I think I might be able to turn around your consistency argument to argue for a simplification of selecting named windows: what about allowing labels for windows? Why should WINDOW_SEL not accept LABEL? If that were added, it would at least allow us to query windows once, label them, and then refer to them via their label...\r\n\r\nNo reason really, I just haven't implemented it yet. For consistency reasons, as you mention, it should be possible to allow labelling both windows and displays as well (all \"entities\"). The labelling spaces thing was added as a quick experimental thing, and the label-system is not completely fleshed out yet. I believe there are some open issues regarding it and allowing for default labels when none are specified and so on. No ETA for when that will be a priority though."
      }
    ],
    "satisfaction_conditions": [
      "Ability to target windows by title/properties without requiring manual ID querying",
      "Support for handling multiple matching windows",
      "Clear documentation about window selection methodology",
      "Atomic operations combining multiple actions (resize+move)",
      "Consistent interface for entity selection across commands"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:27"
    }
  },
  {
    "number": 273,
    "title": "Question: Is it possible to navigate windows in Mission Control?",
    "created_at": "2019-10-08T19:26:55Z",
    "closed_at": "2019-10-12T15:27:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/koekeishiya/yabai/issues/273",
    "body": "I'd like to be able to use the arrow keys to focus different windows in mission control (moving north, south, east, west). I know macos doesn't provide keybindings for this. Is it possible to implement with yabai?",
    "comments_url": "https://api.github.com/repos/koekeishiya/yabai/issues/273/comments",
    "author": "Tylerc230",
    "comments": [
      {
        "user": "dominiklohmann",
        "created_at": "2019-10-08T20:21:32Z",
        "body": "The tricky part about this isn't focusing the windows, but making the keyboard shortcuts available only while Mission Control is active.\r\n\r\nHere's a three-step solution:\r\n- Create a signal for `event=mission_control_enter` that creates a file containing your keyboard shortcuts  to be used by `skhd` (e.g., `~/.config/yabai/mission-control.skhd`)\r\n- Create a signal for `event=mission_control_exit` that empties that file.\r\n- Hotload the temporary file in your `skhdrc` file using `.load ~/.config/yabai/mission-control.skhd`. \r\n\r\nThe keyboard shortcuts going into that temporary file should be something like this.\r\n\r\n```\r\nup : yabai -m window --focus north\r\n```\r\n\r\nNote though that `north` here means northward of the currently focused window as if it was still tiled and only focuses other tiled windows. Mission Control doesn't actually change the windows position and size, but rather applies a visual transformation to all windows. This will work best with *Group windows by application* being disabled in the Mission Control preferences.\r\n\r\nIf you want to include floating windows in your focus cycle, I encourage you to use a mix of window queries and `jq` filters for doing your own logic. The below might serve as inspiration.\r\n\r\n```\r\nshift - tab : yabai -m query --spaces | jq -re \".[] | select(.visible == 1).index\" | xargs -I{} yabai -m query --windows --space {} | jq -sre \"add | sort_by(.display, .frame.x, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id\" | xargs -I{} yabai -m window --focus {}\r\ntab : yabai -m query --spaces | jq -re \".[] | select(.visible == 1).index\" | xargs -I{} yabai -m query --windows --space {} | jq -sre \"add | sort_by(.display, .frame.x, .frame.y, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id\" | xargs -I{} yabai -m window --focus {}\r\n```"
      },
      {
        "user": "Tylerc230",
        "created_at": "2019-10-12T15:27:33Z",
        "body": "Great I didn't realize I could use --focus to navigate mission control. The blue mission control border/highlight doesn't show up on the mission control thumbnails but not a big issue. Thanks!"
      },
      {
        "user": "dominiklohmann",
        "created_at": "2019-10-12T15:57:02Z",
        "body": "@Tylerc230 if you enable *mouse follows focus* you'll get the blue borders as well. You can enable it in the `event=mission_control_enter` signal and disable it again in the `event=mission_control_exit` signal if you don't want to use it all the time."
      }
    ],
    "satisfaction_conditions": [
      "Enable directional window focus navigation using arrow keys in Mission Control",
      "Context-aware activation of keybindings only during Mission Control",
      "Maintain visual focus indicators during navigation",
      "Handle both tiled and floating window management",
      "Work with native Mission Control preferences"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:47"
    }
  }
]