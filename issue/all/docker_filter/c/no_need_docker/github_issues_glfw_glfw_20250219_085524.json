[
  {
    "number": 929,
    "title": "mac port cmake find_package(glfw3 REQUIRED) does not init INCLUDE_DIR or LIBRARY_DIR variables",
    "created_at": "2017-01-06T03:21:04Z",
    "closed_at": "2017-01-06T13:48:36Z",
    "labels": [
      "question",
      "build"
    ],
    "url": "https://github.com/glfw/glfw/issues/929",
    "body": "I'm trying to use glfw3 3.2.1 and when I run the following cmake init it successfully finds the glfw3 package but does not seem to initialize the expected include or library variables.\r\n```\r\ncmake_minimum_required(VERSION 3.7)\r\nPROJECT(test)\r\nfind_package(glfw3 REQUIRED)\r\nADD_EXECUTABLE(test test.cpp)\r\n```\r\nRunning make leads to\r\n```\r\nfatal error: 'GLFW/glfw3.h' file not found\r\n```\r\nWhat am I missing?",
    "comments_url": "https://api.github.com/repos/glfw/glfw/issues/929/comments",
    "author": "gentili",
    "comments": [
      {
        "user": "gentili",
        "created_at": "2017-01-06T03:23:16Z",
        "body": "OSX Sierra 10.12.2\r\nMacPorts 2.3.5\r\ncmake 3.7.1\r\nglfw3 3.2.1 "
      },
      {
        "user": "zao",
        "created_at": "2017-01-06T06:56:52Z",
        "body": "In short: `target_link_libraries(your_target PRIVATE glfw)`\r\n\r\nExported targets like the ones defined by the GLFW3 CMake files expose the include paths and the libraries to link as properties on the imported `glfw` target. In modern CMake, such things are defined on a per-target basis instead of polluting the scoped global compiler and linker parameters.\r\n\r\nAs a side note, `test` is a reserved target name by CMake, you should probably name your sample ones something less conflicting."
      },
      {
        "user": "gentili",
        "created_at": "2017-01-06T13:48:36Z",
        "body": "Worked like a charm.  I had tried target_link_libraries(thing glfw3) without success.\r\n\r\nSide note: Yes I just inserted 'test' in the example; it's not the actual project name.\r\n\r\nThank you very much for the assistance!"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to properly link GLFW3 libraries using CMake's target-based approach",
      "Clarification of the correct target name exposed by GLFW3's CMake configuration",
      "Demonstration of propagating include directories through target linking",
      "Explanation of modern CMake practices vs legacy variable-based approaches"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:15"
    }
  }
]