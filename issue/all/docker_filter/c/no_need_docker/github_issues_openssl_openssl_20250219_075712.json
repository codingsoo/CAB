[
  {
    "number": 21330,
    "title": "No pointer check for NULL before it is dereferenced in evp_pkey_asn1_ctrl",
    "created_at": "2023-06-30T12:55:41Z",
    "closed_at": "2023-07-07T09:08:15Z",
    "labels": [
      "help wanted",
      "triaged: feature"
    ],
    "url": "https://github.com/openssl/openssl/issues/21330",
    "body": "OpenSSL 3.0.7\r\n\r\nIn function evp_pkey_asn1_ctrl, there is no pointer check to NULL before it is dereferenced. This function is used in functions\r\nEVP_PKEY_set1_encoded_public_key, EVP_PKEY_get1_encoded_public_key, EVP_PKEY_get_default_digest_nid. \r\nFunctions EVP_PKEY_set1_encoded_public_key and EVP_PKEY_get1_encoded_public_key are deprecated in OpenSSL 3.0, but function EVP_PKEY_get_default_digest_nid can be used. In EVP_PKEY_get_default_digest_nid (and other depreceted functions) can be passed NULL as the 1st argument, next this NULL pointer is passed as 1st argument in call to function evp_pkey_asn1_ctrl, where it is dereferenced.\r\n\r\nMaybe need to add a check EVP_PKEY *pkey to NULL in a function evp_pkey_asn1_ctrl and return -2 if it equal NULL?",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/21330/comments",
    "author": "nv-dmd",
    "comments": [
      {
        "user": "nv-dmd",
        "created_at": "2023-07-05T07:13:39Z",
        "body": "What about this issuer? Can I make PR?"
      },
      {
        "user": "t8m",
        "created_at": "2023-07-05T10:45:28Z",
        "body": "We do not do similar NULL checks in other similar functions. I am not sure this is really worth it."
      },
      {
        "user": "nv-dmd",
        "created_at": "2023-07-06T12:28:07Z",
        "body": "Maybe then add a check to NULL the 1st argument in the functions EVP_PKEY_set1_encoded_public_key, EVP_PKEY_get1_encoded_public_key, EVP_PKEY_get_default_digest_nid and return 0 if equal NULL?"
      },
      {
        "user": "paulidale",
        "created_at": "2023-07-07T02:55:40Z",
        "body": "That would be okay I think."
      },
      {
        "user": "nv-dmd",
        "created_at": "2023-07-07T09:08:15Z",
        "body": "Sorry. I missed that this issue has already been fixed in the pull request #20294. \r\nClose this issue/"
      }
    ],
    "satisfaction_conditions": [
      "Ensures NULL pointer checks exist in functions that could receive NULL arguments",
      "Maintains consistency with OpenSSL's error handling patterns",
      "Provides clear validation for deprecated functions' input parameters",
      "Confirms resolution through existing project maintenance processes"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:03:44"
    }
  },
  {
    "number": 10060,
    "title": "Consistent formatting of I<a:b> in manpages",
    "created_at": "2019-09-30T16:51:47Z",
    "closed_at": "2020-11-18T18:38:00Z",
    "labels": [
      "help wanted",
      "triaged: documentation"
    ],
    "url": "https://github.com/openssl/openssl/issues/10060",
    "body": "Many of our commands take a key/value pair -- host:port, opt:value, etc.\r\n\r\nThe proper formatting of this is apparently ```I<first>:I<second>```\r\n\r\nWhile fixing those, should we also standardize on the terminology?  I see ```opt:value``` ```hostname:port``` ```paramset:X``` etc.  (Most of these you will not see until #10022 is merged).",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/10060/comments",
    "author": "richsalz",
    "comments": [
      {
        "user": "levitte",
        "created_at": "2019-09-30T17:33:56Z",
        "body": "I have to revise that what I said earlier. From careful read of man(1), it turns out that all parts of a command that should be typed in exactly as is should be bold. Therefore, `I<first>B<:>I<second>`.\r\n\r\n(the question of variable option names is separate, FYI) "
      },
      {
        "user": "richsalz",
        "created_at": "2020-11-18T18:38:00Z",
        "body": "I think @levitte and I fixed this now, closing.  Richard, please re-open if there's still some nits.\r\n"
      }
    ],
    "satisfaction_conditions": [
      "Adherence to manpage formatting conventions for key/value pairs"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:04:20"
    }
  },
  {
    "number": 8394,
    "title": "const mismatch between ",
    "created_at": "2019-03-04T13:21:26Z",
    "closed_at": "2020-12-24T12:21:30Z",
    "labels": [
      "good first issue",
      "help wanted",
      "triaged: feature"
    ],
    "url": "https://github.com/openssl/openssl/issues/8394",
    "body": "The PKCS8_pkey_get0_attrs function returns const STACK_OF(X509_ATTRIBUTE) and there is no non-const variant of this function.\r\nThe X509at_get0_data_by_OBJ accepts STACK_OF(X509_ATTRIBUTE)\r\n",
    "comments_url": "https://api.github.com/repos/openssl/openssl/issues/8394/comments",
    "author": "beldmit",
    "comments": [
      {
        "user": "levitte",
        "created_at": "2019-11-05T14:05:34Z",
        "body": "Without looking, I would think of constifying the argument to `X509at_get0_data_by_OBJ` before anything else, if that's possible."
      },
      {
        "user": "akshit-akhoury",
        "created_at": "2020-10-02T15:55:34Z",
        "body": "Hey, if the ask is to set the arguments of `X509at_get0_data_by_OBJ ` to accept const STACK_OF(X509_ATTRIBUTE), I think I can make this change.\r\n"
      },
      {
        "user": "mattcaswell",
        "created_at": "2020-10-02T15:59:10Z",
        "body": "> Hey, if the ask is to set the arguments of X509at_get0_data_by_OBJ to accept const STACK_OF(X509_ATTRIBUTE), I think I can make this change.\r\n\r\nYes please!"
      },
      {
        "user": "akshit-akhoury",
        "created_at": "2020-10-02T17:19:36Z",
        "body": "Hey, I've created a PR, wasn't sure if this change required either update of docs or tests."
      },
      {
        "user": "beldmit",
        "created_at": "2020-12-24T12:21:29Z",
        "body": "Fixed by #13062"
      }
    ],
    "satisfaction_conditions": [
      "Resolve const-correctness mismatch between PKCS8_pkey_get0_attrs and X509at_get0_data_by_OBJ",
      "Maintain API functionality while ensuring type consistency",
      "Avoid introducing breaking changes to existing interfaces"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:04:29"
    }
  }
]