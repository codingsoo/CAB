{
  "number": 680,
  "title": "Pipe log to GoAccess not working in cronjob without hyphen",
  "created_at": "2017-03-07T15:24:19Z",
  "closed_at": "2017-03-07T15:51:38Z",
  "labels": [
    "question",
    "log-processing"
  ],
  "url": "https://github.com/allinurl/goaccess/issues/680",
  "body": "**In Cronjob:**\r\nIn version 1.1.1 the following call worked in cronjob:\r\n`zgrep -h '\\[07/Mar/2017' /var/log/apache2/access.log.gz |  goaccess --no-progress -q > /path/to/file.html`\r\n\r\nIn version 1.2 this call works only when I insert a hyphen to goaccess:\r\n`zgrep -h '\\[07/Mar/2017' /var/log/apache2/access.log.gz |  goaccess - --no-progress -q > /path/to/file.html`\r\nIf the hyphen is not used, I get the help output (goaccess without args)\r\n\r\n**Terminal**\r\nIn bash terminal both variants work well\r\n\r\nThanks",
  "comments_url": "https://api.github.com/repos/allinurl/goaccess/issues/680/comments",
  "author": "spy1986",
  "comments": [
    {
      "user": "allinurl",
      "created_at": "2017-03-07T15:30:57Z",
      "body": "Thanks for reporting this. The hyphen is now required in v1.2 if used from the cron. This fixes #647."
    },
    {
      "user": "spy1986",
      "created_at": "2017-03-07T15:46:14Z",
      "body": "Ok, Thanks"
    },
    {
      "user": "TCB13",
      "created_at": "2017-04-01T17:49:59Z",
      "body": "~@allinurl is this supposed to happen even indirectly? I'm using cron to run a bash script that will run `goaccess` and I have this issue... See #711. Thank you!~\r\n\r\n**Nevermind, exactly my issue at #647 and already answered!**"
    }
  ],
  "satisfaction_conditions": [
    "Explanation of why GoAccess v1.2 requires a hyphen when used in cronjobs but not in interactive terminals",
    "Clarification of version-specific changes in argument handling for non-interactive environments",
    "Identification of environment-specific requirements for piping data to GoAccess"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-04-05 00:00:10"
  },
  "git_commit_info": {
    "sha": "64aeaae3945de6649d76623cba143bb2ac423f61",
    "date": "2013-07-30T13:17:44Z",
    "message": "Make certain the active module label is freed",
    "author": "Gerardo Orellana"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-a013f8b3d0fa3821a2ce812f8f16c7be8b25db14.pack\n./.git/objects/pack/pack-a013f8b3d0fa3821a2ce812f8f16c7be8b25db14.rev\n./.git/objects/pack/pack-a013f8b3d0fa3821a2ce812f8f16c7be8b25db14.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/master\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/master\n./.git/logs/HEAD\n./.git/index\n./AUTHORS\n./COPYING\n./ChangeLog\n./Makefile.am\n./NEWS\n./README\n./README.md\n./TODO\n./commons.c\n./commons.h\n./configure.ac\n./error.c\n./error.h\n./gdashboard.c\n./gdashboard.h\n./gdns.c\n./gdns.h\n./gmenu.c\n./gmenu.h\n./goaccess.1\n./goaccess.c\n./goaccess.h\n./output.c\n./output.h\n./parser.c\n./parser.h\n./settings.c\n./settings.h\n./ui.c\n./ui.h\n./util.c\n./util.h\n./xmalloc.c\n./xmalloc.h\n",
    "readme": "\n--- ./README ---\nWhat is it?\n-------------\nGoAccess is an open source real-time web log analyzer \nand interactive viewer that runs in a terminal in *nix systems. \nIt provides fast and valuable HTTP statistics for system \nadministrators that require a visual server report on the fly.\n\nFeatures\n-------------------------------\nGoAccess parses the specified web log file and \noutputs the data to the X terminal. Features include:\n\n   * General Statistics, bandwidth etc.\n   * Top Visitors\n   * Requested files\n   * Requested static files, images, swf, js, etc.\n   * Referrers URLs\n   * 404 or Not Found\n   * Operating Systems\n   * Browsers and Spiders\n   * Hosts, Reverse DNS, IP Location\n   * HTTP Status Codes\n   * Referring Sites\n   * Keyphrases\n   * Support for IPv6\n   * Different Color Schemes\n   * Unlimited log file size\n   * Custom log format\n   * Output statistics to a file.\n\nNearly all web log formats...\n\nGoAccess allows any custom log format string.\nPredefined options include, but not limited to:\n\n   * Common Log Format (CLF) Apache\n   * Combined Log Format (XLF/ELF) Apache\n   * W3C format (IIS).\n   * Apache virtual hosts\n\nWhy GoAccess?\n-------------\nThe main idea behind GoAccess is being able to quickly \nanalyze and view web server statistics in real time \nwithout having to generate an HTML report. \nAlthough it is possible to generate an HTML report, \nby default it outputs to a terminal.\n\nYou can see it more as a monitor command tool than anything else.\n\nKeys\n----\nThe user can make use of the following keys:\n\n   * ^F1^ or ^CTRL^ + ^h^ [main help]\n   * ^F5^    redraw [main window]\n   * ^q^     quit the program, current window or module\n   * ^o^  or ^ENTER^  expand selected module\n   * ^j^     scroll down within expanded module\n   * ^k^     scroll up within expanded module\n   * ^c^     set or change scheme color\n   \" ^CTRL^ + ^f^ scroll forward one screen within\n   \"         active module\n   \" ^CTRL^ + ^b^ scroll backward one screen within\n   \"         active module\n   * ^TAB^   iterate modules (forward)\n   * ^SHIFT^ + ^TAB^ iterate modules (backward)\n   * ^0-9^   select module so the user can expand\n   *         module pressing ^ENTER^\n   * ^s^     sort options for current module\n   * ^/^     search across all modules\n   * ^n^     find position of the next occurrence\n   * ^g^     move to the first item or top of screen\n   * ^G^     move to the last item or bottom of screen\n\n\n\n--- ./README.md ---\nGoAccess\n========\n\nWhat is it?\n-------------\nGoAccess is an open source **real-time web log analyzer** and interactive viewer that **runs in a terminal in *nix systems**. It provides fast and valuable HTTP statistics for system administrators that require a visual server report on the fly.\nMore info at: http://goaccess.prosoftcorp.com/ \n\n![GoAccess Main Dashboard](http://goaccess.prosoftcorp.com/images/goaccess_screenshot1M-03L.png?1373815595)\n\nFeatures\n----------\nGoAccess parses the specified web log file and outputs the data to the X terminal. Features include:\n\n* General Statistics, bandwidth etc.\n* Time taken to serve the request\n* Top Visitors\n* Requested files\n* Requested static files, images, swf, js, etc.\n* Referrers URLs\n* 404 or Not Found\n* Operating Systems\n* Browsers and Spiders\n* Hosts, Reverse DNS, IP Location\n* HTTP Status Codes\n* Referring Sites\n* Keyphrases\n* Support for IPv6\n* Different Color Schemes\n* Unlimited log file size\n* Custom log format\n* Output statistics to a file.\n\n### Nearly all web log formats... ###\nGoAccess allows any custom log format string. Predefined options include, but not limited to:\n\n* Common Log Format (CLF) Apache\n* Combined Log Format (XLF/ELF) Apache\n* W3C format (IIS).\n* Amazon CloudFront (Download Distribution).\n* Apache virtual hosts\n\nWhy GoAccess?\n-------------\nThe main idea behind GoAccess is being able to quickly analyze and view web server statistics in real time without having to generate an HTML report. Although it is possible to generate an HTML report, by default it outputs to a terminal.\n\nYou can see it more as a monitor command tool than anything else.\n\nInstallation\n------------\nGoAccess can be compiled and used on Linux, OSX, OpenBSD, NetBSD, FreeBSD.\n\nBriefly, the shell commands `./configure; make; make install` should configure, build, and install GoAccess.\nAn INSTALL file is attached within the package for more-detailed instructions. \n\nhttp://goaccess.prosoftcorp.com/download#installation\n\nUsage\n-----\nThe simplest and fastest usage would be:\n\n    # goaccess -f access.log\n    \nThat will generate an interactive text-only output.\n\nTo generate an HTML report:\n\n    # goaccess -f access.log -a > report.html\n    \nTo generate full statistics we can run GoAccess as:\n\n    # goaccess -f access.log -a\n\nThe `-a` flag indicates that we want to process an agent-list for every host parsed. The `-c` flag will prompt the date and log format configuration window. Only when curses is initialized.\n\nNow if we want to add more flexibility to GoAccess, we can do a series of pipes. For instance:\n\nIf we would like to process all `access.log.*.gz` we can do:\n\n    # zcat access.log.*.gz | goaccess \n    OR\n    # zcat -f access.log* | goaccess\n    \nAnother useful pipe would be filtering dates out of the web log\n\nThe following will get all HTTP requests starting on 05/Dec/2010 until the end of the file.\n\n    # sed -n '/05\\/Dec\\/2010/,$ p' access.log | goaccess -a\n\nFor more examples, please check GoAccess' man page: \nhttp://goaccess.prosoftcorp.com/man\n\n\nEnjoy!\n\n\n",
    "readme_filenames": [
      "./README",
      "./README.md"
    ]
  },
  "llm_calls_before_build": 20,
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM debian:buster-slim\n\n# Install system dependencies required for building GoAccess\nRUN apt-get update && \\\n    apt-get install -y \\\n    build-essential \\\n    autoconf \\\n    automake \\\n    libncursesw5-dev \\\n    libgeoip-dev \\\n    git \\\n    pkg-config \\\n    libglib2.0-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Clone repository and checkout specific commit with pipe fix\nWORKDIR /goaccess\nRUN git clone https://github.com/allinurl/goaccess.git . && \\\n    git checkout 64aeaae3945de6649d76623cba143bb2ac423f61\n\n# Build and install GoAccess with default UTF8 configuration\nRUN autoreconf -fiv && \\\n    ./configure --enable-utf8 && \\\n    make && \\\n    make install\n\n# Clean up build artifacts while keeping runtime dependencies\nWORKDIR /\nRUN rm -rf /goaccess && \\\n    apt-get purge -y build-essential autoconf automake git && \\\n    apt-get autoremove -y && \\\n    rm -rf /var/lib/apt/lists/*",
  "dockerfile_build_success": true,
  "successful_candidate_index": 1,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "llm_calls_total": 25
}