{
  "number": 48,
  "title": "Huge Memory & CPU Usage",
  "created_at": "2015-08-13T12:26:10Z",
  "closed_at": "2015-08-22T13:40:45Z",
  "labels": [
    "question"
  ],
  "url": "https://github.com/litedb-org/LiteDB/issues/48",
  "body": "Hello,\n\nI compared three versions of a test application. I saved a lot (10^7) objects of a type with three properties of type double.\nThe first version was coded with saving to a file with json serialization (Newtonsoft Json). The second was with litedb. The third with simply saving to a txt-File (File.WriteAllLines).\n\nCode LiteDB:\n\n```\n// Open database (or create if not exits)\nusing(var db = new LiteDatabase(@\".\\LiteDB.db\"))\n{\n    // Get customer collection\n    var col = db.GetCollection<Node>(\"nodes\");\n    col.Insert(nodes);\n}\n```\n\nThe results are:\n\n| Version | Memory Usage | Disk Space Usage | Time Needed [ms] |\n| --- | --- | --- | --- |\n| Newtonsoft Json | ~500MB | 673MB | 68,630ms |\n| LiteDB | ~6 675MB | 3 476MB | 497,464ms |\n| Text File | ~500MB | 950MB | 38,913ms |\n\nIs there a faster way of saving bigger datas?\n",
  "comments_url": "https://api.github.com/repos/litedb-org/LiteDB/issues/48/comments",
  "author": "KeKl",
  "comments": [
    {
      "user": "mbdavid",
      "created_at": "2015-08-13T23:32:27Z",
      "body": "Hi @KeKl, thanks for your comment.\n\nPerformance and memory use drops in LiteDB when you are working with huge mass of data. This reason is because LiteDB implement a full transaction and journal backup save. Transactions are memory only (thats why use too many memory) and journal write in disk twice.\n\nTo works fast with huge data in LiteDB, try to use:\n\n``` C#\nusing(var db = new LiteDatabase(@\"filename=.\\LiteDB.db; journal=false\"))\n{\n    var col = db.GetCollection<Node>(\"nodes\");\n    col.InsertBulk(nodes);\n}\n```\n- `nodes` var must returns and `IEnumerable<Node>` and will be better if uses `yield return`\n\nThis code must run fast, but never as Newtonsoft or Text File. LiteDB implements indexes (at least _id index), data in pages, and has a much more complex data structure.\n\nI have some plans to remove some features (like transactions and journals) in prior be simple, less memory usage and faster.\n"
    },
    {
      "user": "KeKl",
      "created_at": "2015-08-22T13:40:45Z",
      "body": "Hi @mbdavid,\n\nthank you for your answer.\n\nI tested also your implementation. It\u00b4s faster.\n\nThank you!\n\nRegards,\nKevin\n"
    }
  ],
  "satisfaction_conditions": [
    "Demonstrates LiteDB performance optimization strategies for large datasets",
    "Addresses transaction/memory overhead in data persistence",
    "Provides bulk data insertion methodology",
    "Compares tradeoffs between data safety and performance"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-03-21 18:18:15"
  },
  "git_commit_info": {
    "sha": "71ff9c93810f2edbe6c04e08f32ab9f491959923",
    "date": "2015-07-26T22:51:55Z",
    "message": "Merge pull request #47 from rdstevens/master\n\nAdded DropCollection unit test.",
    "author": "Mauricio David"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-17ac4e3dfea954c34f187955a8e6452e9aeef990.pack\n./.git/objects/pack/pack-17ac4e3dfea954c34f187955a8e6452e9aeef990.rev\n./.git/objects/pack/pack-17ac4e3dfea954c34f187955a8e6452e9aeef990.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/master\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/master\n./.git/logs/HEAD\n./.git/index\n./LiteDB.Shell\n./LiteDB.Shell/Commands\n./LiteDB.Shell/Commands/Close.cs\n./LiteDB.Shell/Commands/Comment.cs\n./LiteDB.Shell/Commands/Ed.cs\n./LiteDB.Shell/Commands/Help.cs\n./LiteDB.Shell/Commands/Open.cs\n./LiteDB.Shell/Commands/Pretty.cs\n./LiteDB.Shell/Commands/Quit.cs\n./LiteDB.Shell/Commands/Run.cs\n./LiteDB.Shell/Commands/Spool.cs\n./LiteDB.Shell/Commands/Timer.cs\n./LiteDB.Shell/Commands/Version.cs\n./LiteDB.Shell/App.config\n./LiteDB.Shell/ConsoleCommand.cs\n./LiteDB.Shell/Display.cs\n./LiteDB.Shell/InputCommand.cs\n./LiteDB.Shell/LiteDB.Shell.csproj\n./LiteDB.Shell/Program.cs\n./LiteDB.Shell/Properties\n./LiteDB.Shell/Properties/AssemblyInfo.cs\n./LiteDB\n./LiteDB/Document\n./LiteDB/Document/BsonArray.cs\n./LiteDB/Document/BsonDocument.cs\n./LiteDB/Document/BsonType.cs\n./LiteDB/Document/BsonValue.cs\n./LiteDB/Document/ObjectId.cs\n./LiteDB/Utils\n./LiteDB/Utils/BinaryExtensions.cs\n./LiteDB/Utils/BinaryReaderExtensions.cs\n./LiteDB/Utils/BinaryWriterExtensions.cs\n./LiteDB/Utils/ConnectionString.cs\n./LiteDB/Utils/DictionaryExtensions.cs\n./LiteDB/Utils/DumpDatabase.cs\n./LiteDB/Utils/IOExceptionExtensions.cs\n./LiteDB/Utils/LiteException.cs\n./LiteDB/Utils/MimeTypeConverter.cs\n./LiteDB/Utils/StringScanner.cs\n./LiteDB/Database\n./LiteDB/Database/Collections\n./LiteDB/Database/Collections/Delete.cs\n./LiteDB/Database/Collections/Drop.cs\n./LiteDB/Database/Collections/Find.cs\n./LiteDB/Database/Collections/FindIndex.cs\n./LiteDB/Database/Collections/Include.cs\n./LiteDB/Database/Collections/Index.cs\n./LiteDB/Database/Collections/Insert.cs\n./LiteDB/Database/Collections/InsertBulk.cs\n./LiteDB/Database/Collections/LiteCollection.cs\n./LiteDB/Database/Collections/Update.cs\n./LiteDB/Database/FileStorage\n./LiteDB/Database/FileStorage/LiteFileInfo.cs\n./LiteDB/Database/FileStorage/LiteFileStorage.cs\n./LiteDB/Database/FileStorage/LiteFileStream.cs\n./LiteDB/Database/LiteDatabase.cs\n./LiteDB/Database/Tools\n./LiteDB/Database/Tools/DbRef.cs\n./LiteDB/Database/Tools/GetDatabaseInfo.cs\n./LiteDB/Database/Tools/RunCommand.cs\n./LiteDB/Database/Tools/UserVersion.cs\n./LiteDB/LiteDB.csproj\n./LiteDB/Properties\n./LiteDB/Properties/AssemblyInfo.cs\n./LiteDB/Query\n./LiteDB/Query/Impl\n./LiteDB/Query/Impl/QueryAll.cs\n./LiteDB/Query/Impl/QueryAnd.cs\n./LiteDB/Query/Impl/QueryBetween.cs\n./LiteDB/Query/Impl/QueryContains.cs\n./LiteDB/Query/Impl/QueryEquals.cs\n./LiteDB/Query/Impl/QueryGreater.cs\n./LiteDB/Query/Impl/QueryIn.cs\n./LiteDB/Query/Impl/QueryLess.cs\n./LiteDB/Query/Impl/QueryNot.cs\n./LiteDB/Query/Impl/QueryOr.cs\n./LiteDB/Query/Impl/QueryStartsWith.cs\n./LiteDB/Query/Linq\n./LiteDB/Query/Linq/QueryVisitor.cs\n./LiteDB/Query/Query.cs\n./LiteDB/Serializer\n./LiteDB/Serializer/Bson\n./LiteDB/Serializer/Bson/BsonReader.cs\n./LiteDB/Serializer/Bson/BsonSerializer.cs\n./LiteDB/Serializer/Bson/BsonWriter.cs\n./LiteDB/Serializer/Json\n./LiteDB/Serializer/Json/JsonReader.cs\n./LiteDB/Serializer/Json/JsonSerializer.cs\n./LiteDB/Serializer/Json/JsonTokenizer.cs\n./LiteDB/Serializer/Json/JsonWriter.cs\n./LiteDB/Serializer/Mapper\n./LiteDB/Serializer/Mapper/AutoId.cs\n./LiteDB/Serializer/Mapper/BsonFieldAttribute.cs\n./LiteDB/Serializer/Mapper/BsonIdAttribute.cs\n./LiteDB/Serializer/Mapper/BsonIgnoreAttribute.cs\n./LiteDB/Serializer/Mapper/BsonIndexAttribute.cs\n./LiteDB/Serializer/Mapper/BsonMapper.Deserialize.cs\n./LiteDB/Serializer/Mapper/BsonMapper.Serialize.cs\n./LiteDB/Serializer/Mapper/BsonMapper.cs\n./LiteDB/Serializer/Mapper/PropertyMapper.cs\n./LiteDB/Serializer/Mapper/Reflection.cs\n./LiteDB/Shell\n./LiteDB/Shell/Commands\n./LiteDB/Shell/Commands/Collections\n./LiteDB/Shell/Commands/Collections/BaseCollection.cs\n./LiteDB/Shell/Commands/Collections/Bulk.cs\n./LiteDB/Shell/Commands/Collections/Count.cs\n./LiteDB/Shell/Commands/Collections/Delete.cs\n./LiteDB/Shell/Commands/Collections/Drop.cs\n./LiteDB/Shell/Commands/Collections/DropIndex.cs\n./LiteDB/Shell/Commands/Collections/EnsureIndex.cs\n./LiteDB/Shell/Commands/Collections/Exec.cs\n./LiteDB/Shell/Commands/Collections/Find.cs\n./LiteDB/Shell/Commands/Collections/Indexes.cs\n./LiteDB/Shell/Commands/Collections/Insert.cs\n./LiteDB/Shell/Commands/Collections/Max.cs\n./LiteDB/Shell/Commands/Collections/Min.cs\n./LiteDB/Shell/Commands/Collections/Rename.cs\n./LiteDB/Shell/Commands/Collections/Update.cs\n./LiteDB/Shell/Commands/FileStoage\n./LiteDB/Shell/Commands/FileStoage/BaseFileStorage.cs\n./LiteDB/Shell/Commands/FileStoage/Delete.cs\n./LiteDB/Shell/Commands/FileStoage/Download.cs\n./LiteDB/Shell/Commands/FileStoage/Find.cs\n./LiteDB/Shell/Commands/FileStoage/Update.cs\n./LiteDB/Shell/Commands/FileStoage/Upload.cs\n./LiteDB/Shell/Commands/ILiteCommand.cs\n./LiteDB/Shell/Commands/Others\n./LiteDB/Shell/Commands/Others/Dump.cs\n./LiteDB/Shell/Commands/Others/Info.cs\n./LiteDB/Shell/Commands/Others/ShowCollections.cs\n./LiteDB/Shell/Commands/Transactions\n./LiteDB/Shell/Commands/Transactions/Begin.cs\n./LiteDB/Shell/Commands/Transactions/Commit.cs\n./LiteDB/Shell/Commands/Transactions/Rollback.cs\n./LiteDB/Shell/LiteShell.cs\n./LiteDB/Storage\n./LiteDB/Storage/Pages\n./LiteDB/Storage/Pages/BasePage.cs\n./LiteDB/Storage/Pages/CollectionPage.cs\n./LiteDB/Storage/Pages/DataPage.cs\n./LiteDB/Storage/Pages/ExtendPage.cs\n./LiteDB/Storage/Pages/HeaderPage.cs\n./LiteDB/Storage/Pages/IndexPage.cs\n./LiteDB/Storage/Services\n./LiteDB/Storage/Services/CacheService.cs\n./LiteDB/Storage/Services/CollectionService.cs\n./LiteDB/Storage/Services/DataService.cs\n./LiteDB/Storage/Services/DiskService.cs\n./LiteDB/Storage/Services/IndexService.cs\n./LiteDB/Storage/Services/JournalService.cs\n./LiteDB/Storage/Services/PageService.cs\n./LiteDB/Storage/Services/RecoveryService.cs\n./LiteDB/Storage/Services/TransactionService.cs\n./LiteDB/Storage/Structures\n./LiteDB/Storage/Structures/CollectionIndex.cs\n./LiteDB/Storage/Structures/DataBlock.cs\n./LiteDB/Storage/Structures/IndexNode.cs\n./LiteDB/Storage/Structures/IndexOptions.cs\n./LiteDB/Storage/Structures/PageAddress.cs\n./.gitignore\n./LICENSE\n./LiteDB.sln\n./NuGet\n./NuGet/LiteDB.1.0.2.nupkg\n./README.md\n./UnitTest\n./UnitTest/AutoIdTest.cs\n./UnitTest/BsonFieldTest.cs\n./UnitTest/BsonTest.cs\n./UnitTest/ConcurrentTest.cs\n./UnitTest/DropCollectionTest.cs\n./UnitTest/FileStorageTest.cs\n./UnitTest/FilesTest.cs\n./UnitTest/IncludeTest.cs\n./UnitTest/IndexOrderTest.cs\n./UnitTest/IndexTest.cs\n./UnitTest/JsonTest.cs\n./UnitTest/LinqTest.cs\n./UnitTest/MapperInterfaceTest.cs\n./UnitTest/MapperTest.cs\n./UnitTest/ObjectIdTest.cs\n./UnitTest/PerformanceTest.cs\n./UnitTest/Properties\n./UnitTest/Properties/AssemblyInfo.cs\n./UnitTest/UnitTest.csproj\n./UnitTest/Utils\n./UnitTest/Utils/DB.cs\n./UnitTest/VersionTest.cs\n",
    "readme": "\n--- ./README.md ---\n# LiteDB - A .NET NoSQL Document Store in a single data file\n\nLiteDB is a small, fast and lightweight NoSQL embedded database. \n\n- Serverless NoSQL Document Store\n- Simple API similar to MongoDB\n- 100% C# code for .NET 4 in a single DLL (less then 200kb)\n- Transaction control - ACID\n- Recovery in writing failure (journal mode)\n- Store POCO classes or `BsonDocument`\n- Store files and stream data (like GridFS in MongoDB)\n- Single data file storage (like SQLite)\n- Index document fields for fast search (up to 16 indexes per collection)\n- LINQ support for queries\n- Shell command line - [try this online version](http://litedb.azurewebsites.net/)\n- Open source and free for everyone - including commercial use\n- Install from NuGet: `Install-Package LiteDB`\n\n## Try online\n\n[Try LiteDB Web Shell](http://litedb.azurewebsites.net/). For security reasons, in online version not all commands are available. Try offline version for full features tests.\n\n## Documentation\n\nVisit [Wiki for full documentation](https://github.com/mbdavid/LiteDB/wiki)\n\n## Download\n\nDownload source code or binary only in [LiteDB Releases](https://github.com/mbdavid/LiteDB/releases)\n\n## How to use LiteDB\n\nA quick example for store and search documents:\n\n```C#\n// Create your POCO class\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string[] Phones { get; set; }\n    public bool IsActive { get; set; }\n}\n\n// Open database (or create if not exits)\nusing(var db = new LiteDatabase(@\"C:\\Temp\\MyData.db\"))\n{\n\t// Get customer collection\n\tvar col = db.GetCollection<Customer>(\"customers\");\n\n    // Create your new customer instance\n\tvar customer = new Customer\n    { \n        Name = \"John Doe\", \n        Phones = new string[] { \"8000-0000\", \"9000-0000\" }, \n        IsActive = true\n    };\n\t\n\t// Insert new customer document (Id will be auto-incremented)\n\tcol.Insert(customer);\n\t\n\t// Update a document inside a collection\n\tcustomer.Name = \"Joana Doe\";\n\t\n\tcol.Update(customer);\n\t\n\t// Index document using a document property\n\tcol.EnsureIndex(x => x.Name);\n\t\n\t// Use Linq to query documents\n\tvar results = col.Find(x => x.Name.StartsWith(\"Jo\"));\n}\n```\n\n## Where to use?\n\n- Desktop/local small applications\n- Application file format\n- Small web applications\n- One database **per account/user** data store\n- Few concurrency write users operations\n\n\n## Changelog\n\nDetails changes for each release are documented in the [release notes](https://github.com/mbdavid/LiteDB/releases).\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2015 - Maur\u00edcio David\n\n",
    "readme_filenames": [
      "./README.md"
    ]
  },
  "llm_calls_before_build": 45,
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM debian:buster-slim\n\n# Install Mono runtime and build tools\nRUN apt-get update && \\\n    apt-get install -y gnupg ca-certificates curl && \\\n    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \\\n    echo \"deb https://download.mono-project.com/repo/debian stable-buster main\" | tee /etc/apt/sources.list.d/mono-official-stable.list && \\\n    apt-get update && \\\n    apt-get install -y mono-devel git msbuild && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Import SSL certificates for NuGet\nRUN mozroots --machine --import --sync --quiet\n\n# Install NuGet CLI\nRUN curl -L -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe && \\\n    echo '#!/bin/sh\\nmono /usr/local/bin/nuget.exe \"$@\"' > /usr/local/bin/nuget && \\\n    chmod +x /usr/local/bin/nuget\n\n# Clone repository and checkout specific commit\nRUN git clone https://github.com/litedb-org/LiteDB.git /app\nWORKDIR /app\nRUN git checkout 71ff9c93810f2edbe6c04e08f32ab9f491959923\n\n# Restore packages and build core projects\nRUN nuget restore LiteDB.sln\nRUN msbuild /p:Configuration=Release LiteDB/LiteDB.csproj\nRUN msbuild /p:Configuration=Release LiteDB.Shell/LiteDB.Shell.csproj",
  "dockerfile_build_success": true,
  "successful_candidate_index": 1,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "llm_calls_total": 50
}