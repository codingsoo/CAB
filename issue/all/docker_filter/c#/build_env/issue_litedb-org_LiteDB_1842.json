{
  "number": 1842,
  "title": "[QUESTION] How do you DeleteMany efficiently",
  "created_at": "2020-10-12T21:17:59Z",
  "closed_at": "2020-10-13T16:32:09Z",
  "labels": [
    "question"
  ],
  "url": "https://github.com/litedb-org/LiteDB/issues/1842",
  "body": "I've looked through the documentation and there is a lot of information about querying and indexes to query things efficiently, but I don't see a lot of information about deleting things efficiently.\r\n\r\nI'm trying to DeleteMany from a LiteDb database, but even relatively small deletes of 3000 items takes 10-20 seconds. Right now I am just experimenting with smaller data sets, but I plan to scale things up to much larger data sets, but I'm concerned that if the performance scales as well, then some of my deletion operations may take 30 minutes or more.\r\n\r\nI'm trying to make a generic database implementation using LiteDB, and below is the code that I'm using for deleting from the database\r\n\r\n```csharp\r\npublic void Delete<T>(IEnumerable<T> items)\r\n{\r\n    //Gets the collection name based on type. Will throw an exception if we don't support the type used.\r\n    var collectionName = getCollectionNameAndThrowIfNotSupported<T>();\r\n    //Gets the connection string. We are only specifying Filename, ReadOnly, and the Connection is shared\r\n    var connectionString = getConnectionString(read_only: false);\r\n    using (var db = new LiteDatabase(connectionString))\r\n    {\r\n        var collectionExists = db.CollectionExists(collectionName);\r\n        if (!collectionExists)\r\n            return; //no collection exists, so there is nothing to delete\r\n\r\n        //converting items to a hash set to help find matches more quickly\r\n        var hashedItems = items.ToHashSet();\r\n\r\n        var collection = db.GetCollection<T>(collectionName);\r\n        //This is the line that I have the most questions about. Is there a better way of writing this line to be more efficient?\r\n        collection.DeleteMany(x => hashedItems.Contains(x));\r\n    }\r\n}\r\n``` \r\n\r\nI thought that `Contains` would check if the items are equal, and for my objects that are being stored in LiteDb I am overriding `Equals` and `GetHashCode` and for two items to be equal I am only checking if the `ObjectId`s are equal.\r\n\r\nFrom the documentation it would appear that if you have an `ObjectId Id` that this will automatically get indexed, but am I missing something in my `DeleteMany` predicate that would help take advantage of indexes? Is there something that can be done to make this process faster?",
  "comments_url": "https://api.github.com/repos/litedb-org/LiteDB/issues/1842/comments",
  "author": "trockefeller-pathway",
  "comments": [
    {
      "user": "lbnascimento",
      "created_at": "2020-10-13T14:59:25Z",
      "body": "@trockefeller-pathway Basically, what `DeleteMany` does is to run a query to get the id of all documents that match the predicate and, after that, it deletes these documents by their ids. What is actually happening is that `x => hashedItems.Contains(x)` is being converted into a `BsonExpression`, which involves serializing all the items in `hashedItems`, and executed for every document in the query. So, not very efficient.\r\n\r\nDeleting by id is always faster. Given your situation, I believe the fastest way to delete many documents would be something like this (assuming your class has an Id field):\r\n```C#\r\ndb.BeginTrans();\r\nforeach(var item in items)\r\n{\r\n\tcollection.Delete(BsonMapper.Global.Serialize(item)[\"_id\"]);\r\n}\r\ndb.Commit();\r\n```"
    },
    {
      "user": "trockefeller-pathway",
      "created_at": "2020-10-13T15:32:23Z",
      "body": "@lbnascimento in my LiteDb objects I have a `public ObjectId Id { get; }` property. I don't explicitly have a private _id field. Do I need to explicitly create this field, or does it automatically get created because of my public Id property?\n\n---\n\n@lbnascimento I was able to test the code you suggested, and it did work to delete the items I was needing to, and it was at least 100x faster than how I was doing it previously. Thank you."
    },
    {
      "user": "lbnascimento",
      "created_at": "2020-10-13T15:37:33Z",
      "body": "@trockefeller-pathway The id property in your object always becomes \"_id\" in the mapped `BsonDocument`, which is why I used it after the `BsonMapper.Serialize<T>(T obj)` call. I did this because your method is generic, so you can't simply do something like `collection.Delete(item.Id)`.\r\n\r\nThere are other ways to solve your problem, of course. You could get the Id field by reflection, but that's exactly what `BsonMapper` does. You could also make all of your data classes implement an interface that has a public property Id, which would allow you to use `collection.Delete(item.Id)`, but I think it would be over-engineering and it would only work if you own all of your data classes."
    }
  ],
  "satisfaction_conditions": [
    "Demonstrates efficient bulk deletion leveraging primary key/indexes",
    "Avoids full collection scans during deletion operations",
    "Works with LiteDB's document ID handling",
    "Maintains generic implementation capability",
    "Scales effectively to large datasets",
    "Utilizes transactional batching where appropriate"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-04-05 00:27:47"
  },
  "git_commit_info": {
    "sha": "71ff9c93810f2edbe6c04e08f32ab9f491959923",
    "date": "2015-07-26T22:51:55Z",
    "message": "Merge pull request #47 from rdstevens/master\n\nAdded DropCollection unit test.",
    "author": "Mauricio David"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-17ac4e3dfea954c34f187955a8e6452e9aeef990.pack\n./.git/objects/pack/pack-17ac4e3dfea954c34f187955a8e6452e9aeef990.rev\n./.git/objects/pack/pack-17ac4e3dfea954c34f187955a8e6452e9aeef990.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/master\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/master\n./.git/logs/HEAD\n./.git/index\n./LiteDB.Shell\n./LiteDB.Shell/Commands\n./LiteDB.Shell/Commands/Close.cs\n./LiteDB.Shell/Commands/Comment.cs\n./LiteDB.Shell/Commands/Ed.cs\n./LiteDB.Shell/Commands/Help.cs\n./LiteDB.Shell/Commands/Open.cs\n./LiteDB.Shell/Commands/Pretty.cs\n./LiteDB.Shell/Commands/Quit.cs\n./LiteDB.Shell/Commands/Run.cs\n./LiteDB.Shell/Commands/Spool.cs\n./LiteDB.Shell/Commands/Timer.cs\n./LiteDB.Shell/Commands/Version.cs\n./LiteDB.Shell/App.config\n./LiteDB.Shell/ConsoleCommand.cs\n./LiteDB.Shell/Display.cs\n./LiteDB.Shell/InputCommand.cs\n./LiteDB.Shell/LiteDB.Shell.csproj\n./LiteDB.Shell/Program.cs\n./LiteDB.Shell/Properties\n./LiteDB.Shell/Properties/AssemblyInfo.cs\n./LiteDB\n./LiteDB/Document\n./LiteDB/Document/BsonArray.cs\n./LiteDB/Document/BsonDocument.cs\n./LiteDB/Document/BsonType.cs\n./LiteDB/Document/BsonValue.cs\n./LiteDB/Document/ObjectId.cs\n./LiteDB/Utils\n./LiteDB/Utils/BinaryExtensions.cs\n./LiteDB/Utils/BinaryReaderExtensions.cs\n./LiteDB/Utils/BinaryWriterExtensions.cs\n./LiteDB/Utils/ConnectionString.cs\n./LiteDB/Utils/DictionaryExtensions.cs\n./LiteDB/Utils/DumpDatabase.cs\n./LiteDB/Utils/IOExceptionExtensions.cs\n./LiteDB/Utils/LiteException.cs\n./LiteDB/Utils/MimeTypeConverter.cs\n./LiteDB/Utils/StringScanner.cs\n./LiteDB/Database\n./LiteDB/Database/Collections\n./LiteDB/Database/Collections/Delete.cs\n./LiteDB/Database/Collections/Drop.cs\n./LiteDB/Database/Collections/Find.cs\n./LiteDB/Database/Collections/FindIndex.cs\n./LiteDB/Database/Collections/Include.cs\n./LiteDB/Database/Collections/Index.cs\n./LiteDB/Database/Collections/Insert.cs\n./LiteDB/Database/Collections/InsertBulk.cs\n./LiteDB/Database/Collections/LiteCollection.cs\n./LiteDB/Database/Collections/Update.cs\n./LiteDB/Database/FileStorage\n./LiteDB/Database/FileStorage/LiteFileInfo.cs\n./LiteDB/Database/FileStorage/LiteFileStorage.cs\n./LiteDB/Database/FileStorage/LiteFileStream.cs\n./LiteDB/Database/LiteDatabase.cs\n./LiteDB/Database/Tools\n./LiteDB/Database/Tools/DbRef.cs\n./LiteDB/Database/Tools/GetDatabaseInfo.cs\n./LiteDB/Database/Tools/RunCommand.cs\n./LiteDB/Database/Tools/UserVersion.cs\n./LiteDB/LiteDB.csproj\n./LiteDB/Properties\n./LiteDB/Properties/AssemblyInfo.cs\n./LiteDB/Query\n./LiteDB/Query/Impl\n./LiteDB/Query/Impl/QueryAll.cs\n./LiteDB/Query/Impl/QueryAnd.cs\n./LiteDB/Query/Impl/QueryBetween.cs\n./LiteDB/Query/Impl/QueryContains.cs\n./LiteDB/Query/Impl/QueryEquals.cs\n./LiteDB/Query/Impl/QueryGreater.cs\n./LiteDB/Query/Impl/QueryIn.cs\n./LiteDB/Query/Impl/QueryLess.cs\n./LiteDB/Query/Impl/QueryNot.cs\n./LiteDB/Query/Impl/QueryOr.cs\n./LiteDB/Query/Impl/QueryStartsWith.cs\n./LiteDB/Query/Linq\n./LiteDB/Query/Linq/QueryVisitor.cs\n./LiteDB/Query/Query.cs\n./LiteDB/Serializer\n./LiteDB/Serializer/Bson\n./LiteDB/Serializer/Bson/BsonReader.cs\n./LiteDB/Serializer/Bson/BsonSerializer.cs\n./LiteDB/Serializer/Bson/BsonWriter.cs\n./LiteDB/Serializer/Json\n./LiteDB/Serializer/Json/JsonReader.cs\n./LiteDB/Serializer/Json/JsonSerializer.cs\n./LiteDB/Serializer/Json/JsonTokenizer.cs\n./LiteDB/Serializer/Json/JsonWriter.cs\n./LiteDB/Serializer/Mapper\n./LiteDB/Serializer/Mapper/AutoId.cs\n./LiteDB/Serializer/Mapper/BsonFieldAttribute.cs\n./LiteDB/Serializer/Mapper/BsonIdAttribute.cs\n./LiteDB/Serializer/Mapper/BsonIgnoreAttribute.cs\n./LiteDB/Serializer/Mapper/BsonIndexAttribute.cs\n./LiteDB/Serializer/Mapper/BsonMapper.Deserialize.cs\n./LiteDB/Serializer/Mapper/BsonMapper.Serialize.cs\n./LiteDB/Serializer/Mapper/BsonMapper.cs\n./LiteDB/Serializer/Mapper/PropertyMapper.cs\n./LiteDB/Serializer/Mapper/Reflection.cs\n./LiteDB/Shell\n./LiteDB/Shell/Commands\n./LiteDB/Shell/Commands/Collections\n./LiteDB/Shell/Commands/Collections/BaseCollection.cs\n./LiteDB/Shell/Commands/Collections/Bulk.cs\n./LiteDB/Shell/Commands/Collections/Count.cs\n./LiteDB/Shell/Commands/Collections/Delete.cs\n./LiteDB/Shell/Commands/Collections/Drop.cs\n./LiteDB/Shell/Commands/Collections/DropIndex.cs\n./LiteDB/Shell/Commands/Collections/EnsureIndex.cs\n./LiteDB/Shell/Commands/Collections/Exec.cs\n./LiteDB/Shell/Commands/Collections/Find.cs\n./LiteDB/Shell/Commands/Collections/Indexes.cs\n./LiteDB/Shell/Commands/Collections/Insert.cs\n./LiteDB/Shell/Commands/Collections/Max.cs\n./LiteDB/Shell/Commands/Collections/Min.cs\n./LiteDB/Shell/Commands/Collections/Rename.cs\n./LiteDB/Shell/Commands/Collections/Update.cs\n./LiteDB/Shell/Commands/FileStoage\n./LiteDB/Shell/Commands/FileStoage/BaseFileStorage.cs\n./LiteDB/Shell/Commands/FileStoage/Delete.cs\n./LiteDB/Shell/Commands/FileStoage/Download.cs\n./LiteDB/Shell/Commands/FileStoage/Find.cs\n./LiteDB/Shell/Commands/FileStoage/Update.cs\n./LiteDB/Shell/Commands/FileStoage/Upload.cs\n./LiteDB/Shell/Commands/ILiteCommand.cs\n./LiteDB/Shell/Commands/Others\n./LiteDB/Shell/Commands/Others/Dump.cs\n./LiteDB/Shell/Commands/Others/Info.cs\n./LiteDB/Shell/Commands/Others/ShowCollections.cs\n./LiteDB/Shell/Commands/Transactions\n./LiteDB/Shell/Commands/Transactions/Begin.cs\n./LiteDB/Shell/Commands/Transactions/Commit.cs\n./LiteDB/Shell/Commands/Transactions/Rollback.cs\n./LiteDB/Shell/LiteShell.cs\n./LiteDB/Storage\n./LiteDB/Storage/Pages\n./LiteDB/Storage/Pages/BasePage.cs\n./LiteDB/Storage/Pages/CollectionPage.cs\n./LiteDB/Storage/Pages/DataPage.cs\n./LiteDB/Storage/Pages/ExtendPage.cs\n./LiteDB/Storage/Pages/HeaderPage.cs\n./LiteDB/Storage/Pages/IndexPage.cs\n./LiteDB/Storage/Services\n./LiteDB/Storage/Services/CacheService.cs\n./LiteDB/Storage/Services/CollectionService.cs\n./LiteDB/Storage/Services/DataService.cs\n./LiteDB/Storage/Services/DiskService.cs\n./LiteDB/Storage/Services/IndexService.cs\n./LiteDB/Storage/Services/JournalService.cs\n./LiteDB/Storage/Services/PageService.cs\n./LiteDB/Storage/Services/RecoveryService.cs\n./LiteDB/Storage/Services/TransactionService.cs\n./LiteDB/Storage/Structures\n./LiteDB/Storage/Structures/CollectionIndex.cs\n./LiteDB/Storage/Structures/DataBlock.cs\n./LiteDB/Storage/Structures/IndexNode.cs\n./LiteDB/Storage/Structures/IndexOptions.cs\n./LiteDB/Storage/Structures/PageAddress.cs\n./.gitignore\n./LICENSE\n./LiteDB.sln\n./NuGet\n./NuGet/LiteDB.1.0.2.nupkg\n./README.md\n./UnitTest\n./UnitTest/AutoIdTest.cs\n./UnitTest/BsonFieldTest.cs\n./UnitTest/BsonTest.cs\n./UnitTest/ConcurrentTest.cs\n./UnitTest/DropCollectionTest.cs\n./UnitTest/FileStorageTest.cs\n./UnitTest/FilesTest.cs\n./UnitTest/IncludeTest.cs\n./UnitTest/IndexOrderTest.cs\n./UnitTest/IndexTest.cs\n./UnitTest/JsonTest.cs\n./UnitTest/LinqTest.cs\n./UnitTest/MapperInterfaceTest.cs\n./UnitTest/MapperTest.cs\n./UnitTest/ObjectIdTest.cs\n./UnitTest/PerformanceTest.cs\n./UnitTest/Properties\n./UnitTest/Properties/AssemblyInfo.cs\n./UnitTest/UnitTest.csproj\n./UnitTest/Utils\n./UnitTest/Utils/DB.cs\n./UnitTest/VersionTest.cs\n",
    "readme": "\n--- ./README.md ---\n# LiteDB - A .NET NoSQL Document Store in a single data file\n\nLiteDB is a small, fast and lightweight NoSQL embedded database. \n\n- Serverless NoSQL Document Store\n- Simple API similar to MongoDB\n- 100% C# code for .NET 4 in a single DLL (less then 200kb)\n- Transaction control - ACID\n- Recovery in writing failure (journal mode)\n- Store POCO classes or `BsonDocument`\n- Store files and stream data (like GridFS in MongoDB)\n- Single data file storage (like SQLite)\n- Index document fields for fast search (up to 16 indexes per collection)\n- LINQ support for queries\n- Shell command line - [try this online version](http://litedb.azurewebsites.net/)\n- Open source and free for everyone - including commercial use\n- Install from NuGet: `Install-Package LiteDB`\n\n## Try online\n\n[Try LiteDB Web Shell](http://litedb.azurewebsites.net/). For security reasons, in online version not all commands are available. Try offline version for full features tests.\n\n## Documentation\n\nVisit [Wiki for full documentation](https://github.com/mbdavid/LiteDB/wiki)\n\n## Download\n\nDownload source code or binary only in [LiteDB Releases](https://github.com/mbdavid/LiteDB/releases)\n\n## How to use LiteDB\n\nA quick example for store and search documents:\n\n```C#\n// Create your POCO class\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string[] Phones { get; set; }\n    public bool IsActive { get; set; }\n}\n\n// Open database (or create if not exits)\nusing(var db = new LiteDatabase(@\"C:\\Temp\\MyData.db\"))\n{\n\t// Get customer collection\n\tvar col = db.GetCollection<Customer>(\"customers\");\n\n    // Create your new customer instance\n\tvar customer = new Customer\n    { \n        Name = \"John Doe\", \n        Phones = new string[] { \"8000-0000\", \"9000-0000\" }, \n        IsActive = true\n    };\n\t\n\t// Insert new customer document (Id will be auto-incremented)\n\tcol.Insert(customer);\n\t\n\t// Update a document inside a collection\n\tcustomer.Name = \"Joana Doe\";\n\t\n\tcol.Update(customer);\n\t\n\t// Index document using a document property\n\tcol.EnsureIndex(x => x.Name);\n\t\n\t// Use Linq to query documents\n\tvar results = col.Find(x => x.Name.StartsWith(\"Jo\"));\n}\n```\n\n## Where to use?\n\n- Desktop/local small applications\n- Application file format\n- Small web applications\n- One database **per account/user** data store\n- Few concurrency write users operations\n\n\n## Changelog\n\nDetails changes for each release are documented in the [release notes](https://github.com/mbdavid/LiteDB/releases).\n\n## License\n\n[MIT](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2015 - Maur\u00edcio David\n\n",
    "readme_filenames": [
      "./README.md"
    ]
  },
  "llm_calls_before_build": 0,
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM mono:6.12.0\n\nRUN apt-get update && apt-get install -y git ca-certificates\n\nWORKDIR /src\n\nRUN git clone https://github.com/litedb-org/LiteDB.git . && \\\n    git checkout 71ff9c93810f2edbe6c04e08f32ab9f491959923\n\nRUN nuget restore LiteDB.sln\n\nRUN msbuild LiteDB/LiteDB.csproj /p:Configuration=Release && \\\n    msbuild LiteDB.Shell/LiteDB.Shell.csproj /p:Configuration=Release",
  "dockerfile_build_success": true,
  "llm_calls_total": 10
}