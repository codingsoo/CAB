{
  "number": 1567,
  "title": "BUG: NATS throws exceptions when custom consumer configurations are set",
  "created_at": "2024-07-24T12:36:10Z",
  "closed_at": "2024-07-29T02:44:34Z",
  "labels": [
    "question"
  ],
  "url": "https://github.com/dotnetcore/CAP/issues/1567",
  "body": "# Configuration\r\n\r\nIn my Program.cs, I have CAP configured like so:\r\n\r\n```cs\r\nbuilder.Services.AddCap(o =>\r\n{\r\n    o.UseEntityFramework<NotificationDataContext>(opt => opt.Schema = \"Outbox\");\r\n    o.UseNATS(opt =>\r\n    {\r\n        var natsUrl = builder.Configuration.GetValue<string>(\"NatsSettings:Url\")!;\r\n\r\n        opt.Servers = natsUrl;\r\n        opt.StreamOptions = strOpts =>\r\n        {\r\n            strOpts.WithRetentionPolicy(NATS.Client.JetStream.RetentionPolicy.Limits);\r\n            strOpts.WithStorageType(NATS.Client.JetStream.StorageType.File);\r\n            strOpts.WithDuplicateWindow(NATS.Client.Internals.Duration.OfMinutes(1));\r\n            strOpts.WithDiscardPolicy(NATS.Client.JetStream.DiscardPolicy.Old);\r\n\r\n            strOpts.Build();\r\n        };\r\n\r\n        opt.ConsumerOptions = consOpts =>\r\n        {\r\n            consOpts.WithBackoff(\r\n                NATS.Client.Internals.Duration.OfSeconds(5),\r\n                NATS.Client.Internals.Duration.OfSeconds(30),\r\n                NATS.Client.Internals.Duration.OfMinutes(1),\r\n                NATS.Client.Internals.Duration.OfMinutes(2),\r\n                NATS.Client.Internals.Duration.OfMinutes(5),\r\n                NATS.Client.Internals.Duration.OfMinutes(10)\r\n            );\r\n\r\n            consOpts.WithAckPolicy(NATS.Client.JetStream.AckPolicy.Explicit);\r\n            consOpts.WithDeliverPolicy(NATS.Client.JetStream.DeliverPolicy.All);\r\n            consOpts.WithReplayPolicy(NATS.Client.JetStream.ReplayPolicy.Instant);\r\n        };\r\n    });\r\n});\r\n```\r\n\r\nI have an interface and class:\r\n\r\n**IUserService:**\r\n\r\n```cs\r\npublic interface IUserService\r\n{\r\n    Task HandleEvent(DateTime time);\r\n}\r\n```\r\n\r\n**UserService:**\r\n\r\n```cs\r\npublic class UserService: IUserService\r\n{\r\n    [CapSubscribe(\"test.show.time\")]\r\n    public async Task HandleEvent(DateTime time)\r\n    {\r\n        Console.WriteLine(\"message time is:\" + time);\r\n    }\r\n}\r\n```\r\n\r\nThese are both registered as scoped services.\r\n\r\n```cs\r\nservices.AddScoped<IUserService, UserService>();\r\n```\r\n\r\n# How To Reproduce\r\n\r\n1. Using Docker, start a new nats server:\r\n`docker run -it -p 4222:4222 -p 8222:8222 -p 8080:8080 --name nats -d nats:2.10.14 -js -m 8222`.\r\n\r\n2. Set `natsUrl` in `Program.cs` to `\"nats://localhost:4222\"`.\r\n\r\n3. Start the application. \r\n4. Close the application.\r\n5. Start the application again. This exception should appear in the terminal: \r\n\r\n**Error Log:**\r\n```text  \r\nNATS.Client.NATSJetStreamClientException: [SUB-90016] Existing consumer cannot be modified. [AckWait]\r\n   at NATS.Client.JetStream.JetStream.CreateSubscription(String userSubscribeSubject, PushSubscribeOptions pushSubscribeOptions, PullSubscribeOptions pullSubscribeOptions, String queueName, EventHandler`1 userHandler, Boolean autoAck, PullMessageManager pmmInstance)\r\n   at NATS.Client.JetStream.JetStream.PushSubscribeAsync(String subject, String queue, EventHandler`1 handler, Boolean autoAck, PushSubscribeOptions options)\r\n   at DotNetCore.CAP.NATS.NATSConsumerClient.Subscribe(IEnumerable`1 topics)\r\n```\r\n\r\n# Expected Behaviour\r\n\r\nAn exception should not be thrown here because the consumer configuration is not changing. If I don't provide a custom consumer configuration, no exception is thrown on application restart.\r\n",
  "comments_url": "https://api.github.com/repos/dotnetcore/CAP/issues/1567/comments",
  "author": "henrychris",
  "comments": [
    {
      "user": "yang-xiaodong",
      "created_at": "2024-07-25T14:29:03Z",
      "body": "In the NATS Server, the BackOff option overrides the AckWait option, ignoring the AckWait settings. This can cause an inconsistency between the NATS client configuration and the server configuration, leading to exceptions when the application restarts. Since CAP internally provides a default value for AckWait, you need to reset the AckWait option to avoid configuration comparison issues.\r\n\r\n```\r\nconsOpts.WithBackoff(\r\n    NATS.Client.Internals.Duration.OfSeconds(5),\r\n    NATS.Client.Internals.Duration.OfSeconds(30),\r\n    NATS.Client.Internals.Duration.OfMinutes(1),\r\n    NATS.Client.Internals.Duration.OfMinutes(2),\r\n    NATS.Client.Internals.Duration.OfMinutes(5),\r\n    NATS.Client.Internals.Duration.OfMinutes(10)\r\n);\r\nconsOpts.WithAckWait(null);    // add this line !!!!\r\n```"
    },
    {
      "user": "henrychris",
      "created_at": "2024-07-25T21:48:03Z",
      "body": "I just tried this out, and it works! Thank you so much! Do I close this myself, or will you do the honours?"
    }
  ],
  "satisfaction_conditions": [
    "Explanation of why NATS Server considers the consumer configuration changed between restarts",
    "Clarification on how Backoff configuration interacts with AckWait settings in NATS",
    "Resolution that maintains the intended consumer backoff strategy while avoiding server-side configuration conflicts",
    "Mechanism to ensure consumer configuration parity between client and server during application restarts"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-03-21 18:39:16"
  },
  "git_commit_info": {
    "sha": "3a8bcf0324423c63712db70c62ecdb38564072fa",
    "date": "2018-04-28T08:03:36Z",
    "message": "Release 2.2.2 (#121)\n\n* fixed message enqueue exception in v2.2\r\n\r\n* add log to samples\r\n\r\n* Improved log output.  #114\r\n\r\n* add default timeout configuration for kafka client.\r\n\r\n* fixed retry processor bugs.\r\n\r\n* Fixed kafka producer exception log without logging when publish message.\r\n\r\n* update version num to 2.2.2\r\n\r\n* rename configuration options FailedCallback to FailedThresholdCallback\r\n\r\n* rename files name.\r\n\r\n* remove unused files.\r\n\r\n* modify the error comments.\r\n\r\n* update samples.\r\n\r\n* add logs.",
    "author": "Savorboard"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-f9a00506b449199b11ae850bde7994bfef6c9480.pack\n./.git/objects/pack/pack-f9a00506b449199b11ae850bde7994bfef6c9480.rev\n./.git/objects/pack/pack-f9a00506b449199b11ae850bde7994bfef6c9480.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/master\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/master\n./.git/logs/HEAD\n./.git/index\n./LICENSE.txt\n./build\n./build/common.props\n./build/index.cake\n./build/util.cake\n./build/version.cake\n./build/version.props\n./samples\n./samples/Sample.RabbitMQ.MySql\n./samples/Sample.RabbitMQ.MySql/Controllers\n./samples/Sample.RabbitMQ.MySql/Controllers/ValuesController.cs\n./samples/Sample.RabbitMQ.MySql/Properties\n./samples/Sample.RabbitMQ.MySql/Properties/launchSettings.json\n./samples/Sample.RabbitMQ.MySql/AppDbContext.cs\n./samples/Sample.RabbitMQ.MySql/Program.cs\n./samples/Sample.RabbitMQ.MySql/Sample.RabbitMQ.MySql.csproj\n./samples/Sample.RabbitMQ.MySql/Startup.cs\n./samples/Sample.RabbitMQ.MySql/nlog.config\n./samples/Sample.Kafka.MySql\n./samples/Sample.Kafka.MySql/Controllers\n./samples/Sample.Kafka.MySql/Controllers/ValuesController.cs\n./samples/Sample.Kafka.MySql/Program.cs\n./samples/Sample.Kafka.MySql/Sample.Kafka.MySql.csproj\n./samples/Sample.Kafka.MySql/Startup.cs\n./samples/Sample.Kafka.MySql/nlog.config\n./src\n./src/DotNetCore.CAP.Kafka\n./src/DotNetCore.CAP.Kafka/CAP.KafkaCapOptionsExtension.cs\n./src/DotNetCore.CAP.Kafka/CAP.KafkaOptions.cs\n./src/DotNetCore.CAP.Kafka/CAP.Options.Extensions.cs\n./src/DotNetCore.CAP.Kafka/CAP.SubscribeAttribute.cs\n./src/DotNetCore.CAP.Kafka/DotNetCore.CAP.Kafka.csproj\n./src/DotNetCore.CAP.Kafka/IConnectionPool.Default.cs\n./src/DotNetCore.CAP.Kafka/IConnectionPool.cs\n./src/DotNetCore.CAP.Kafka/IPublishMessageSender.Kafka.cs\n./src/DotNetCore.CAP.Kafka/KafkaConsumerClient.cs\n./src/DotNetCore.CAP.Kafka/KafkaConsumerClientFactory.cs\n./src/DotNetCore.CAP.MySql\n./src/DotNetCore.CAP.MySql/CAP.EFOptions.cs\n./src/DotNetCore.CAP.MySql/CAP.MySqlCapOptionsExtension.cs\n./src/DotNetCore.CAP.MySql/CAP.MySqlOptions.cs\n./src/DotNetCore.CAP.MySql/CAP.Options.Extensions.cs\n./src/DotNetCore.CAP.MySql/CapPublisher.cs\n./src/DotNetCore.CAP.MySql/DotNetCore.CAP.MySql.csproj\n./src/DotNetCore.CAP.MySql/IAdditionalProcessor.Default.cs\n./src/DotNetCore.CAP.MySql/MySqlMonitoringApi.cs\n./src/DotNetCore.CAP.MySql/MySqlStorage.cs\n./src/DotNetCore.CAP.MySql/MySqlStorageConnection.cs\n./src/DotNetCore.CAP.MySql/MySqlStorageTransaction.cs\n./src/DotNetCore.CAP.PostgreSql\n./src/DotNetCore.CAP.PostgreSql/CAP.EFOptions.cs\n./src/DotNetCore.CAP.PostgreSql/CAP.Options.Extensions.cs\n./src/DotNetCore.CAP.PostgreSql/CAP.PostgreSqlCapOptionsExtension.cs\n./src/DotNetCore.CAP.PostgreSql/CAP.PostgreSqlOptions.cs\n./src/DotNetCore.CAP.PostgreSql/CapPublisher.cs\n./src/DotNetCore.CAP.PostgreSql/DotNetCore.CAP.PostgreSql.csproj\n./src/DotNetCore.CAP.PostgreSql/IAdditionalProcessor.Default.cs\n./src/DotNetCore.CAP.PostgreSql/PostgreSqlMonitoringApi.cs\n./src/DotNetCore.CAP.PostgreSql/PostgreSqlStorage.cs\n./src/DotNetCore.CAP.PostgreSql/PostgreSqlStorageConnection.cs\n./src/DotNetCore.CAP.PostgreSql/PostgreSqlStorageTransaction.cs\n./src/DotNetCore.CAP.RabbitMQ\n./src/DotNetCore.CAP.RabbitMQ/CAP.Options.Extensions.cs\n./src/DotNetCore.CAP.RabbitMQ/CAP.RabbiMQOptions.cs\n./src/DotNetCore.CAP.RabbitMQ/CAP.RabbitMQCapOptionsExtension.cs\n./src/DotNetCore.CAP.RabbitMQ/CAP.SubscribeAttribute.cs\n./src/DotNetCore.CAP.RabbitMQ/DotNetCore.CAP.RabbitMQ.csproj\n./src/DotNetCore.CAP.RabbitMQ/IConnectionChannelPool.Default.cs\n./src/DotNetCore.CAP.RabbitMQ/IConnectionChannelPool.cs\n./src/DotNetCore.CAP.RabbitMQ/IPublishMessageSender.RabbitMQ.cs\n./src/DotNetCore.CAP.RabbitMQ/RabbitMQConsumerClient.cs\n./src/DotNetCore.CAP.RabbitMQ/RabbitMQConsumerClientFactory.cs\n./src/DotNetCore.CAP.SqlServer\n./src/DotNetCore.CAP.SqlServer/CAP.EFOptions.cs\n./src/DotNetCore.CAP.SqlServer/CAP.Options.Extensions.cs\n./src/DotNetCore.CAP.SqlServer/CAP.SqlServerCapOptionsExtension.cs\n./src/DotNetCore.CAP.SqlServer/CAP.SqlServerOptions.cs\n./src/DotNetCore.CAP.SqlServer/CapPublisher.cs\n./src/DotNetCore.CAP.SqlServer/DotNetCore.CAP.SqlServer.csproj\n./src/DotNetCore.CAP.SqlServer/IAdditionalProcessor.Default.cs\n./src/DotNetCore.CAP.SqlServer/SqlServerMonitoringApi.cs\n./src/DotNetCore.CAP.SqlServer/SqlServerStorage.cs\n./src/DotNetCore.CAP.SqlServer/SqlServerStorageConnection.cs\n./src/DotNetCore.CAP.SqlServer/SqlServerStorageTransaction.cs\n./src/DotNetCore.CAP\n./src/DotNetCore.CAP/Internal\n./src/DotNetCore.CAP/Internal/ObjectMethodExecutor\n./src/DotNetCore.CAP/Internal/ObjectMethodExecutor/AwaitableInfo.cs\n./src/DotNetCore.CAP/Internal/ObjectMethodExecutor/CoercedAwaitableInfo.cs\n./src/DotNetCore.CAP/Internal/ObjectMethodExecutor/ObjectMethodExecutor.cs\n./src/DotNetCore.CAP/Internal/ObjectMethodExecutor/ObjectMethodExecutorAwaitable.cs\n./src/DotNetCore.CAP/Internal/ObjectMethodExecutor/ObjectMethodExecutorFSharpSupport.cs\n./src/DotNetCore.CAP/Internal/CapCache.cs\n./src/DotNetCore.CAP/Internal/ConsumerContext.cs\n./src/DotNetCore.CAP/Internal/ConsumerExecutedResult.cs\n./src/DotNetCore.CAP/Internal/ConsumerExecutorDescriptor.cs\n./src/DotNetCore.CAP/Internal/ConsumerInvokerFactory.cs\n./src/DotNetCore.CAP/Internal/HashCodeCombiner.cs\n./src/DotNetCore.CAP/Internal/ICallbackMessageSender.Default.cs\n./src/DotNetCore.CAP/Internal/ICallbackMessageSender.cs\n./src/DotNetCore.CAP/Internal/IConsumerInvoker.Default.cs\n./src/DotNetCore.CAP/Internal/IConsumerInvoker.cs\n./src/DotNetCore.CAP/Internal/IConsumerInvokerFactory.cs\n./src/DotNetCore.CAP/Internal/IConsumerServiceSelector.Default.cs\n./src/DotNetCore.CAP/Internal/IConsumerServiceSelector.cs\n./src/DotNetCore.CAP/Internal/IContentSerializer.Json.cs\n./src/DotNetCore.CAP/Internal/IMessagePacker.Default.cs\n./src/DotNetCore.CAP/Internal/IModelBinder.ComplexType.cs\n./src/DotNetCore.CAP/Internal/IModelBinder.SimpleType.cs\n./src/DotNetCore.CAP/Internal/MethodBindException.cs\n./src/DotNetCore.CAP/Internal/MethodMatcherCache.cs\n./src/DotNetCore.CAP/Internal/ModelBinderFactory.cs\n./src/DotNetCore.CAP/Internal/PublisherSentFailedException.cs\n./src/DotNetCore.CAP/Internal/SubscriberExecutionFailedException.cs\n./src/DotNetCore.CAP/Internal/SubscriberNotFoundException.cs\n./src/DotNetCore.CAP/Processor\n./src/DotNetCore.CAP/Processor/IAdditionalProcessor.cs\n./src/DotNetCore.CAP/Processor/IDispatcher.Default.cs\n./src/DotNetCore.CAP/Processor/IProcessingServer.Cap.cs\n./src/DotNetCore.CAP/Processor/IProcessor.InfiniteRetry.cs\n./src/DotNetCore.CAP/Processor/IProcessor.NeedRetry.cs\n./src/DotNetCore.CAP/Processor/IProcessor.cs\n./src/DotNetCore.CAP/Processor/ProcessingContext.cs\n./src/DotNetCore.CAP/Processor/RetryBehavior.cs\n./src/DotNetCore.CAP/Processor/States\n./src/DotNetCore.CAP/Processor/States/IState.Failed.cs\n./src/DotNetCore.CAP/Processor/States/IState.Scheduled.cs\n./src/DotNetCore.CAP/Processor/States/IState.Succeeded.cs\n./src/DotNetCore.CAP/Processor/States/IState.cs\n./src/DotNetCore.CAP/Processor/States/IStateChanger.Default.cs\n./src/DotNetCore.CAP/Processor/States/IStateChanger.Extensions.cs\n./src/DotNetCore.CAP/Processor/States/IStateChanger.cs\n./src/DotNetCore.CAP/Properties\n./src/DotNetCore.CAP/Properties/AssemblyInfo.cs\n./src/DotNetCore.CAP/Abstractions\n./src/DotNetCore.CAP/Abstractions/CapPublisherBase.cs\n./src/DotNetCore.CAP/Abstractions/IContentSerializer.cs\n./src/DotNetCore.CAP/Abstractions/IModelBinderFactory.cs\n./src/DotNetCore.CAP/Abstractions/ModelBinding\n./src/DotNetCore.CAP/Abstractions/ModelBinding/IModelBinder.cs\n./src/DotNetCore.CAP/Abstractions/ModelBinding/ModelBindingResult.cs\n./src/DotNetCore.CAP/Abstractions/TopicAttribute.cs\n./src/DotNetCore.CAP/CAP.AppBuilderExtensions.cs\n./src/DotNetCore.CAP/CAP.Builder.cs\n./src/DotNetCore.CAP/CAP.Options.cs\n./src/DotNetCore.CAP/CAP.ServiceCollectionExtensions.cs\n./src/DotNetCore.CAP/Dashboard\n./src/DotNetCore.CAP/Dashboard/BatchCommandDispatcher.cs\n./src/DotNetCore.CAP/Dashboard/CAP.DashboardMiddleware.cs\n./src/DotNetCore.CAP/Dashboard/CAP.DashboardOptions.cs\n./src/DotNetCore.CAP/Dashboard/CAP.DashboardOptionsExtensions.cs\n./src/DotNetCore.CAP/Dashboard/CombinedResourceDispatcher.cs\n./src/DotNetCore.CAP/Dashboard/CommandDispatcher.cs\n./src/DotNetCore.CAP/Dashboard/Content\n./src/DotNetCore.CAP/Dashboard/Content/css\n./src/DotNetCore.CAP/Dashboard/Content/css/bootstrap.min.css\n./src/DotNetCore.CAP/Dashboard/Content/css/cap.css\n./src/DotNetCore.CAP/Dashboard/Content/css/jsonview.min.css\n./src/DotNetCore.CAP/Dashboard/Content/css/rickshaw.min.css\n./src/DotNetCore.CAP/Dashboard/Content/fonts\n./src/DotNetCore.CAP/Dashboard/Content/fonts/glyphicons-halflings-regular.eot\n./src/DotNetCore.CAP/Dashboard/Content/fonts/glyphicons-halflings-regular.svg\n./src/DotNetCore.CAP/Dashboard/Content/fonts/glyphicons-halflings-regular.ttf\n./src/DotNetCore.CAP/Dashboard/Content/fonts/glyphicons-halflings-regular.woff\n./src/DotNetCore.CAP/Dashboard/Content/fonts/glyphicons-halflings-regular.woff2\n./src/DotNetCore.CAP/Dashboard/Content/js\n./src/DotNetCore.CAP/Dashboard/Content/js/bootstrap.min.js\n./src/DotNetCore.CAP/Dashboard/Content/js/cap.js\n./src/DotNetCore.CAP/Dashboard/Content/js/d3.layout.min.js\n./src/DotNetCore.CAP/Dashboard/Content/js/d3.min.js\n./src/DotNetCore.CAP/Dashboard/Content/js/jquery-2.1.4.min.js\n./src/DotNetCore.CAP/Dashboard/Content/js/jsonview.min.js\n./src/DotNetCore.CAP/Dashboard/Content/js/moment-with-locales.min.js\n./src/DotNetCore.CAP/Dashboard/Content/js/moment.min.js\n./src/DotNetCore.CAP/Dashboard/Content/js/rickshaw.min.js\n./src/DotNetCore.CAP/Dashboard/Content/resx\n./src/DotNetCore.CAP/Dashboard/Content/resx/Strings.Designer.cs\n./src/DotNetCore.CAP/Dashboard/Content/resx/Strings.resx\n./src/DotNetCore.CAP/Dashboard/Content/resx/Strings.zh.resx\n./src/DotNetCore.CAP/Dashboard/DashboardContext.cs\n./src/DotNetCore.CAP/Dashboard/DashboardMetric.cs\n./src/DotNetCore.CAP/Dashboard/DashboardMetrics.cs\n./src/DotNetCore.CAP/Dashboard/DashboardRequest.cs\n./src/DotNetCore.CAP/Dashboard/DashboardResponse.cs\n./src/DotNetCore.CAP/Dashboard/DashboardRoutes.cs\n./src/DotNetCore.CAP/Dashboard/EmbeddedResourceDispatcher.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/DownstreamUrl.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/GatewayProxyMiddleware.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/IRequestMapper.Default.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/IRequestMapper.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester/HttpClientBuilder.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester/HttpClientHttpRequester.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester/IHttpClient.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester/IHttpClientBuilder.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester/IHttpClientCache.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester/IHttpRequester.cs\n./src/DotNetCore.CAP/Dashboard/GatewayProxy/Requester/MemoryHttpClientCache.cs\n./src/DotNetCore.CAP/Dashboard/HtmlHelper.cs\n./src/DotNetCore.CAP/Dashboard/IDashboardAuthorizationFilter.cs\n./src/DotNetCore.CAP/Dashboard/IDashboardDispatcher.cs\n./src/DotNetCore.CAP/Dashboard/IMonitoringApi.cs\n./src/DotNetCore.CAP/Dashboard/JsonDispatcher.cs\n./src/DotNetCore.CAP/Dashboard/JsonStats.cs\n./src/DotNetCore.CAP/Dashboard/LocalRequestsOnlyAuthorizationFilter.cs\n./src/DotNetCore.CAP/Dashboard/MenuItem.cs\n./src/DotNetCore.CAP/Dashboard/MessageHistoryRenderer.cs\n./src/DotNetCore.CAP/Dashboard/MessagesSidebarMenu.cs\n./src/DotNetCore.CAP/Dashboard/Metric.cs\n./src/DotNetCore.CAP/Dashboard/Monitoring\n./src/DotNetCore.CAP/Dashboard/Monitoring/MessageDto.cs\n./src/DotNetCore.CAP/Dashboard/Monitoring/MessageQueryDto.cs\n./src/DotNetCore.CAP/Dashboard/Monitoring/ServerDto.cs\n./src/DotNetCore.CAP/Dashboard/Monitoring/StatisticsDto.cs\n./src/DotNetCore.CAP/Dashboard/NavigationMenu.cs\n./src/DotNetCore.CAP/Dashboard/NonEscapedString.cs\n./src/DotNetCore.CAP/Dashboard/Pager.cs\n./src/DotNetCore.CAP/Dashboard/Pages\n./src/DotNetCore.CAP/Dashboard/Pages/BlockMetric.cs\n./src/DotNetCore.CAP/Dashboard/Pages/Breadcrumbs.cs\n./src/DotNetCore.CAP/Dashboard/Pages/HomePage.cs\n./src/DotNetCore.CAP/Dashboard/Pages/HomePage.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/HomePage.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/InlineMetric.cs\n./src/DotNetCore.CAP/Dashboard/Pages/LayoutPage.cs\n./src/DotNetCore.CAP/Dashboard/Pages/LayoutPage.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/LayoutPage.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/NodePage.cs\n./src/DotNetCore.CAP/Dashboard/Pages/NodePage.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/NodePage.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/PublishedPage.cs\n./src/DotNetCore.CAP/Dashboard/Pages/PublishedPage.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/PublishedPage.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/ReceivedPage.cs\n./src/DotNetCore.CAP/Dashboard/Pages/ReceivedPage.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/ReceivedPage.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/SidebarMenu.cs\n./src/DotNetCore.CAP/Dashboard/Pages/SubscriberPage.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/SubscriberPage.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_BlockMetric.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/_BlockMetric.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_Breadcrumbs.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/_Breadcrumbs.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_InlineMetric.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/_InlineMetric.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_Navigation.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/_Navigation.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_Paginator.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_Paginator.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/_Paginator.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_PerPageSelector.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_PerPageSelector.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/_PerPageSelector.generated.cs\n./src/DotNetCore.CAP/Dashboard/Pages/_SidebarMenu.cshtml\n./src/DotNetCore.CAP/Dashboard/Pages/_SidebarMenu.generated.cs\n./src/DotNetCore.CAP/Dashboard/RazorPage.cs\n./src/DotNetCore.CAP/Dashboard/RazorPageDispatcher.cs\n./src/DotNetCore.CAP/Dashboard/RouteCollection.cs\n./src/DotNetCore.CAP/Dashboard/RouteCollectionExtensions.cs\n./src/DotNetCore.CAP/Dashboard/UrlHelper.cs\n./src/DotNetCore.CAP/Diagnostics\n./src/DotNetCore.CAP/Diagnostics/DiagnosticListenerExtensions.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.Broker.Consume.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.Broker.ConsumeEnd.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.Broker.ConsumeError.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.Broker.Publish.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.Broker.PublishEnd.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.Broker.PublishError.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.Broker.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.SubscriberInvoke.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.SubscriberInvokeEnd.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.SubscriberInvokeError.cs\n./src/DotNetCore.CAP/Diagnostics/EventData.cs\n./src/DotNetCore.CAP/Diagnostics/IErrorEventData.cs\n./src/DotNetCore.CAP/Diagnostics/TracingHeaders.cs\n./src/DotNetCore.CAP/DotNetCore.CAP.csproj\n./src/DotNetCore.CAP/IBootstrapper.Default.cs\n./src/DotNetCore.CAP/IBootstrapper.cs\n./src/DotNetCore.CAP/ICallbackPublisher.cs\n./src/DotNetCore.CAP/ICapOptionsExtension.cs\n./src/DotNetCore.CAP/ICapPublisher.cs\n./src/DotNetCore.CAP/ICapSubscribe.cs\n./src/DotNetCore.CAP/IConsumerClient.cs\n./src/DotNetCore.CAP/IConsumerClientFactory.cs\n./src/DotNetCore.CAP/IConsumerHandler.Default.cs\n./src/DotNetCore.CAP/IConsumerHandler.cs\n./src/DotNetCore.CAP/IDispatcher.cs\n./src/DotNetCore.CAP/IProcessingServer.cs\n./src/DotNetCore.CAP/IPublishExecutor.cs\n./src/DotNetCore.CAP/IPublishMessageSender.Base.cs\n./src/DotNetCore.CAP/IPublishMessageSender.cs\n./src/DotNetCore.CAP/IStorage.cs\n./src/DotNetCore.CAP/IStorageConnection.cs\n./src/DotNetCore.CAP/IStorageTransaction.cs\n./src/DotNetCore.CAP/ISubscribeExecutor.Default.cs\n./src/DotNetCore.CAP/ISubscriberExecutor.cs\n./src/DotNetCore.CAP/Infrastructure\n./src/DotNetCore.CAP/Infrastructure/Helper.cs\n./src/DotNetCore.CAP/Infrastructure/ObjectId.cs\n./src/DotNetCore.CAP/Infrastructure/StatusName.cs\n./src/DotNetCore.CAP/Infrastructure/WaitHandleEx.cs\n./src/DotNetCore.CAP/LoggerExtensions.cs\n./src/DotNetCore.CAP/MessageContext.cs\n./src/DotNetCore.CAP/Models\n./src/DotNetCore.CAP/Models/CapMessageDto.cs\n./src/DotNetCore.CAP/Models/CapPublishedMessage.cs\n./src/DotNetCore.CAP/Models/CapQueue.cs\n./src/DotNetCore.CAP/Models/CapReceivedMessage.cs\n./src/DotNetCore.CAP/Models/MessageType.cs\n./src/DotNetCore.CAP/MqLogType.cs\n./src/DotNetCore.CAP/NodeDiscovery\n./src/DotNetCore.CAP/NodeDiscovery/CAP.DiscoveryOptions.cs\n./src/DotNetCore.CAP/NodeDiscovery/CAP.DiscoveryOptionsExtensions.cs\n./src/DotNetCore.CAP/NodeDiscovery/IDiscoveryProviderFactory.Default.cs\n./src/DotNetCore.CAP/NodeDiscovery/IDiscoveryProviderFactory.cs\n./src/DotNetCore.CAP/NodeDiscovery/INodeDiscoveryProvider.Consul.cs\n./src/DotNetCore.CAP/NodeDiscovery/INodeDiscoveryProvider.cs\n./src/DotNetCore.CAP/NodeDiscovery/IProcessingServer.Consul.cs\n./src/DotNetCore.CAP/NodeDiscovery/Node.cs\n./src/DotNetCore.CAP/OperateResult.cs\n./test\n./test/DotNetCore.CAP.MySql.Test\n./test/DotNetCore.CAP.MySql.Test/MySqlStorageTest.cs\n./test/DotNetCore.CAP.MySql.Test/ConnectionUtil.cs\n./test/DotNetCore.CAP.MySql.Test/DatabaseTestHost.cs\n./test/DotNetCore.CAP.MySql.Test/DotNetCore.CAP.MySql.Test.csproj\n./test/DotNetCore.CAP.MySql.Test/MySqlStorageConnectionTest.cs\n./test/DotNetCore.CAP.MySql.Test/TestHost.cs\n./test/DotNetCore.CAP.Test\n./test/DotNetCore.CAP.Test/CAP.BuilderTest.cs\n./test/DotNetCore.CAP.Test/CallbackMessageSenderTest.cs\n./test/DotNetCore.CAP.Test/ConsumerInvokerFactoryTest.cs\n./test/DotNetCore.CAP.Test/ConsumerServiceSelectorTest.cs\n./test/DotNetCore.CAP.Test/DotNetCore.CAP.Test.csproj\n./test/DotNetCore.CAP.Test/JsonContentSerializerTest.cs\n./test/DotNetCore.CAP.Test/ModelBinderFactoryTest.cs\n./test/DotNetCore.CAP.Test/OperateResultTest.cs\n./test/DotNetCore.CAP.Test/Processor\n./test/DotNetCore.CAP.Test/Processor/DefaultDispatcherTest.cs\n./test/DotNetCore.CAP.Test/Processor/StateChangerTest.cs\n./test/DotNetCore.CAP.Test/QueueExecutorFactoryTest.cs\n./test/DotNetCore.CAP.Test/Sample.cs\n./test/DotNetCore.CAP.Test/SubscribeFinderTest.cs\n./test/DotNetCore.CAP.PostgreSql.Test\n./test/DotNetCore.CAP.PostgreSql.Test/ConnectionUtil.cs\n./test/DotNetCore.CAP.PostgreSql.Test/DatabaseTestHost.cs\n./test/DotNetCore.CAP.PostgreSql.Test/DotNetCore.CAP.PostgreSql.Test.csproj\n./test/DotNetCore.CAP.PostgreSql.Test/PostgreSqlStorageConnectionTest.cs\n./test/DotNetCore.CAP.PostgreSql.Test/PostgreSqlStorageTest.cs\n./test/DotNetCore.CAP.PostgreSql.Test/TestHost.cs\n./test/DotNetCore.CAP.SqlServer.Test\n./test/DotNetCore.CAP.SqlServer.Test/ConnectionUtil.cs\n./test/DotNetCore.CAP.SqlServer.Test/DatabaseTestHost.cs\n./test/DotNetCore.CAP.SqlServer.Test/DotNetCore.CAP.SqlServer.Test.csproj\n./test/DotNetCore.CAP.SqlServer.Test/SqlServerStorageConnectionTest.cs\n./test/DotNetCore.CAP.SqlServer.Test/SqlServerStorageTest.cs\n./test/DotNetCore.CAP.SqlServer.Test/TestHost.cs\n./.gitattributes\n./.gitignore\n./.travis.yml\n./CAP.sln\n./CAP.vssettings\n./README.md\n./README.zh-cn.md\n./appveyor.yml\n./build.cake\n./build.ps1\n./build.sh\n",
    "readme": "\n--- ./README.md ---\n# CAP \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000[\u4e2d\u6587](https://github.com/dotnetcore/CAP/blob/develop/README.zh-cn.md)\n[![Travis branch](https://img.shields.io/travis/dotnetcore/CAP/develop.svg?label=travis-ci)](https://travis-ci.org/dotnetcore/CAP)\n[![AppVeyor](https://ci.appveyor.com/api/projects/status/4mpe0tbu7n126vyw?svg=true)](https://ci.appveyor.com/project/yuleyule66/cap)\n[![NuGet](https://img.shields.io/nuget/v/DotNetCore.CAP.svg)](https://www.nuget.org/packages/DotNetCore.CAP/)\n[![NuGet Preview](https://img.shields.io/nuget/vpre/DotNetCore.CAP.svg?label=nuget-pre)](https://www.nuget.org/packages/DotNetCore.CAP/)\n[![Member project of .NET China Foundation](https://img.shields.io/badge/member_project_of-.NET_CHINA-red.svg?style=flat&colorB=9E20C8)](https://github.com/dotnetcore)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/dotnetcore/CAP/master/LICENSE.txt)\n\nCAP is a library based on .Net standard, which is a solution to deal with distributed transactions, also has the function of EventBus, it is lightweight, easy to use, and efficiently.\n\n## OverView\n\nIn the process of building an SOA or MicroService system, we usually need to use the event to integrate each services. In the process, the simple use of message queue does not guarantee the reliability. CAP is adopted the local message table program integrated with the current database to solve the exception may occur in the process of the distributed system calling each other. It can ensure that the event messages are not lost in any case.\n\nYou can also use the CAP as an EventBus. The CAP provides a simpler way to implement event publishing and subscriptions. You do not need to inherit or implement any interface during the process of subscription and sending.\n\nThis is a diagram of the CAP working in the ASP.NET Core MicroService architecture:\n\n![](http://images2015.cnblogs.com/blog/250417/201707/250417-20170705175827128-1203291469.png)\n\n> The solid line in the figure represents the user code, and the dotted line represents the internal implementation of the CAP.\n\n## Getting Started\n\n### NuGet\n\nYou can run the following command to install the CAP in your project.\n\n```\nPM> Install-Package DotNetCore.CAP\n```\n\nIf you want use Kafka to send integrating event, installing by:\n\n```\nPM> Install-Package DotNetCore.CAP.Kafka\n```\n\nIf you want use RabbitMQ to send integrating event, installing by:\n\n```\nPM> Install-Package DotNetCore.CAP.RabbitMQ\n```\n\nCAP supports SqlServer, MySql, PostgreSql as event log storage. \n\n```\n\n// select a database provider you are using, event log table will integrate into.\n\nPM> Install-Package DotNetCore.CAP.SqlServer\nPM> Install-Package DotNetCore.CAP.MySql\nPM> Install-Package DotNetCore.CAP.PostgreSql\n```\n\n### Configuration\n\nFirst,You need to config CAP in your Startup.cs\uff1a\n\n```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    //......\n\n    services.AddDbContext<AppDbContext>();\n\n    services.AddCap(x =>\n    {\n        // If you are using EF, you need to add the following configuration\uff1a\n        // Notice: You don't need to config x.UseSqlServer(\"\"\") again! CAP can autodiscovery.\n        x.UseEntityFramework<AppDbContext>();\n\n        // If you are using ado.net,you need to add the configuration\uff1a\n        x.UseSqlServer(\"Your ConnectionStrings\");\n        x.UseMySql(\"Your ConnectionStrings\");\n        x.UsePostgreSql(\"Your ConnectionStrings\");\n\t\t\n        // If you are using RabbitMQ, you need to add the configuration\uff1a\n        x.UseRabbitMQ(\"localhost\");\n\n        // If you are using Kafka, you need to add the configuration\uff1a\n        x.UseKafka(\"localhost\");\n    });\n}\n\npublic void Configure(IApplicationBuilder app)\n{\n    //.....\n\n    app.UseCap();\n}\n\n```\n\n### Publish\n\nInject `ICapPublisher` in your Controller, then use the `ICapPublisher` to send message\n\n```c#\npublic class PublishController : Controller\n{\n    [Route(\"~/publishWithTransactionUsingEF\")]\n    public async Task<IActionResult> PublishMessageWithTransactionUsingEF([FromServices]AppDbContext dbContext, [FromServices]ICapPublisher publisher)\n    {\n        using (var trans = dbContext.Database.BeginTransaction())\n        {\n            // your business code\n\n            //If you are using EF, CAP will automatic discovery current environment transaction, so you do not need to explicit pass parameters.\n            //Achieving atomicity between original database operation and the publish event log thanks to a local transaction.\n            await publisher.PublishAsync(\"xxx.services.account.check\", new Person { Name = \"Foo\", Age = 11 });\n\n            trans.Commit();\n        }\n        return Ok();\n    }\n\n    [Route(\"~/publishWithTransactionUsingAdonet\")]\n    public async Task<IActionResult> PublishMessageWithTransactionUsingAdonet([FromServices]ICapPublisher publisher)\n    {\n        var connectionString = \"\";\n        using (var sqlConnection = new SqlConnection(connectionString))\n        {\n            sqlConnection.Open();\n            using (var sqlTransaction = sqlConnection.BeginTransaction())\n            {\n                // your business code\n\n                publisher.Publish(\"xxx.services.account.check\", new Person { Name = \"Foo\", Age = 11 }, sqlTransaction);\n\n                sqlTransaction.Commit();\n            }\n        }\n        return Ok();\n    }\n}\n\n```\n\n### Subscribe\n\n**Action Method**\n\nAdd the Attribute `[CapSubscribe()]` on Action to subscribe message:\n\n```c#\npublic class PublishController : Controller\n{\n    [CapSubscribe(\"xxx.services.account.check\")]\n    public async Task CheckReceivedMessage(Person person)\n    {\n        Console.WriteLine(person.Name);\n        Console.WriteLine(person.Age);     \n        return Task.CompletedTask;\n    }\n}\n\n```\n\n**Service Method**\n\nIf your subscribe method is not in the Controller,then your subscribe class need to Inheritance `ICapSubscribe`: \n\n```c#\n\nnamespace xxx.Service\n{\n    public interface ISubscriberService\n    {\n        public void CheckReceivedMessage(Person person);\n    }\n\n\n    public class SubscriberService: ISubscriberService, ICapSubscribe\n    {\n        [CapSubscribe(\"xxx.services.account.check\")]\n        public void CheckReceivedMessage(Person person)\n        {\n        }\n    }\n}\n\n```\n\nThen inject your  `ISubscriberService`  class in Startup.cs \n\n```c#\npublic void ConfigureServices(IServiceCollection services)\n{\n    //Note: The injection of services needs before of `services.AddCap()`\n    services.AddTransient<ISubscriberService,SubscriberService>();\n\t\n    services.AddCap(x=>{});\n}\n```\n\n### Dashboard\n\nCAP 2.1 and above provides the dashboard pages, you can easily view the sent and received messages. In addition, you can also view the  message status in real time on the dashboard.\n\nIn the distributed environment, the dashboard built-in integrated [Consul](http://consul.io) as a node discovery, while the realization of the gateway agent function, you can also easily view the node or other node data, It's like you are visiting local resources.\n\n```c#\nservices.AddCap(x =>\n{\n    //...\n    \n    // Register Dashboard\n    x.UseDashboard();\n    \n    // Register to Consul\n    x.UseDiscovery(d =>\n    {\n        d.DiscoveryServerHostName = \"localhost\";\n        d.DiscoveryServerPort = 8500;\n        d.CurrentNodeHostName = \"localhost\";\n        d.CurrentNodePort = 5800;\n        d.NodeId = 1;\n        d.NodeName = \"CAP No.1 Node\";\n    });\n});\n```\n\nThe default dashboard address is :[http://localhost:xxx/cap](http://localhost:xxx/cap) , you can also change the `cap` suffix to others with `d.MatchPath` configuration options.\n\n![dashboard](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004220827302-189215107.png)\n\n![received](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004220934115-1107747665.png)\n\n![subscibers](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004220949193-884674167.png)\n\n![nodes](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004221001880-1162918362.png)\n\n\n## Contribute\n\nOne of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes.\n\n### License\n\n[MIT](https://github.com/dotnetcore/CAP/blob/master/LICENSE.txt)\n\n\n\n--- ./README.zh-cn.md ---\n# CAP \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000[English](https://github.com/dotnetcore/CAP/blob/develop/README.md)\n[![Travis branch](https://img.shields.io/travis/dotnetcore/CAP/develop.svg?label=travis-ci)](https://travis-ci.org/dotnetcore/CAP)\n[![AppVeyor](https://ci.appveyor.com/api/projects/status/4mpe0tbu7n126vyw?svg=true)](https://ci.appveyor.com/project/yuleyule66/cap)\n[![NuGet](https://img.shields.io/nuget/v/DotNetCore.CAP.svg)](https://www.nuget.org/packages/DotNetCore.CAP/)\n[![NuGet Preview](https://img.shields.io/nuget/vpre/DotNetCore.CAP.svg?label=nuget-pre)](https://www.nuget.org/packages/DotNetCore.CAP/)\n[![Member project of .NET China Foundation](https://img.shields.io/badge/member_project_of-.NET_CHINA-red.svg?style=flat&colorB=9E20C8)](https://github.com/dotnetcore)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/dotnetcore/CAP/master/LICENSE.txt)\n\nCAP \u662f\u4e00\u4e2a\u57fa\u4e8e .NET Standard \u7684 C# \u5e93\uff0c\u5b83\u662f\u4e00\u79cd\u5904\u7406\u5206\u5e03\u5f0f\u4e8b\u52a1\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u540c\u6837\u5177\u6709 EventBus \u7684\u529f\u80fd\uff0c\u5b83\u5177\u6709\u8f7b\u91cf\u7ea7\u3001\u6613\u4f7f\u7528\u3001\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002\n\n\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc[CAP Wiki](https://github.com/dotnetcore/CAP/wiki)\u770b\u5230\u66f4\u591a\u8be6\u7ec6\u8d44\u6599\u3002\n\n## \u9884\u89c8\uff08OverView\uff09\n\n\u5728\u6211\u4eec\u6784\u5efa SOA \u6216\u8005 \u5fae\u670d\u52a1\u7cfb\u7edf\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u4f7f\u7528\u4e8b\u4ef6\u6765\u5bf9\u5404\u4e2a\u670d\u52a1\u8fdb\u884c\u96c6\u6210\uff0c\u5728\u8fd9\u8fc7\u7a0b\u4e2d\u7b80\u5355\u7684\u4f7f\u7528\u6d88\u606f\u961f\u5217\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u6570\u636e\u7684\u6700\u7ec8\u4e00\u81f4\u6027\uff0c\nCAP \u91c7\u7528\u7684\u662f\u548c\u5f53\u524d\u6570\u636e\u5e93\u96c6\u6210\u7684\u672c\u5730\u6d88\u606f\u8868\u7684\u65b9\u6848\u6765\u89e3\u51b3\u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e92\u76f8\u8c03\u7528\u7684\u5404\u4e2a\u73af\u8282\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\uff0c\u5b83\u80fd\u591f\u4fdd\u8bc1\u4efb\u4f55\u60c5\u51b5\u4e0b\u4e8b\u4ef6\u6d88\u606f\u90fd\u662f\u4e0d\u4f1a\u4e22\u5931\u7684\u3002\n\n\u4f60\u540c\u6837\u53ef\u4ee5\u628a CAP \u5f53\u505a EventBus \u6765\u4f7f\u7528\uff0cCAP\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u52a0\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u4e8b\u4ef6\u6d88\u606f\u7684\u53d1\u5e03\u548c\u8ba2\u9605\uff0c\u5728\u8ba2\u9605\u4ee5\u53ca\u53d1\u5e03\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u7ee7\u627f\u6216\u5b9e\u73b0\u4efb\u4f55\u63a5\u53e3\u3002\n\n\u8fd9\u662fCAP\u96c6\u5728ASP.NET Core \u5fae\u670d\u52a1\u67b6\u6784\u4e2d\u7684\u4e00\u4e2a\u793a\u610f\u56fe\uff1a\n\n![](http://images2015.cnblogs.com/blog/250417/201707/250417-20170705175827128-1203291469.png)\n\n> \u56fe\u4e2d\u5b9e\u7ebf\u90e8\u5206\u4ee3\u8868\u7528\u6237\u4ee3\u7801\uff0c\u865a\u7ebf\u90e8\u5206\u4ee3\u8868CAP\u5185\u90e8\u5b9e\u73b0\u3002\n\n## Getting Started\n\n### NuGet \n\n\u4f60\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u4e0b\u547d\u4ee4\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u5b89\u88c5 CAP\u3002\n\n```\nPM> Install-Package DotNetCore.CAP\n```\n\n\u5982\u679c\u4f60\u7684\u6d88\u606f\u961f\u5217\u4f7f\u7528\u7684\u662f Kafka \u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\uff1a\n\n```\nPM> Install-Package DotNetCore.CAP.Kafka\n```\n\n\u5982\u679c\u4f60\u7684\u6d88\u606f\u961f\u5217\u4f7f\u7528\u7684\u662f RabbitMQ \u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\uff1a\n\n```\nPM> Install-Package DotNetCore.CAP.RabbitMQ\n```\n\nCAP \u63d0\u4f9b\u4e86 Sql Server, MySql, PostgreSQL \u7684\u6269\u5c55\u4f5c\u4e3a\u6570\u636e\u5e93\u5b58\u50a8\uff1a\n\n```\n// \u6309\u9700\u9009\u62e9\u5b89\u88c5\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u6570\u636e\u5e93\nPM> Install-Package DotNetCore.CAP.SqlServer\nPM> Install-Package DotNetCore.CAP.MySql\nPM> Install-Package DotNetCore.CAP.PostgreSql\n```\n\n### Configuration\n\n\u9996\u5148\u914d\u7f6eCAP\u5230 Startup.cs \u6587\u4ef6\u4e2d\uff0c\u5982\u4e0b\uff1a\n\n```c#\npublic void ConfigureServices(IServiceCollection services)\n{\n    ......\n\n    services.AddDbContext<AppDbContext>();\n\n    services.AddCap(x =>\n    {\n        // \u5982\u679c\u4f60\u7684 SqlServer \u4f7f\u7528\u7684 EF \u8fdb\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a\n        // \u6ce8\u610f: \u4f60\u4e0d\u9700\u8981\u518d\u6b21\u914d\u7f6e x.UseSqlServer(\"\"\")\n        x.UseEntityFramework<AppDbContext>();\n\t\t\n        // \u5982\u679c\u4f60\u4f7f\u7528\u7684Dapper\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a\n        x.UseSqlServer(\"\u6570\u636e\u5e93\u8fde\u63a5\u5b57\u7b26\u4e32\");\n\n        // \u5982\u679c\u4f60\u4f7f\u7528\u7684 RabbitMQ \u4f5c\u4e3aMQ\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a\n        x.UseRabbitMQ(\"localhost\");\n\n        //\u5982\u679c\u4f60\u4f7f\u7528\u7684 Kafka \u4f5c\u4e3aMQ\uff0c\u4f60\u9700\u8981\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a\n        x.UseKafka(\"localhost\");\n    });\n}\n\npublic void Configure(IApplicationBuilder app)\n{\n    .....\n\n    app.UseCap();\n}\n\n```\n\n### \u53d1\u5e03\n\n\u5728 Controller \u4e2d\u6ce8\u5165 `ICapPublisher` \u7136\u540e\u4f7f\u7528 `ICapPublisher` \u8fdb\u884c\u6d88\u606f\u53d1\u9001\n\n```c#\npublic class PublishController : Controller\n{\n    [Route(\"~/checkAccountWithTrans\")]\n    public async Task<IActionResult> PublishMessageWithTransaction([FromServices]AppDbContext dbContext, [FromServices]ICapPublisher publisher)\n    {\n        using (var trans = dbContext.Database.BeginTransaction())\n        {\n            // \u6b64\u5904\u586b\u5199\u4f60\u7684\u4e1a\u52a1\u4ee3\u7801\n\n            //\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fEF\uff0cCAP\u4f1a\u81ea\u52a8\u53d1\u73b0\u5f53\u524d\u73af\u5883\u4e2d\u7684\u4e8b\u52a1\uff0c\u6240\u4ee5\u4f60\u4e0d\u5fc5\u663e\u5f0f\u4f20\u9012\u4e8b\u52a1\u53c2\u6570\u3002\n            //\u7531\u4e8e\u672c\u5730\u4e8b\u52a1, \u5f53\u524d\u6570\u636e\u5e93\u7684\u4e1a\u52a1\u64cd\u4f5c\u548c\u53d1\u5e03\u4e8b\u4ef6\u65e5\u5fd7\u4e4b\u95f4\u5c06\u5b9e\u73b0\u539f\u5b50\u6027\u3002\n            await publisher.PublishAsync(\"xxx.services.account.check\", new Person { Name = \"Foo\", Age = 11 });\n\n            trans.Commit();\n        }\n        return Ok();\n    }\n\n    [Route(\"~/publishWithTransactionUsingAdonet\")]\n    public async Task<IActionResult> PublishMessageWithTransactionUsingAdonet([FromServices]ICapPublisher publisher)\n    {\n        var connectionString = \"\";\n        using (var sqlConnection = new SqlConnection(connectionString))\n        {\n            sqlConnection.Open();\n            using (var sqlTransaction = sqlConnection.BeginTransaction())\n            {\n                // \u6b64\u5904\u586b\u5199\u4f60\u7684\u4e1a\u52a1\u4ee3\u7801\uff0c\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c06\u4e1a\u52a1\u4ee3\u7801\u4f7f\u7528\u4e00\u4e2a\u59d4\u6258\u4f20\u9012\u8fdb\u6765\u8fdb\u884c\u5c01\u88c5\u8be5\u533a\u57df\u4ee3\u7801\u3002\n\n                publisher.Publish(\"xxx.services.account.check\", new Person { Name = \"Foo\", Age = 11 }, sqlTransaction);\n\n                sqlTransaction.Commit();\n            }\n        }\n        return Ok();\n    }\n}\n\n```\n\n### \u8ba2\u9605\n\n**Action Method**\n\n\u5728 Action \u4e0a\u6dfb\u52a0 CapSubscribeAttribute \u6765\u8ba2\u9605\u76f8\u5173\u6d88\u606f\u3002\n\n```c#\npublic class PublishController : Controller\n{\n    [CapSubscribe(\"xxx.services.account.check\")]\n    public async Task CheckReceivedMessage(Person person)\n    {\n        Console.WriteLine(person.Name);\n        Console.WriteLine(person.Age);     \n        return Task.CompletedTask;\n    }\n}\n\n```\n\n**Service Method**\n\n\u5982\u679c\u4f60\u7684\u8ba2\u9605\u65b9\u6cd5\u6ca1\u6709\u4f4d\u4e8e Controller \u4e2d\uff0c\u5219\u4f60\u8ba2\u9605\u7684\u7c7b\u9700\u8981\u7ee7\u627f `ICapSubscribe`\uff1a\n\n```c#\n\nnamespace xxx.Service\n{\n    public interface ISubscriberService\n    {\n        public void CheckReceivedMessage(Person person);\n    }\n\n\n    public class SubscriberService: ISubscriberService, ICapSubscribe\n    {\n        [CapSubscribe(\"xxx.services.account.check\")]\n        public void CheckReceivedMessage(Person person)\n        {\n\t\t\t\n        }\n    }\n}\n\n```\n\n\u7136\u540e\u5728 Startup.cs \u4e2d\u7684 `ConfigureServices()` \u4e2d\u6ce8\u5165\u4f60\u7684  `ISubscriberService` \u7c7b\n\n```c#\npublic void ConfigureServices(IServiceCollection services)\n{\n    //\u6ce8\u610f: \u6ce8\u5165\u7684\u670d\u52a1\u9700\u8981\u5728 `services.AddCap()` \u4e4b\u524d\n    services.AddTransient<ISubscriberService,SubscriberService>();\n\t\n    services.AddCap(x=>{});\n}\n```\n\n### Dashboard\n\nCAP 2.1+ \u4ee5\u4e0a\u7248\u672c\u4e2d\u63d0\u4f9b\u4e86\u4eea\u8868\u76d8\uff08Dashboard\uff09\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u67e5\u770b\u53d1\u51fa\u548c\u63a5\u6536\u5230\u7684\u6d88\u606f\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5728\u4eea\u8868\u76d8\u4e2d\u5b9e\u65f6\u67e5\u770b\u53d1\u9001\u6216\u8005\u63a5\u6536\u5230\u7684\u6d88\u606f\u3002 \n\n\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\uff0c\u4eea\u8868\u76d8\u5185\u7f6e\u96c6\u6210\u4e86 [Consul](http://consul.io) \u4f5c\u4e3a\u8282\u70b9\u7684\u6ce8\u518c\u53d1\u73b0\uff0c\u540c\u65f6\u5b9e\u73b0\u4e86\u7f51\u5173\u4ee3\u7406\u529f\u80fd\uff0c\u4f60\u540c\u6837\u53ef\u4ee5\u65b9\u4fbf\u7684\u67e5\u770b\u672c\u8282\u70b9\u6216\u8005\u5176\u4ed6\u8282\u70b9\u7684\u6570\u636e\uff0c\u5b83\u5c31\u50cf\u4f60\u8bbf\u95ee\u672c\u5730\u8d44\u6e90\u4e00\u6837\u3002\n\n```c#\nservices.AddCap(x =>\n{\n    //...\n    \n    // \u6ce8\u518c Dashboard\n    x.UseDashboard();\n    \n    // \u6ce8\u518c\u8282\u70b9\u5230 Consul\n    x.UseDiscovery(d =>\n    {\n        d.DiscoveryServerHostName = \"localhost\";\n        d.DiscoveryServerPort = 8500;\n        d.CurrentNodeHostName = \"localhost\";\n        d.CurrentNodePort = 5800;\n        d.NodeId = 1;\n        d.NodeName = \"CAP No.1 Node\";\n    });\n});\n```\n\n\u4eea\u8868\u76d8\u9ed8\u8ba4\u7684\u8bbf\u95ee\u5730\u5740\u662f\uff1a[http://localhost:xxx/cap](http://localhost:xxx/cap)\uff0c\u4f60\u53ef\u4ee5\u5728`d.MatchPath`\u914d\u7f6e\u9879\u4e2d\u4fee\u6539`cap`\u8def\u5f84\u540e\u7f00\u4e3a\u5176\u4ed6\u7684\u540d\u5b57\u3002\n\n![dashboard](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004220827302-189215107.png)\n\n![received](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004220934115-1107747665.png)\n\n![subscibers](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004220949193-884674167.png)\n\n![nodes](http://images2017.cnblogs.com/blog/250417/201710/250417-20171004221001880-1162918362.png)\n\n## \u8d21\u732e\n\n\u8d21\u732e\u7684\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u4e4b\u4e00\u5c31\u662f\u662f\u53c2\u4e0e\u8ba8\u8bba\u548c\u8ba8\u8bba\u95ee\u9898\uff08issue\uff09\u3002\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u63d0\u4ea4\u7684 Pull Request \u4ee3\u7801\u53d8\u66f4\u4f5c\u51fa\u8d21\u732e\u3002\n\n### License\n\nMIT\n\n\n",
    "readme_filenames": [
      "./README.md",
      "./README.zh-cn.md"
    ]
  },
  "llm_calls_before_build": 0,
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM mcr.microsoft.com/dotnet/sdk:6.0\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y git\n\n# Clone repository and checkout specific commit with fix verification\nRUN git clone https://github.com/dotnetcore/CAP.git /app\nWORKDIR /app\nRUN git checkout 3a8bcf0324423c63712db70c62ecdb38564072fa\n\n# Restore NuGet packages and build solution\nRUN dotnet restore CAP.sln\nRUN dotnet build CAP.sln --configuration Release --no-restore",
  "dockerfile_build_success": true,
  "successful_candidate_index": 3,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "llm_calls_total": 5
}