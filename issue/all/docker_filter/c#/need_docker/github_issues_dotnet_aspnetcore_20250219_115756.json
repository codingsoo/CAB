[
  {
    "number": 55997,
    "title": "Better UX - show \"loading\" (anything) while app is starting up the .NET WebAssembly runtime (for AutoRender, prerender false) ",
    "created_at": "2024-05-31T13:57:54Z",
    "closed_at": "2024-06-01T11:49:41Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/55997",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Is your feature request related to a problem? Please describe the problem.\n\nIs there any way how to show some animation or anything while cached WASM is starting up? I found solution to force downloading resources every time so it can be render by server first but it costs resources of course.\n\n### Describe the solution you'd like\n\nI would like to have option to display loading animation on component level while WASMis starting up.\n\n### Additional context\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/55997/comments",
    "author": "Laftek",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2024-05-31T17:49:20Z",
        "body": "@Laftek thanks for contacting us.\r\n\r\nYou should already be able to do this with CSS by wrapping your webassembly component in a `div` and having an animation run on the div when the element is empty if you aren't prerendering.\r\n\r\nIf you are prerendering, you can render different content during prerendering.\r\n\r\nIf you want to do this completely in Blazor, create a component wrapper and have that component render your component."
      },
      {
        "user": "Laftek",
        "created_at": "2024-05-31T18:01:32Z",
        "body": "Thank you @javiercn for suggestions. What can I use as reference element for if statement? Is there any API for wasm to be \u201cloaded\u201d?\r\n\r\nAlso could you point me to some resources regarding prerendering different content? It sounds interesting. Is there out of box blazor solution or you meant some custom javascript script?"
      },
      {
        "user": "javiercn",
        "created_at": "2024-05-31T19:28:15Z",
        "body": "@Laftek just HTML and CSS\r\n```\r\n<div class=\"my-class\"></div>\r\n\r\n<style>\r\n.my-class:not(:has(*)) {\r\n   background-image: url(\"data:....\");\r\n}\r\n</style>\r\n```\r\n\r\nThe moment that the wasm component renders inside the div the styles stop being applicable."
      },
      {
        "user": "Laftek",
        "created_at": "2024-06-01T11:49:42Z",
        "body": "Thanks @javiercn . Works like a charm!"
      }
    ],
    "satisfaction_conditions": [
      "Provides a way to display a loading indicator during WASM runtime initialization without requiring server-side prerendering",
      "Uses standard web platform features (HTML/CSS) or Blazor component lifecycle methods",
      "Automatically hides loading indicator when WASM component becomes interactive"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:01:47"
    }
  },
  {
    "number": 54263,
    "title": "Blazor Component (using RenderMode Interactive Server) - Incorrect Behavior on Navigating between pages, Component is not re-created",
    "created_at": "2024-02-28T20:01:31Z",
    "closed_at": "2024-02-29T17:44:51Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/54263",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI have 2 pages, Page1, Page2. Both pages use the same Counter component with render mode: interactive server that is specified on the Counter components. \r\n\r\n`<Counter @rendermode=\"InteractiveServer\"></Counter>`\r\n\r\nNOTE: The Counter component inside its mark up does not specify render mode.\r\nEach page also contains a navigation link to the other page.\r\n\r\nWhen a user is on Page1 and increments the counter and then navigates (using anchor link) to Page 2 (that has also a Counter) the count is retained from Page1. Then, incrementing Counter on Page2 continues the count. When user navigates back Page1 (using anchor link) the count is now the sum of counts from Page1 and Page2.\r\n\r\n### Expected Behavior\r\n\r\nI expect the component to be re-created and its state reset once a user navigates to another page from current page.\r\nThat does not happen. The counter component appears to live (and retain its state) across page navigations using an anchor tag.\r\n\r\n_If this is the correct behavior for an interactive server side component using web socket connection in an SSR page then how can we re-use components across pages without retaining component state?_\r\n\r\n### Steps To Reproduce\r\n\r\nCreate a sample SSR blazor app, select interactivity per component. \r\nCreate 2 pages.\r\nPlace Counter component on both pages.\r\nNOTE: Remove from the Counter component the \"@rendermode InteractiveServer\", instead place render modes explicitly where you use the counter on each page as:\r\n\r\n`<Counter @rendermode=\"InteractiveServer\"></Counter>`\r\n\r\nAdd this mark up to navigate between the pages:\r\n\r\n`<a href=\"/Page2\">Go to page 2</a>`\r\n\r\n`<a href=\"/Page1\">Go to page 1</a>`\r\n\r\nGo to page 1, increment counter, use link to go to page 2 (observe the count is from page 1). Increment counter again and go back to page 1 (observe the count continues from page 2).\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n.net 8 Blazor SSR Interactive Server\r\n\r\n### Anything else?\r\n\r\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/54263/comments",
    "author": "htmlsplash",
    "comments": [
      {
        "user": "htmlsplash",
        "created_at": "2024-02-28T22:29:21Z",
        "body": "UPDATE: Interesting observation\r\n\r\nIf I inject into the SSR Page1 (or Page2) current user accessed from current Http context (which changes between page requests by me logging-out from User1 and logging-in as User2 before going from Page1 to Page2) and pass that to the Counter component as a parameter, that triggers/forces the component to be re-created and the component state is reset.\r\n\r\nThis behavior is opposite to the re-use of the component across pages behavior reported above."
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2024-02-29T17:44:51Z",
        "body": "Thanks for contacting us. This behavior is by design and it's done to optimize DOM manipulations. The framework tries to retain as much of the content in the page as possible, so that only minimal changes are applied. In your case, you don't want this behavior, and you can control that by applying the `@key` directive to the `Counter` components on each page, specifying different values, so that the DOM Merging algorithm doesn't think that they're the same component to be preserved."
      },
      {
        "user": "htmlsplash",
        "created_at": "2024-02-29T19:09:39Z",
        "body": "Thanks, that resolved the issue. I don't want to be a party pooper but I think this is a dangerous default. \r\n\r\nImagine a page (Page1) with many components and then another unrelated page (Page10) has also many components but one of these components is the same as on Page1. This will result in the component (and its state) to appear on Page10 (from Page1). \r\nTo make matters worse, consider an example of user page navigation that is considered a normal flow: \r\n\r\nPage1, Page2, Page3. \r\n\r\nBut in a rare case when the user performs some action that allows them to navigate like this: \r\n\r\nPage1, Page10, Page2, Page3.\r\n\r\nNow you have this rare bug surface itself on the site because when going from Page1 to Page10, or from Page10 to Page1 will share the same component with its state.\r\n\r\nWith the workaround solution (in a framework were component re-use is common) and to avoid this default sharing behavior is to specify a key on every component placed on page at all times.  Otherwise, inadvertently, you might end up with undesired behavior. I wonder if could better then this?\r\n\r\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to force component state reset during page navigation in Blazor SSR",
      "Clear guidance on preventing unintended state sharing between identical components on different pages",
      "Identification of framework behavior patterns affecting component reuse in navigation scenarios",
      "Solution that doesn't require parameter changes to force component recreation",
      "Guidance on implementing predictable component lifecycle management"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:01:58"
    }
  },
  {
    "number": 52708,
    "title": "Catch-all route at the root level doesn't work any more in .NET 8",
    "created_at": "2023-12-10T14:51:53Z",
    "closed_at": "2023-12-11T13:36:05Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/52708",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nI have an application with very few pages, where one is mainly active and catches all the remaining URLs as a part of its logic. In .NET 7, It was enough to annotate that page with `@page \"/{*pageRoute}\"` and declare the corresponding parameter `[Parameter] public string? PageRoute { get; set; }`. But it stopped working when I upgraded to .NET 8 (Blazor United) and started showing a white screen and an exception in the browser's console.\n\n### Expected Behavior\n\nIt should catch the rest of the URLs that didn't match with other routes .\n\n### Steps To Reproduce\n\n1. Create a net .NET 8 Blazor United app with interactive web assembly with pre-rendering turned OFF.\r\n2. Delete pages but the Index.\r\n3. Annotate the Index page with `@page \"/{*pageRoute}\"` and declare a parameter for it `[Parameter] public string? PageRoute { get; set; }`\r\n4. Run the app; you should see a white screen with an error in the console.\n\n### Exceptions (if any)\n\n```\r\nblazor.web.js:1  Error: One or more errors occurred. ('<' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 0.)\r\n    at Jn (marshal-to-js.ts:349:18)\r\n    at Ul (marshal-to-js.ts:306:28)\r\n    at 00b1e8b6:0x1faca\r\n    at 00b1e8b6:0x1bf8b\r\n    at 00b1e8b6:0xf172\r\n    at 00b1e8b6:0x1e7e4\r\n    at 00b1e8b6:0x1efda\r\n    at 00b1e8b6:0xcfec\r\n    at 00b1e8b6:0x440ad\r\n    at e.<computed> (cwraps.ts:338:24)\r\ncallEntryPoint @ blazor.web.js:1\r\n```\n\n### .NET Version\n\n8.0.100\n\n### Anything else?\n\nIt works if the catch-all wildcard is not placed at the root level but after a URI segment.\r\nWe need a way to allow routes without explicitly listing them in razor pages.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/52708/comments",
    "author": "gdar91",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2023-12-11T13:28:07Z",
        "body": "@gdar91 thanks for contacting us.\r\n\r\nIn .NET 8.0 routing is integrated with ASP.NET Core routing, what's happening is that your route is \"too general\" and is intercepting requests for files. You need to add `:nonfile` to the route to avoid capturing paths with an extension."
      },
      {
        "user": "gdar91",
        "created_at": "2023-12-11T13:36:06Z",
        "body": "> @gdar91 thanks for contacting us.\r\n> \r\n> In .NET 8.0 routing is integrated with ASP.NET Core routing, what's happening is that your route is \"too general\" and is intercepting requests for files. You need to add `:nonfile` to the route to avoid capturing paths with an extension.\r\n\r\nThank you, it worked with `:nonfile`. I changed the attribute to this: `@page \"/{*pageRoute:nonfile}\"`."
      }
    ],
    "satisfaction_conditions": [
      "Solution must prevent catch-all routes from intercepting file requests",
      "Must maintain ability to handle dynamic routes without explicit registration",
      "Solution must be compatible with .NET 8's integrated routing system",
      "Must preserve parameter binding functionality for captured route segments"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:02:08"
    }
  },
  {
    "number": 48748,
    "title": "Blazor WebAssembly not caching in browser",
    "created_at": "2023-06-13T06:09:15Z",
    "closed_at": "2023-06-13T10:30:43Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/48748",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nBlazor WebAssembly is caching libraries to browser's Cache Storage only on localhost access.\r\n\r\nWhen i was starting to develop WASM project, i've inspected browser cache to make sure that dotnet and other libraries are cached and next startups are faster (sha checks, returned statuses 204, cache is used). This works well. But after publishing the project to IIS hosting and accessing the page over the internet, libraries are never stored in browser cache. So effectively, libraries are always downloaded. Running browser on the same machine where the IIS is located works and libraries are cached (same as running browser directly from VS in development). I've tried this on default projects in .net6 and .net7 and the behaviour is the same.\r\n\r\nI must be missing something basic here...\n\n### Expected Behavior\n\nLibraries are cached to browser regardless if the page is accessed localy or remotely over the internet.\n\n### Steps To Reproduce\n\nIn VS:\r\n\r\n- create new \"Blazor WebAssembly App\"\r\n- check off \"Configure for HTTPS\"\r\n- publish (i'm using just the directory publish with manual copy of files to created web page on iis)\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n7.0.302\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/48748/comments",
    "author": "ns6000",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2023-06-13T10:18:52Z",
        "body": "@ns6000 thanks for contacting us.\r\n\r\nCaching depends on the caching APIs that are only available in secure context. We don't do caching over HTTP because the APIs are not available."
      },
      {
        "user": "ns6000",
        "created_at": "2023-06-13T10:30:43Z",
        "body": "Thank you, understood. It will be accessible over HTTPS only in the real world production deployment so it's not a problem.\r\n\r\nJust a humble suggestion, I think this could be mentioned somewhere in the docs (if it's not already and I missed it)."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why caching behavior differs between localhost and remote HTTPS environments"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:02:27"
    }
  },
  {
    "number": 39884,
    "title": "Duplicated client assemblies after publish",
    "created_at": "2022-01-31T07:53:37Z",
    "closed_at": "2022-01-31T10:50:48Z",
    "labels": [
      "question",
      "area-blazor",
      "feature-blazor-wasm",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved",
      "feature-blazor-deployment"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/39884",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nIf i publish a ASP.NET Core hosted web assembly blazor app (using the provided template), then client  assemblies are duplicated in publish folder. Once in wwwroot/_framework folder (with i assume is the right behavior) and once in the publish root folder next to all server assemblies.\n\n### Expected Behavior\n\nAll client assemblies occuring only once in wwwroot/_framework folder after publish.\n\n### Steps To Reproduce\n\n- Create a new ASP.NET Core hosted web assembly blazor app (using the template)\r\n- dotnet publish ./Server.csproj\r\n- Navigate to publish output\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.101\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/39884/comments",
    "author": "Fabster1993",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2022-01-31T10:18:44Z",
        "body": "@Fabster1993 thanks for contacting us.\r\n\r\nThat's expected and by design. Assemblies in `wwwroot/_framework` are trimmed and meant for consumption on the browser, while assemblies on the publish folder are meant for consumption by the server app, for example, when prerendering the app.\r\n\r\nHope this helps."
      },
      {
        "user": "Fabster1993",
        "created_at": "2022-01-31T10:21:19Z",
        "body": "@javiercn Oh, that makes sense. Thank you for the answer!"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why client assemblies appear in both locations",
      "Confirmation this is intentional behavior rather than a bug",
      "Clarification of different purposes for each assembly location"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:03:18"
    }
  },
  {
    "number": 20409,
    "title": "Razor Class Library static files inaccessible in any ASPNETCORE_ENVIRONMENT other than Development",
    "created_at": "2020-04-01T12:27:29Z",
    "closed_at": "2020-04-01T12:33:15Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/20409",
    "body": "Hi,\r\n\r\nI have a Razor Class Library in .NET Core 3.1.0. The RCL has static assets located in wwwroot folder such as js frameworks, css, etc. \r\n\r\nI have a .NET Core 3.1 Web application that references the RCL. When i run the web application the static files within the RCL can be accessed using the path /_content/AreaName/js/...\r\n\r\nThis works fine when then  ASPNETCORE_ENVIRONMENT is Development. If i change it to anything else, e.g. Local, Staging, the web application returns a 404 (Not found) when trying to access the static files.\r\n\r\nIs this an issue/feature?\r\nIs there a workaround?\r\n\r\nAny advice is appreciated.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/20409/comments",
    "author": "idlemind",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-04-01T12:32:57Z",
        "body": "@idlemind thanks for contacting us.\r\n\r\nThe current behavior is by design. RCL is a development time feature, and doesn't exist when the application is published, hence it's only plugged in by default during development.\r\n\r\nIf you want to enable it for a different environment you can call `webHostBuilder.UseStaticWebAssets()` to turn it on unconditionally."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to make Razor Class Library static files accessible in non-Development environments",
      "Clarification on whether this is intentional behavior versus a bug",
      "Solution that maintains RCL static file access without environment restrictions"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:04:50"
    }
  }
]