[
  {
    "number": 2527,
    "title": "Why are Modal and Fallback listeners stacks and not Lists like Global listeners?",
    "created_at": "2018-07-31T16:05:10Z",
    "closed_at": "2019-04-11T20:13:27Z",
    "labels": [
      "Question",
      "Legacy (HoloToolkit)",
      "Input System - General"
    ],
    "url": "https://github.com/microsoft/MixedRealityToolkit-Unity/issues/2527",
    "body": "One of my object needs to receive unfocused tap events, but not always. I think modal is the way to go but maybe i'm wrong. With a stack there is no way for me to unregister myself. Is there a reason for choosing stacks that I am not aware of?\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/MixedRealityToolkit-Unity/issues/2527/comments",
    "author": "Gotcab",
    "comments": [
      {
        "user": "StephenHodgson",
        "created_at": "2018-07-31T16:13:29Z",
        "body": "They're handled differently from global listeners. Althought @maxouellet would know a bit better, considering his team wrote the initial implementation.\n\n---\n\n> With a stack there is no way for me to unregister myself\r\n\r\nSomeone has proposal #2494 which requests changes to add functionality to unregister from specific stacks.\n\n---\n\nIf we do end up changing this, it'll be in vNEXT to prevent breaking changes."
      },
      {
        "user": "Gotcab",
        "created_at": "2018-07-31T16:16:28Z",
        "body": "So if I register to global listeners will I receive the event even if a focused object consumed it?"
      },
      {
        "user": "maxouellet",
        "created_at": "2018-07-31T16:30:51Z",
        "body": "You will, but I'm not sure that this is what you should use. The original intent of global listeners was to receive all input events, ignoring whoever might consume it. It was mostly built for things like cursors and 6DOF pointing rays that need to react to everything. There are a couple other edge cases where I've had to use it, but usually I try to stay away from it if I can do things in a different way.\r\n\r\nEverything was implemented with stacks to make your app more predictable with regards to how it handle input. The thought was that it's an error if something that is handling input in a modal way try to deregister while it isn't at the top of the stack. Think of it like popup windows: the front popup window should always prevent inputs to other windows it's on top of, and it should always close before anything it's on top of. We could certainly switch the implementation to use lists instead of a stack, but you'd lose the ability to validate that your program is registering / unregistering input handlers in the correct order (which might be acceptable)\r\n\r\nI don't know about what your scenario is exactly, but it sounds like what you want is to register your object as a Fallback input handler. Basically, if nothing else consumed the input (like a UI or something else), you want to receive it and potentially do something with it. "
      },
      {
        "user": "Gotcab",
        "created_at": "2018-07-31T16:43:26Z",
        "body": "Thank you so much, that clarify the intend behind that choice. Here is my scenario:\r\n\r\nMy app is a kind of a promotional virtual space. You walk around and there are interests points and ads that you can interact with. There is a Edit mode and a View mode. Edit mode is where you place objects and view mode you hide editing buttons and you walk around. I have a script CreateObjectOnTap which \"spawn\" the objects incrementaly when tapping in the air (not focused). So I need to receive unfocused tap on Edit mode and unregister when switching to View mode (event based)."
      },
      {
        "user": "maxouellet",
        "created_at": "2018-07-31T16:47:50Z",
        "body": "I see. Assuming that Edit mode contains other UI, I'd say the right solution would be to have your \"CreateObjectOnTap\" script register itself as a fallback input handler when your enter EditMode. This would allow other UI that might be present in Edit mode (maybe a piece of UI to exit EditMode, fo example) to still take priority over creating objects, but any \"taps\" that aren't handled would create an object.\r\n\r\nHope this helps, good luck with your app :)"
      },
      {
        "user": "PJBowron",
        "created_at": "2018-08-04T15:00:38Z",
        "body": "Not a criticism, rather a suggestion - one thing the toolkit input documentation does lack is 'best practices' guide, that encapsulates the kind of things @maxouellet touched on above. I ended up writing one for my team a while ago and I'm happy to see it meshes with the info given here!\r\n\r\nThe only area I would like to see tweaked is the stack nature of the Fallbacks. A stack makes perfect sense for Modalities, but Fallback systems don't necessarily follow symmetrical patterns and may well have overlapping lifetimes, which makes them hard to support in the current model. /ponderings"
      },
      {
        "user": "StephenHodgson",
        "created_at": "2018-08-04T15:21:42Z",
        "body": "Please do"
      },
      {
        "user": "wiwei",
        "created_at": "2019-04-11T20:13:26Z",
        "body": "Closing issues older than 180 days. If this is still an issue, please reactivate with recent information."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why stacks are used for Modal/Fallback listeners instead of lists",
      "Mechanism to unregister input handlers when switching modes",
      "Clear guidance on when to use Fallback vs Global listeners",
      "Input handling that coexists with other UI elements"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:49:17"
    }
  },
  {
    "number": 1961,
    "title": "Duplication of Holotoolkit camera when switching scenes",
    "created_at": "2018-04-16T19:22:19Z",
    "closed_at": "2018-04-17T15:41:50Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/microsoft/MixedRealityToolkit-Unity/issues/1961",
    "body": "When switching to a scene that already includes a mixed reality camera, the camera is duplicated. Solution included.\r\n\r\n## Expected Behavior- Each scene has only one mixed reality camera\r\n\r\n## Actual Behavior-Mixed Reality camera is duplicated when a new scene that already includes one is loaded\r\n\r\n## Steps to reproduce\r\n-create two scenes, each with a mixed reality camera.\r\n-run the application in the unity editor\r\n-go to second scene\r\n-messages \r\n\r\n## Unity Editor Version- 2017.3\r\n\r\n## Mixed Reality Toolkit Release Version-2017.2.1.3\r\n\r\n## Solution- The code in the Awake() method of the Singleton class destroys the script but not the object to which it is attached. I corrected the problem with the following code.\r\n\r\n```\r\nprotected virtual void Awake()\r\n        {\r\n            if (IsInitialized && instance != this)\r\n            {\r\n                if (Application.isEditor)\r\n                {\r\n                   //DestroyImmediate(this);replaced\r\n                    DestroyImmediate(gameObject);\r\n                }\r\n                else\r\n                {\r\n                   // Destroy(this);replaced\r\n                    Destroy(gameObject);\r\n                }\r\n\r\n                Debug.LogErrorFormat(\"Trying to instantiate a second instance of singleton class {0}. Additional Instance was destroyed\", GetType().Name);\r\n            }\r\n```\r\nIf there is a better solution, let me know.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/MixedRealityToolkit-Unity/issues/1961/comments",
    "author": "Mustellinus",
    "comments": [
      {
        "user": "StephenHodgson",
        "created_at": "2018-04-17T13:43:25Z",
        "body": "> create two scenes, each with a mixed reality camera.\r\n\r\nWell there's your problem. The expected workflow requires a main master scene and additive loading of your additional scenes.\r\n\r\nIf you don't like that workflow, then you can _optionally_ disable don't destroy on load, but it's not recommended."
      },
      {
        "user": "Mustellinus",
        "created_at": "2018-04-17T15:41:50Z",
        "body": "Ok, I have a main scene. Additive loading of additional scenes solved the problem"
      }
    ],
    "satisfaction_conditions": [
      "Ensures singleton pattern enforcement for mixed reality cameras across scene transitions",
      "Maintains compatibility with Unity's recommended scene management workflows",
      "Provides clear guidance on scene architecture requirements",
      "Offers configurable options for object lifecycle management"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:49:37"
    }
  },
  {
    "number": 1580,
    "title": "Supported Unity versions for next release?",
    "created_at": "2018-01-04T14:19:58Z",
    "closed_at": "2018-05-21T23:01:33Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/microsoft/MixedRealityToolkit-Unity/issues/1580",
    "body": "Hi, I am in the process of starting a new long-term project, and was wondering (since I read it somewhere), if future releases of MRTK will cut support for older Unity versions than 2017.3? \r\nAm I understanding it correctly that starting a new project with 2017.2.1 Unity and MRTK will require an update to 2017.3 for new releases of MRTK following the next (and all future) release?",
    "comments_url": "https://api.github.com/repos/microsoft/MixedRealityToolkit-Unity/issues/1580/comments",
    "author": "eirikhollis",
    "comments": [
      {
        "user": "StephenHodgson",
        "created_at": "2018-01-04T15:50:31Z",
        "body": "That is correct. "
      },
      {
        "user": "NeerajW",
        "created_at": "2018-02-15T22:24:05Z",
        "body": "Please do give us a scenario where you think the older Unity builds must be supported? We believe it's causing more maintenance issues than not."
      },
      {
        "user": "eirikhollis",
        "created_at": "2018-02-16T07:37:59Z",
        "body": "The question was regarding to if a new project I was starting should be started in 2017.3 or 2017.2.0. I chose 2017.3 from the answer. \r\nPersonally, as long as new Unity versions don't introduce new breaking bugs, I believe only the latest should receive the newest toolkit updates. As you say, supporting older versions is definitely more time-consuming."
      },
      {
        "user": "StephenHodgson",
        "created_at": "2018-02-16T17:47:53Z",
        "body": "They have introduced breaking changes from 2017.3 and beyond."
      },
      {
        "user": "david-c-kline",
        "created_at": "2018-05-21T23:01:33Z",
        "body": "Version 2017.2.1.4 supports Unity 5.6 - 2017.4.\r\nVersion 2017.4.0.0 (coming in May 2018) will officially support Unity 2017.1 - 2018.1 (Unity 5.6 will likely still continue to work, if it does not we will investigate bug reports)"
      }
    ],
    "satisfaction_conditions": [
      "Clarity on Unity version compatibility requirements for future MRTK releases",
      "Explanation of maintenance rationale for version support changes",
      "Guidance for long-term project viability"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:49:41"
    }
  },
  {
    "number": 802,
    "title": "Is there a way create a menu, similar to the holo start menu (Movement)?",
    "created_at": "2017-07-21T19:19:58Z",
    "closed_at": "2017-07-26T19:35:29Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/microsoft/MixedRealityToolkit-Unity/issues/802",
    "body": "I wanted to know if there a way to create a menu/gameObject which will follow the movements of camera; just like the Holo Start menu.\r\nTo describe a little more, Just like how the start menu doesn't move until you look away from the FOV, can I create a menu which moves similar to it?",
    "comments_url": "https://api.github.com/repos/microsoft/MixedRealityToolkit-Unity/issues/802/comments",
    "author": "pampas93",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2017-07-24T10:50:52Z",
        "body": "Take a look at the \"Tag-Along\"-Scripts. There are a few different ones which might fullfill your requirements. And don't forget to attach the Billboard-Script to force the menu to face the camera. "
      },
      {
        "user": "pampas93",
        "created_at": "2017-07-26T19:35:20Z",
        "body": "@HoloFan Perfect. Works like a charm.\r\n"
      }
    ],
    "satisfaction_conditions": [
      "The solution must enable a menu to follow camera movements while maintaining relative positioning within the user's field of view (FOV)",
      "The implementation must include smooth positional tracking that responds to camera rotation and movement",
      "The solution must maintain menu visibility within a defined FOV threshold before repositioning",
      "The approach must ensure persistent menu orientation facing the camera"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:50:47"
    }
  },
  {
    "number": 588,
    "title": "Problem with ReflectionExtensions and why is it needed?",
    "created_at": "2017-03-24T14:11:16Z",
    "closed_at": "2017-04-11T08:46:43Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/microsoft/MixedRealityToolkit-Unity/issues/588",
    "body": "Hello,\r\n\r\nI faced an issue with holotoolkit today on Unity 5.5.1.f1\r\nI had a line of code in one of my scripts that was \r\n`FieldInfo[] fieldArray = GetType().GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);`\r\n\r\nAnd when adding holotoolkit, the ReflectionExtensions raised an error when trying to build, due to the GetFields method returning an IEnumerable instead of an array in the extension.\r\nI temporarily fixed the problem by doing this :\r\n`#if UNITY_METRO && !UNITY_EDITOR\r\n        FieldInfo[] fieldArray = GetType().GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).ToArray();\r\n#else\r\n        FieldInfo[] fieldArray = GetType().GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\r\n#endif`\r\nas I need my code to be able to work with and without holotoolkit. But I was wondering why this extension is needed ? I guess it was useful at some point or on older versions of Unity maybe ? Or did I miss a detail somewhere ?\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/microsoft/MixedRealityToolkit-Unity/issues/588/comments",
    "author": "flonou",
    "comments": [
      {
        "user": "kiyoaki",
        "created_at": "2017-03-27T01:10:13Z",
        "body": "I faced same problem, and requested #577."
      },
      {
        "user": "flonou",
        "created_at": "2017-03-31T11:18:37Z",
        "body": "So you proposed to move these extensions to a namespacen which should help. But are they all still needed in the end ? It doesn't seem like it to me"
      },
      {
        "user": "StephenHodgson",
        "created_at": "2017-04-07T20:03:32Z",
        "body": "Did moving to the new namespace fix this issue?\r\n\r\nI think keeping this class around is a good idea, because there are others that use this.  It's just a tool for convenience. "
      },
      {
        "user": "flonou",
        "created_at": "2017-04-11T08:46:43Z",
        "body": "Yes the move to the new namespace fixed the issue"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why ReflectionExtensions exist in HoloToolkit",
      "Clarification of compatibility requirements between Unity versions/platforms",
      "Resolution of namespace conflict implications",
      "Assessment of ongoing relevance of ReflectionExtensions"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:50:57"
    }
  },
  {
    "number": 580,
    "title": "How to clean memory of taptoplace?",
    "created_at": "2017-03-22T16:25:47Z",
    "closed_at": "2017-03-23T18:36:58Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/microsoft/MixedRealityToolkit-Unity/issues/580",
    "body": "Hi,\r\n\r\nI'm using the TapToPlace script for a game I'm working on, but every time I close the app and reopen it, the object is where I put it last time, I try to change the initial position but it does not Work.\r\n\r\nIt's any way to clean the position when the app restarts?\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/MixedRealityToolkit-Unity/issues/580/comments",
    "author": "mauricioalfonso007",
    "comments": [
      {
        "user": "assert-not-singularity",
        "created_at": "2017-03-23T08:51:03Z",
        "body": "You have to delete the WorldAnchor set in the WorldAnchorManager by the TapToPlace script."
      },
      {
        "user": "mattfedocsg",
        "created_at": "2017-03-23T11:51:07Z",
        "body": "@niklas87 is right.  Also, it may benefit you to make an object pool to keep track of which objects have tap to place and what their anchor names are."
      }
    ],
    "satisfaction_conditions": [
      "Solution must clear persistent spatial anchors between app sessions",
      "Mechanism to manage WorldAnchor lifecycle in WorldAnchorManager",
      "Integration with existing TapToPlace script functionality"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:51:06"
    }
  },
  {
    "number": 120,
    "title": "TextToSpeechManager.cs why Monobehavior instead of Singleton?",
    "created_at": "2016-07-14T16:13:46Z",
    "closed_at": "2016-07-18T18:31:22Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/microsoft/MixedRealityToolkit-Unity/issues/120",
    "body": "I didn't want to have to drop a TextToSpeechManager script throughout my project, so I converted it to a Singleton instead of a MonoBehavior. This seems far more intuitive to me, being able to bring up an instance of TextToSpeechManager throughout any script and just call SpeakText(). What was the reasoning behind Monobehavior instead?\n",
    "comments_url": "https://api.github.com/repos/microsoft/MixedRealityToolkit-Unity/issues/120/comments",
    "author": "paravorheim",
    "comments": [
      {
        "user": "jwittner",
        "created_at": "2016-07-14T17:07:06Z",
        "body": "When @jbienz brought the TextToSpeechmanager(TST) it was originally built as a Singleton. The design issue was that the TST encapsulates the audio source, but there are compelling situations where you want to organize TST through many independent audio sources and the Singleton by design confuses this architecture. By encapsulating the audio source we also simplify the interface and keep responsibility for controlling AudioSource objects in the Asset configuration data of the Unity scene rather than in the script. \n\nOn the plus side for your situation, our implementation of Singleton caches the first instance of `<T>` it finds in the scene so you only have to drop an instance in the editor once, You can then go ahead and declare a Singleton<TST> in your script and use it. The binding will happen automatically on first access.\n\nLet me know if any of that is unclear!\n\n\n---\n\nI'm starting to think maybe we should drop the `Manager` from this type name.\n"
      },
      {
        "user": "paravorheim",
        "created_at": "2016-07-14T17:11:35Z",
        "body": "Yeah, I agree with your explanation. Thank you!\n"
      },
      {
        "user": "NeerajW",
        "created_at": "2016-07-18T16:00:48Z",
        "body": "Ok to close this issue?\n"
      }
    ],
    "satisfaction_conditions": [
      "Explains why Singleton pattern might conflict with audio source management requirements",
      "Addresses the trade-off between script accessibility and scene configuration control",
      "Clarifies how the solution maintains interface simplicity while supporting multiple instances",
      "Acknowledges the validity of Singleton use cases while explaining their limitations"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:51:11"
    }
  }
]