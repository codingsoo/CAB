[
  {
    "number": 3199,
    "title": "ComboBox.SelectedItem only returns the typename and not the selected Value When using a Datatemplate",
    "created_at": "2019-11-01T23:08:19Z",
    "closed_at": "2019-11-03T17:58:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/AvaloniaUI/Avalonia/issues/3199",
    "body": "I have a combobox configured like so\r\n\r\n```\r\n      <ComboBox SelectedItem=\"{Binding SelectedModule, Mode=OneWayToSource}\" Grid.Column=\"0\" BorderBrush=\"Black\" Grid.Row=\"2\" Height=\"25\" Margin=\"5\" Items=\"{Binding SubCommands}\">\r\n        <ComboBox.ItemTemplate>\r\n          <DataTemplate>\r\n            <TextBlock Text=\"{Binding DisplayName}\" ToolTip.Tip=\"{Binding Description}\"/>\r\n          </DataTemplate>\r\n        </ComboBox.ItemTemplate>\r\n      </ComboBox>\r\n```\r\nAnd the viewmodel is \r\n```\r\n        public string SelectedModule\r\n        {\r\n            get => selectedModule;\r\n            private set\r\n            {\r\n                var res = value;\r\n                this.RaiseAndSetIfChanged(ref selectedModule, value);\r\n            }\r\n        }\r\n```\r\nI am getting back the typename of the Items property instead of the value of the textblock text. How can I get that WPF mentions DisplayMemberName but that doesn't seem to exist in Avalonia.\r\n\r\nI also tried \r\n`SelectionBoxItem=\"{Binding SelectedModule, Mode=OneWayToSource}\" `\r\nbut that didn't work either ",
    "comments_url": "https://api.github.com/repos/AvaloniaUI/Avalonia/issues/3199/comments",
    "author": "ajmcateer",
    "comments": [
      {
        "user": "Gillibald",
        "created_at": "2019-11-02T05:36:51Z",
        "body": "This is the expected behavior and matches what the Wpf version does. As you noted we are missing the DisplayMemberPath feature and the SelectedValue property. This needs to be added. For now you could use a converter. "
      },
      {
        "user": "grokys",
        "created_at": "2019-11-02T20:02:43Z",
        "body": "How is `SubCommands` defined in the view model?"
      },
      {
        "user": "ajmcateer",
        "created_at": "2019-11-03T00:20:50Z",
        "body": "Hi @grokys @Gillibald,\r\n\r\nIt is defined like\r\n```\r\npublic class SubCommandModel : CommandModelBase\r\n    {\r\n        public List<DiagnosticTestModel> DiagnosticTests { get; set; }\r\n        public SubCommandModel()\r\n        {\r\n            DiagnosticTests = new List<DiagnosticTestModel>();\r\n        }\r\n    }\r\n```\r\nand commandbase is\r\n```\r\n    public class CommandModelBase\r\n    {\r\n        public string Description { get; set; }\r\n        public string DisplayName { get; set; }\r\n        public string CommandName { get; set; }\r\n    }\r\n```\r\nIt displays fine just returns \"Cedar.Model.SubCommand\" as a string"
      },
      {
        "user": "grokys",
        "created_at": "2019-11-03T05:49:22Z",
        "body": "Thanks... Now I'm a bit confused ;)\r\n\r\nWhen you say:\r\n\r\n> I am getting back the typename of the Items property instead of the value of the textblock text. \r\n\r\nWhat do you mean by \"I'm getting back\"? You mean the type name is assigned to `SelectedModule`? `SelectedModule` is a `string` so Avalonia is having to somehow convert `SubCommandModel` to a string, for which it uses `ToString()`. If you've not overridden `ToString`, then it will just return the name of the type, which is what you're seeing.\r\n\r\nAre you porting WPF code which uses `DisplayMemberName`? As you've seen we don't have this property in Avalonia, so a direct port isn't going to be possible. Or are you writing new code?\r\n\r\nCan you not just change `public string SelectedModule` to `public SubCommandModel SelectedModule` in your view model?"
      },
      {
        "user": "ajmcateer",
        "created_at": "2019-11-03T17:58:19Z",
        "body": "@grokys Thank you, I did not realize it was just calling ToString() on subcommand module, it makes a lot of sense in hindsight. I did just as you suggested and it works great. "
      }
    ],
    "satisfaction_conditions": [
      "Solution must bind ComboBox selection to display text rather than object reference",
      "Address conversion between object instance and string representation",
      "Work within Avalonia's current feature set",
      "Maintain MVVM pattern integrity"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:49:06"
    }
  },
  {
    "number": 3162,
    "title": "KeyGesture not having empty ctor on 0.9 ",
    "created_at": "2019-10-25T20:47:40Z",
    "closed_at": "2019-10-28T11:02:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/AvaloniaUI/Avalonia/issues/3162",
    "body": "Hey,\r\n\r\nTrying out 0.9 preview 4 and noticed KeyGesture doesn't have empty ctor, is there any reason for it?\r\nSince I can no longer serialize it\r\n\r\nThanks",
    "comments_url": "https://api.github.com/repos/AvaloniaUI/Avalonia/issues/3162/comments",
    "author": "adirh3",
    "comments": [
      {
        "user": "Gillibald",
        "created_at": "2019-10-25T20:50:44Z",
        "body": "Calling `ToString()` and `Parse(string s)` should work for you. "
      },
      {
        "user": "adirh3",
        "created_at": "2019-10-25T21:54:22Z",
        "body": "I know, the thing is that when I serialize it to json I prefer that the JsonSerializer will deserialize it automatically.\r\nAnyway just wondered why the constructor was removed. (I will use the Parse and ToString to serialize it)"
      },
      {
        "user": "MarchingCube",
        "created_at": "2019-10-26T09:22:19Z",
        "body": "`KeyGesture` is now immutable, all setters have been removed so only constructors that allow to construct a valid object were kept. This is in line with WPF API as well."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of design rationale for removing empty constructor",
      "Serialization/deserialization strategy compatible with immutable objects",
      "Alignment with framework design patterns"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-04 23:49:11"
    }
  }
]