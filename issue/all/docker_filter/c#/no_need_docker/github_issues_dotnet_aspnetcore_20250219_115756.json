[
  {
    "number": 46044,
    "title": "Unexpected parent component rerendering",
    "created_at": "2023-01-11T22:54:01Z",
    "closed_at": "2023-01-12T14:53:20Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/46044",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nWhile playing around with some code I noticed a behaviour I wasn't expecting. Here is the code in question:\r\n\r\n### Parent Component\r\n\r\n```razor\r\n@page \"/\"\r\n\r\n<button @onclick=\"ShowPrompt\">Click me</button>\r\n\r\n@if (_showPrompt)\r\n{\r\n    <SurveyPrompt Title=\"Testing\" OnClose=\"Close\" />\r\n}\r\n\r\n@code {\r\n    private bool _showPrompt;\r\n\r\n    private void ShowPrompt() => _showPrompt = true;\r\n    private void Close() => _showPrompt = false;\r\n}\r\n```\r\n\r\n### Child Component\r\n\r\n```razor\r\n<div class=\"alert alert-secondary mt-4\">\r\n    <strong>@Title</strong>\r\n    <button @onclick=\"OnClose\">Close</button>\r\n</div>\r\n\r\n@code {\r\n    [Parameter] public string? Title { get; set; }\r\n    [Parameter] public Action OnClose { get; set; }\r\n}\r\n```\r\n\r\nWhen clicking the Close button in the child component, the child component causes a re-render in the parent component and is hidden. This is unexpected as that should only occur when either the child components parameter type is `EventCallback` or the handler in the parent calls `StateHasChanged`. \r\n\r\nChanging the child components code to this results in the expected behaviour and the child component isn't hidden.\r\n\r\n```razor\r\n<div class=\"alert alert-secondary mt-4\">\r\n    <strong>@Title</strong>\r\n    <button @onclick=\"() => OnClose()\">Close</button>\r\n</div>\r\n\r\n@code {\r\n    [Parameter] public string? Title { get; set; }\r\n    [Parameter] public Action OnClose { get; set; }\r\n}\r\n```\r\n\r\nI don't know if this is a bug or not but it's not what I was expecting and I can't work it out. \r\n\r\n### Expected Behavior\r\n\r\nChild components shouldn't cause re-renders of parents without defining parameters of type `EventCallback` or parent handlers calling `StateHasChanged`\r\n\r\n### Steps To Reproduce\r\n\r\nUpdate the `Index` component in a new Blazor project to the following code:\r\n\r\n```razor\r\n@page \"/\"\r\n\r\n<button @onclick=\"ShowPrompt\">Click me</button>\r\n\r\n@if (_showPrompt)\r\n{\r\n    <SurveyPrompt Title=\"Testing\" OnClose=\"Close\" />\r\n}\r\n\r\n@code {\r\n    private bool _showPrompt;\r\n\r\n    private void ShowPrompt() => _showPrompt = true;\r\n    private void Close() => _showPrompt = false;\r\n}\r\n```\r\n\r\nUpdate the code for the `SurveyPrompt` component to the following:\r\n\r\n```razor\r\n<div class=\"alert alert-secondary mt-4\">\r\n    <strong>@Title</strong>\r\n    <button @onclick=\"OnClose\">Close</button>\r\n</div>\r\n\r\n@code {\r\n    [Parameter] public string? Title { get; set; }\r\n    [Parameter] public Action OnClose { get; set; }\r\n}\r\n```\r\n\r\nClicking the button in the index component shows the survey prompt. Clicking the Close button in the SurveyPrompt hides the Survey prompt. However, no StateHasChanged call has been issues.\r\n\r\n### Exceptions (if any)\r\n\r\n_No response_\r\n\r\n### .NET Version\r\n\r\n7.0.101\r\n\r\n### Anything else?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/46044/comments",
    "author": "chrissainty",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2023-01-12T13:55:57Z",
        "body": "Thanks for bringing this up @chrissainty.\r\n\r\nThis is an existing and rather obscure Blazor behavior. We try really hard to detect when the target of a delegate is a component that implements IHandleEvent.\r\n\r\nWhat's happening is that the delegate you pass to `OnClose` is being pass-through to an event handler `@onclick` in the component.\r\n\r\nAs a result, we are constructing an EventCallback with `OnClose` as the target delegate. Since the event callback detects that `Delegate.Target` implements `IHandleEvent`, it routes the event through it, and since the parent component extends ComponentBase it triggers a render on the parent.\r\n\r\nThis is by design as we do not have a way to know, and the recommendation in this scenario is to do what you did to achieve your expected behavior, which is to call the parameter within a lambda.\r\n\r\nIn general, this is not a problem because most people desire the parent component to re-render (which is why it is the default behavior) and why in most cases the event is raised inside another method on the child component instead of being passed through directly.\r\n\r\nI hope this helps clarify things.\r\n\r\n"
      },
      {
        "user": "chrissainty",
        "created_at": "2023-01-12T14:53:20Z",
        "body": "This makes sense. Thanks for the explaination @javiercn \ud83d\udc4d "
      }
    ],
    "satisfaction_conditions": [
      "Explanation of Blazor's event handling behavior when using Action delegates vs lambda expressions",
      "Clarification of IHandleEvent interface's role in component re-rendering",
      "Guidance on when parent components automatically re-render from child events",
      "Best practices for passing event handlers between components",
      "Framework design rationale behind automatic parent re-renders"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:02:37"
    }
  },
  {
    "number": 42892,
    "title": "[Blazor] Question: can i call .net static methods in afterStarted of JavaScript initializers?",
    "created_at": "2022-07-25T11:21:19Z",
    "closed_at": "2022-07-25T15:15:55Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved",
      "feature-blazor-jsinterop"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/42892",
    "body": "### Is there an existing issue for this?\n\n- [X] I have searched the existing issues\n\n### Describe the bug\n\nThe input parameter `blazor` of afterStarted does not have the `invokeMethodAsync` method, which I want to call the static method of layout.\r\nFor example, I want to read timezoneOffset from the browser (`return new Date().getTimezoneOffset();`) and then call the. net static method to assign a value to a global static variable (TimezoneOffset). Other components can then read this variable directly.\n\n### Expected Behavior\n\n_No response_\n\n### Steps To Reproduce\n\n_No response_\n\n### Exceptions (if any)\n\n_No response_\n\n### .NET Version\n\n6.0.400-preview.22330.6\n\n### Anything else?\n\n_No response_",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/42892/comments",
    "author": "capdiem",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2022-07-25T13:34:25Z",
        "body": "@capdiem thanks for contacting us.\r\n\r\nThe Blazor parameter passed to `onAfterStarted` is the Blazor object itself, you need to use `DotNet` which is exposed as a global variable on the window."
      },
      {
        "user": "capdiem",
        "created_at": "2022-07-25T15:15:55Z",
        "body": "Thank you so much. I forgot this."
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates how to invoke .NET static methods during Blazor's JavaScript initialization phase",
      "Shows proper access to Blazor's JavaScript interop capabilities in initialization context",
      "Ensures cross-component accessibility of initialized values",
      "Uses officially supported Blazor JavaScript interop mechanisms"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:02:44"
    }
  },
  {
    "number": 42493,
    "title": "How to set SignInScheme in an application using Microsoft.AspNetCore.Authentication.OpenIdConnect on multiple IDPs",
    "created_at": "2022-06-29T22:02:55Z",
    "closed_at": "2022-06-30T17:38:34Z",
    "labels": [
      "question",
      "area-auth",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/42493",
    "body": "My application uses Microsoft.AspNetCore.Authentication.OpenIdConnect  (version 6.0.6) to work with multiple Identity providers. It is getting \"System.InvalidOperationException: The SignInScheme for a remote authentication handler cannot be set to itself.\". How should the SignInScheme be properly set in this situation to avoid the error? (not setting SignInScheme in my code gives me the same error)\r\n\r\n```\r\n            foreach (var section in _configuration.GetChildren())\r\n            {\r\n                var options = new MicrosoftIdentityOptions();\r\n                section.Bind(options);\r\n\r\n                if (options.ClientId.IsNullOrEmpty())\r\n                    continue; // Skip sections that are not for OpenID Connect.\r\n\r\n                var scheme = section.Key;\r\n\r\n                services.AddAuthentication(scheme)\r\n                        .AddOpenIdConnect(scheme, openIdConnectOptions =>\r\n                        {\r\n                            openIdConnectOptions.ClientId = options.ClientId;\r\n                            openIdConnectOptions.ClientSecret = options.ClientSecret;\r\n                            openIdConnectOptions.Authority = options.Authority;\r\n                            openIdConnectOptions.ResponseType = OpenIdConnectResponseType.Code;\r\n                            openIdConnectOptions.GetClaimsFromUserInfoEndpoint = true;\r\n                            openIdConnectOptions.SignInScheme = scheme;\r\n                        });\r\n            }\r\n```\r\n\r\n```\r\n      An unhandled exception has occurred while executing the request.\r\n      System.InvalidOperationException: The SignInScheme for a remote authentication handler cannot be set to itself.  If it was not explicitly set, the AuthenticationOptions.DefaultSignInScheme or DefaultScheme is used.\r\n         at Microsoft.AspNetCore.Authentication.RemoteAuthenticationOptions.Validate(String scheme)\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationBuilder.<>c__DisplayClass4_0`2.<AddSchemeHelper>b__1(TOptions o)\r\n         at Microsoft.Extensions.Options.ValidateOptions`1.Validate(String name, TOptions options)\r\n         at Microsoft.Extensions.Options.OptionsFactory`1.Create(String name)\r\n         at Microsoft.Extensions.Options.OptionsMonitor`1.<>c__DisplayClass10_0.<Get>b__0()\r\n         at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n         at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n         at System.Lazy`1.CreateValue()\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationHandler`1.InitializeAsync(AuthenticationScheme scheme, HttpContext context)\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationHandlerProvider.GetHandlerAsync(HttpContext context, String authenticationScheme)\r\n         at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/42493/comments",
    "author": "WenningQiu",
    "comments": [
      {
        "user": "HaoK",
        "created_at": "2022-06-29T23:12:03Z",
        "body": "SignInScheme needs to be set to a cookie authentication if you are setting this property.  You don't need to set this property if you don't have any cookies you want to persist the claims identity to.  \n\n---\n\nWhat are you trying to do in terms of your auth setup, ideally for SignInScheme, you would configure all of your remoteAuthentication schemes to have the same SignInScheme which would be a cookie, so your app would just check if the cookie exists, if so, the app is authenticated, and the cookie is just the persisted state/claims from whichever remote OIDC the user authenticated with.  Does that make sense?"
      },
      {
        "user": "WenningQiu",
        "created_at": "2022-06-30T03:22:35Z",
        "body": "Thanks @HaoK. \r\n\r\nSo I was able to get past the error by adding Cookie Authentication as below. But I have to explicitly set SignInScheme, otherwise I would get the same error. Does that look right?\r\n\r\n\r\n```\r\n            foreach (var section in _configuration.GetChildren())\r\n            {\r\n                var options = new MicrosoftIdentityOptions();\r\n                section.Bind(options);\r\n\r\n                if (options.ClientId.IsNullOrEmpty())\r\n                    continue; // Skip sections that are not for OpenID Connect.\r\n\r\n                var scheme = section.Key;\r\n                var cookieScheme = $\"{scheme}Cookie\";\r\n\r\n                services.AddAuthentication()\r\n                        .AddCookie(cookieScheme)\r\n                        .AddOpenIdConnect(scheme, openIdConnectOptions =>\r\n                        {\r\n                            openIdConnectOptions.ClientId = options.ClientId;\r\n                            openIdConnectOptions.ClientSecret = options.ClientSecret;\r\n                            openIdConnectOptions.Authority = options.Authority;\r\n                            openIdConnectOptions.ResponseType = OpenIdConnectResponseType.Code;\r\n                            openIdConnectOptions.GetClaimsFromUserInfoEndpoint = true;\r\n                            openIdConnectOptions.SignInScheme = cookieScheme;\r\n                        });\r\n            }\r\n```"
      },
      {
        "user": "HaoK",
        "created_at": "2022-06-30T17:38:34Z",
        "body": "Yep that looks fine, you can also just set DefaultSignInScheme on authenticationOptions once to cookieScheme as a small cleanup"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why SignInScheme cannot match the remote authentication handler's own scheme",
      "Guidance on proper cookie authentication scheme configuration for persisting identity",
      "Clear relationship between multiple IDP configurations and their corresponding authentication schemes",
      "Explanation of default scheme fallback behavior when SignInScheme isn't set",
      "Validation of multi-scheme configuration patterns in ASP.NET Core authentication"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:02:54"
    }
  },
  {
    "number": 41011,
    "title": "Nesting AuthorizeView and Authorized components with various roles",
    "created_at": "2022-04-01T17:56:52Z",
    "closed_at": "2022-04-04T11:54:39Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/41011",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Is your feature request related to a problem? Please describe the problem.\r\n\r\nI would like to have a section of a NavBar component wrapped in an `<AuthorizeView>` tag to limit access to only authorized users, but then use nested `<AuthorizeView Roles=\"admin, user, etc\">` within to show/hide various options within the list, if shown. However, I can't use two `<AuthorizeView>` tags due to context conflicts.\r\n\r\nThis is similar to issue #20294 which was closed.\r\n\r\n### Describe the solution you'd like\r\n\r\nBe able to nest `<AuthorizeView>` tags with more restrictive roles in the inner tags to allow for showing/hiding content and subcontent",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/41011/comments",
    "author": "aterbo",
    "comments": [
      {
        "user": "MariovanZeist",
        "created_at": "2022-04-01T18:44:19Z",
        "body": "Hi @aterbo \r\nYou can nest ``<AuthorizeView>``  tags if you want, but you will have to rename the Context\r\n\r\nLike in this example:\r\n\r\n```razor\r\n<AuthorizeView Policy=\"MyPolicy\">\r\n    Show when MyPolicy is valid\r\n    @context.User                               @*<- just to show that you can access the AuthenticationState variable*@\r\n    <AuthorizeView Policy=\"MySecondPolicy\" Context=SomeOtherName>     @*Here I renamed the Context to SomeOthername  *@\r\n        Show only when MySecondPolicy is valid\r\n        @SomeOtherName.User                      @*<- just to show that you can access the AuthenticationState variable*@\r\n    </AuthorizeView>\r\n</AuthorizeView>\r\n```\r\n\r\nThis is because the ``ChildContent``  of an ``<AuthorizeView>`` component is of type ``RenderFragment<AuthenticationState>`` \r\nFor these generic Renderfragments, Blazor will generate a  variable named ``context`` that you can use to access that ``AuthenticationState``\r\nIf you have nesting components that each have generic render fragments (Like in the example above) you get into a problem that the variable in the nested component is also named ``context``, and that would give a compile error as you can't use 2 different variables with the same name.\r\n\r\nThat's why to get it to work you will have to rename the Context to something else, and you can access that variable using that name (as I did above)\r\n"
      },
      {
        "user": "aterbo",
        "created_at": "2022-04-01T19:13:56Z",
        "body": "Well, that's simple..... Thank you for your help, @MariovanZeist that worked perfectly.\r\n\r\nThis may be room for improvement on the docs. They discuss accessing `context` for various reasons, but not nesting components. Although, that may be repetitive, because had I thought through the `ChildContent` aspect more, it should be treated like any other component where you need to rename context.\r\n\r\nI'm happy to close the issue if this type of documentation change isn't needed."
      },
      {
        "user": "javiercn",
        "created_at": "2022-04-04T11:54:39Z",
        "body": "@aterbo thanks for contacting us.\r\n\r\n@MariovanZeist answer is correct here."
      }
    ],
    "satisfaction_conditions": [
      "Resolve context naming conflicts when nesting authorization components",
      "Support hierarchical role-based UI authorization",
      "Maintain access to authentication state at all nesting levels",
      "Provide clear guidance for component nesting patterns"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:03:01"
    }
  },
  {
    "number": 40021,
    "title": ".Net 6 pass array in query string",
    "created_at": "2022-02-06T16:05:41Z",
    "closed_at": "2022-02-06T18:13:13Z",
    "labels": [
      "question",
      "old-area-web-frameworks-do-not-use"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/40021",
    "body": "### Is there an existing issue for this?\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Describe the bug\r\n\r\nI've asked this question in SO but no answer.\r\nI have an issue with passing string array in query string and I don't know what's happening. here is the request:\r\n```\r\n.../api/customers/todos?customerValue=0&branchId=120&allianceId=1&searchValue=&offset=0&count=14&statuses=one&statuses=two&statuses=three\r\n```\r\nand this is my method:\r\n```\r\npublic async Task<PaginatedResult<TodoVm>> GetTodos(decimal? customerValue, string branchId, \r\n            long? allianceId, string searchValue,\r\n            string[] statuses = null,\r\n            int offset = 0, int count = 20)\r\n        {\r\n            //do some stuff and return response\r\n        }\r\n```\r\nwhen I call the api it gives me this error and cannot bind the statues parameter:\r\n```\r\n{\r\n    \"title\": \"One or more validation errors occurred.\",\r\n    \"status\": 400,\r\n    \"errors\": {\r\n        \"$\": [\r\n            \"The input does not contain any JSON tokens. Expected the input to start with a valid JSON token, when isFinalBlock is true. Path: $ | LineNumber: 0 | BytePositionInLine: 0.\"\r\n        ]\r\n    }\r\n}\r\n```\r\nbut when I use **FromQuery** it works! like this:\r\n```\r\npublic async Task<PaginatedResult<TodoVm>> GetTodos(decimal? customerValue, string branchId, \r\n            long? allianceId, string searchValue,\r\n            [FromQuery(Name = \"statuses\")] string[] statuses = null,\r\n            int offset = 0, int count = 20)\r\n        {\r\n            //do some stuff and return response\r\n        }\r\n```\r\nother parameters will be mapped correctly but for array I have to use FromQuery.\r\nFYI, this is how I add controller in Startup:\r\n```\r\nservices.AddControllers()\r\n            .AddJsonOptions(options =>\r\n            {\r\n                options.JsonSerializerOptions.PropertyNameCaseInsensitive = false;\r\n                options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;\r\n                options.JsonSerializerOptions.AllowTrailingCommas = false;\r\n            });\r\n```\r\n\r\n### .NET Version\r\n\r\n6.0.100\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/40021/comments",
    "author": "sa-es-ir",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2022-02-06T17:02:08Z",
        "body": "Arrays are treated as body parameters in `[ApiController]` unconditionally so you need to specify `[FromQuery]`.\r\n\r\n```C#\r\npublic async Task<PaginatedResult<TodoVm>> GetTodos(decimal? customerValue, string branchId, \r\n            long? allianceId, string searchValue,\r\n            [FromQuery] string[] statuses = null,\r\n            int offset = 0, int count = 20)\r\n        {\r\n            //do some stuff and return response\r\n        }\r\n```\r\n\r\nYou don't need `Name=\"statuses\"` btw."
      },
      {
        "user": "sa-es-ir",
        "created_at": "2022-02-06T17:13:39Z",
        "body": "Ok nice, I asked this because when I remove `statuses` from input parameters I still can get array like this:\r\n```\r\nstring[] statuses=HttpContext.Request.Query[\"statuses\"].ToArray();\r\n```\r\nand I didn't now for array it searches in body for binding values.\r\nThis behavior is for all .net versions? because I think it was ok for .net core 3.1\r\nThanks"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why array parameters require explicit [FromQuery] binding in .NET 6",
      "Clarification on default binding behavior differences between simple types and arrays in [ApiController]",
      "Guidance on proper parameter binding for array types in query strings",
      "Comparison of .NET 6 behavior with previous versions like .NET Core 3.1",
      "Explanation of framework's JSON parsing expectations for complex parameters"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:03:11"
    }
  },
  {
    "number": 31964,
    "title": "Return value from signalr hub",
    "created_at": "2021-04-20T05:43:05Z",
    "closed_at": "2021-04-20T06:55:19Z",
    "labels": [
      "question",
      "area-signalr",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/31964",
    "body": "Hi All,\r\nIs it ok to return value from signalr hub method?\r\nI'm doing DB update/insert and want to make sure the process completed properly.\r\nThanks!\r\naa",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/31964/comments",
    "author": "avialonn",
    "comments": [
      {
        "user": "davidfowl",
        "created_at": "2021-04-20T06:37:04Z",
        "body": "Yes it is."
      }
    ],
    "satisfaction_conditions": [
      "Confirmation that returning values from SignalR hub methods is a valid practice",
      "Alignment with SignalR best practices"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:03:23"
    }
  },
  {
    "number": 27692,
    "title": "Blazor Server: don't bind event listener for non-rendered element",
    "created_at": "2020-11-10T20:46:15Z",
    "closed_at": "2020-11-20T14:10:58Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/27692",
    "body": "I'm interested in keeping authorization simple by using the `AuthorizeView` component.  This request is an elaboration of the documentation issue: dotnet/AspNetCore.Docs/issues/20462.\r\n\r\nIn short, say I have Blazor pages, each of which requires authentication and role-based authorization:\r\n```\r\n@page \"/page1\"\r\n@attribute [Authorize]\r\n\r\n<AuthorizeView Role=\"page1\">\r\n    <!-- SECURE CONTENT -->\r\n    <button @onclick=\"SecureAction\">Secure Action</button>\r\n</AuthorizeView>\r\n\r\n@code {\r\n    private void SecureAction()\r\n    {\r\n        // Unauthorized users should not be able to execute this code path\r\n    }\r\n}\r\n```\r\n\r\nIt would be nice if it was impossible for clients to manually trigger the `SecureAction` method.  In this case, because the only element to which it binds is not rendered, no SignalR event listener should be bound.\r\n\r\nI would prefer not to inject the `AuthenticationStateProvider` in every page and guard every protected task/method with it.\r\n\r\nre: @guardrex ",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/27692/comments",
    "author": "shanemikel",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-11-11T12:24:25Z",
        "body": "@shanemikel thanks for contacting us.\r\n\r\nI don't believe this is generally possible without integrating authorization with the renderer/dispatching mechanism in a strongly coupled way, which is not something we think we'll do.\r\n\r\nYou could alternatively write a \"protected\" action component that encapsulates the behavior you want.\r\n\r\n```\r\n<ProtectedAction Handler=\"SecureAction\" Context=\"protectedHandler\">\r\n    <!-- SECURE CONTENT -->\r\n    <button @onclick=\"protectedHandler\">Secure Action</button>\r\n</ProtectedAction>\r\n```\r\n\r\nWithin the `ProtectedAction` component you'll have something like this\r\n```\r\n@ChildContent(_protectedHandler);\r\n@code\r\n{\r\n  [Parameter] public EventCallback Handler { get; set; }\r\n  [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }\r\n\r\n  protected override void OnParametersSet()\r\n  {\r\n    _protectedHandler = ProtectedHandler;\r\n  }\r\n\r\n  private async Task ProtectedHandler()\r\n  {\r\n    var state = await AuthenticationState;\r\n    var authorized = ...\r\n    if(authorized)\r\n    {\r\n      await Handler.InvokeAsync();\r\n    }\r\n  }\r\n}\r\n```"
      },
      {
        "user": "guardrex",
        "created_at": "2020-11-11T13:04:31Z",
        "body": "We could cover this as an **_advanced_** authz pattern ..... but *later*, probably even early next year given all of the work I have to do right now. @javiercn / @mkArtakMSFT ... let me know if you would like to **_avoid_** covering this pattern. I'll close the docs issue if that's the case."
      },
      {
        "user": "pranavkm",
        "created_at": "2020-11-12T19:47:16Z",
        "body": "@shanemikel by default event handlers for non-rendered elements are unable to be invoked. The scenario @javiercn was talking of was that **if** your authorization status changes after an element is rendered, there is a small window (in the order of milliseconds) before a new render that event handlers could be triggered. (\r\n\r\n[Initially authorized] --> [Unauthorized / StateHasChanged] .... You can continue to trigger the event now .... --> [Render](Now it's no longer possible to trigger)\r\n\r\nIf you were concerned about the small window, you could consider using the pattern @javiercn suggested. Most users would not need to worry about this. \r\n\r\n@guardrex I don't think this needs to be documented. \r\n\r\n"
      },
      {
        "user": "shanemikel",
        "created_at": "2020-11-13T00:07:55Z",
        "body": "@pranavkm Oh, that's great!  I actually think that would be a nice addition to the documentation."
      },
      {
        "user": "pranavkm",
        "created_at": "2020-11-13T00:14:09Z",
        "body": "@shanemikel we generally do not document things our framework does not do. I'll defer to @guardrex to make a call here."
      },
      {
        "user": "guardrex",
        "created_at": "2020-11-13T00:17:37Z",
        "body": "> default event handlers for non-rendered elements are unable to be invoked\r\n\r\nWe don't say that ... we only imply it, so I'll add a line to cover it.\r\n"
      },
      {
        "user": "javiercn",
        "created_at": "2020-11-20T14:10:58Z",
        "body": "Closing this issue since the original question was answered."
      }
    ],
    "satisfaction_conditions": [
      "Confirmation that non-rendered elements' event handlers are not bound by default",
      "Explanation of framework's inherent security against unauthorized event triggering"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:03:47"
    }
  },
  {
    "number": 26599,
    "title": "[Blazor] Component provided as parameter to another component, shortly component wrapper",
    "created_at": "2020-10-05T02:22:20Z",
    "closed_at": "2020-10-06T02:48:31Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/26599",
    "body": "Hello,\r\n\r\nFramework is missing feature to pass component to another component as parameter.\r\n\r\nIf I have one parent component and to child components and I want to call parent with selected child component I can't do now.\r\n\r\nFor example we have modal form and want to display different components inside modal component, e.g. message, error, confirm and etc.\r\n\r\nIf it is possible please provide minimal sample or consider to add this basic feature to framework.\r\n\r\nThank you.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/26599/comments",
    "author": "Lupusa87",
    "comments": [
      {
        "user": "mrpmorris",
        "created_at": "2020-10-05T07:44:02Z",
        "body": "This is because setting parameters happens before rendering, and child components do not exist until after the parent has rendered.\r\n\r\nTry making you parameter type `Func <T>` instead of `T`. As long as you only access it after a Render (eg user clicks something).\r\n\r\nHowever, having said that, it's still better to have your child components expose an `EventCallback<T>` that the parent subscribes to that is triggered by the child when selected."
      },
      {
        "user": "javiercn",
        "created_at": "2020-10-05T13:23:12Z",
        "body": "@Lupusa87 thanks for contacting us.\r\n\r\n@mrpmorris answer is correct. You can't get a hold to child components until the app has rendered and it is best if you use an EventCallback to notify the parent and do something with the component."
      },
      {
        "user": "Lupusa87",
        "created_at": "2020-10-05T14:57:45Z",
        "body": "I see I did not expained well.\r\n\r\nI am talking about taking whole component and passing it as parameter to another component.\r\n\r\nLet's imagine modal component which is displaying in one case one component and in another case another component.\r\n\r\nI do not talk about renderfragment or anything else.\r\n\r\nI need component wrapper.\r\n\r\nThere should be way to render component inside another component through setting parameter.\r\n\r\nIt should be easy, parent component receiving another component as parameter will add it to rendertree.\r\n\r\n@javiercn @SteveSandersonMS @danroth27 "
      },
      {
        "user": "javiercn",
        "created_at": "2020-10-05T15:16:44Z",
        "body": "@Lupusa87 thanks for the additional details.\r\n\r\nIf you are asking about \"holding on\" to a \"component instance\", passing that as a parameter to some other component, and \"somehow\" inside that component, having it render the \"component instance\" passed as a parameter, that's not something we support and it's not something we'll ever support.\r\n\r\nIn the Blazor model, the framework is in charge of the lifetime of the component, what you propose would break the Blazor rendering model in a very bad way.\r\n\r\nThe best you can do is pass the component type to your modal as T and pass in any additional parameter to the T component instance."
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2020-10-05T15:18:02Z",
        "body": "@Lupusa87 I think I understand what you're asking for. It sounds like you want to instantiate your own component objects and then render them.\r\n\r\nIf that's the case, this is deliberately not how the rendering system works (not only in Blazor, but also in other diff-based frameworks like React). When a component renders, it provides a *description* of the other components it wants to render inside itself, not the actual component instances themselves. This is how we can be sure that the framework is responsible for the whole lifecycle of components: it chooses when to create them, when lifecycle events like dependency injection and `OnInitialized` etc fire, when to reuse them, and when ultimately to destroy them. It's also how we can guarantee that component instances are only used in one place. If the rendering system accepted existing component instances, it would not be in control over their lifecycle.\r\n\r\nSo, instead of thinking about passing component instances around, you should think at one further level of abstraction and pass around descriptors of what you want. This can be either:\r\n\r\n * Some data from your domain model. Your components can use this data to decide what UI to render.\r\n * Actual descriptors of render output, which is what a `RenderFragment` is. This is basically why `RenderFragment` exists as a concept.\r\n\r\nI know there might be cases where it feels like it would be convenient to \"new\" up a component instance but it would complicate so many other aspects of the rendering pipeline and prevent us from offering the safety guarantees we do offer today. And again for clarification, this is not a unique thing about Blazor - the same applies in React too, for example.\r\n\r\nAs far as I'm aware there shouldn't be any scenarios blocked by this, because `RenderFragment` provides what you need. But if you're unsure how to implement a particular thing please let us know :)\n\n---\n\n@javiercn Ah, looks like we answered at the same time. Glad our answers were consistent!"
      },
      {
        "user": "Lupusa87",
        "created_at": "2020-10-06T02:48:31Z",
        "body": "Thank you, RenderFragment seems to solve my issue."
      }
    ],
    "satisfaction_conditions": [
      "Supports dynamic rendering of different child components within a parent component",
      "Maintains Blazor's component lifecycle management",
      "Uses framework-supported abstraction for component specification",
      "Avoids direct component instance manipulation",
      "Enables parent component to control child rendering through parameters"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:03:55"
    }
  },
  {
    "number": 24054,
    "title": "[Blazor] execute check at high level to redirect to another page",
    "created_at": "2020-07-17T12:03:22Z",
    "closed_at": "2020-07-17T14:08:39Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/24054",
    "body": "hello guys, i have some trouble with my blazor webassembly webapp when the user decide to refresh the page (with f5 for example).\r\n\r\nI can't maintain a stable state concerning my data so if its happen i prefer disconnect him and and redirect him to the login page.\r\n\r\nim able to suscribe to the onload js event and call method of one to my component to disconnect the user, it work. but in this method, if i try to redirect to the login page with the NavigationManager its not work (it stay on the current page, no redirection)\r\n\r\nI try another way, in my layout on the OnInitialized method i check if my user is not connected and if im not on the login page, if its the case i redirect to the login page. It works, but the problem is the current page will run her lifecycle with inconsistend data so it will sometimes crash. So there is a way to do that at another level to be sure the current page will not be loaded ? \r\n\r\nI wait for yours suggestions, don't hesitate if you have better idea to achieve what i want !\r\n\r\nthanks !",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/24054/comments",
    "author": "julienGrd",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-07-17T12:58:02Z",
        "body": "@julienGrd thanks for contacting us.\r\n\r\nI would suggest you do this directly within the App.razor component. Wouldn't that be simpler for you than having to deal with the layout and other concerns?"
      },
      {
        "user": "julienGrd",
        "created_at": "2020-07-17T13:56:22Z",
        "body": "> @julienGrd thanks for contacting us.\r\n> \r\n> I would suggest you do this directly within the App.razor component. Wouldn't that be simpler for you than having to deal with the layout and other concerns?\r\n\r\nYes it can be ! how i can do that ? for me the app.razor contains only the main point of the app without code.\r\n\r\nthis is my actual App.razor\r\n````\r\n<Router AppAssembly=\"typeof(Program).Assembly\">\r\n    <Found Context=\"routeData\">\r\n        <RouteView RouteData=\"routeData\" DefaultLayout=\"typeof(Components.Layouts.MainLayout)\" />\r\n    </Found>\r\n    <NotFound>\r\n        <LayoutView Layout=\"@typeof(Components.Layouts.MainLayout)\">\r\n            <Is.Geckos.Blazor.Client.Components.Pages.Main.PageFallBack />\r\n        </LayoutView>\r\n        \r\n    </NotFound>\r\n</Router>\r\n````"
      },
      {
        "user": "javiercn",
        "created_at": "2020-07-17T13:59:16Z",
        "body": "@julienGrd define a `@code` block, inject NavigationManager, check the Url property on it within `OnInitialize` and trigger the navigation?"
      },
      {
        "user": "julienGrd",
        "created_at": "2020-07-17T14:08:39Z",
        "body": "> @julienGrd define a `@code` block, inject NavigationManager, check the Url property on it within `OnInitialize` and trigger the navigation?\r\n\r\nsometimes im really dumb, i was thinking App.razor was kind of special component without code, but it seem to be a classic component with all lifecycle.\r\n\r\nusing the initialized of this component make the job perfectly, thanks for your help, the subject is close"
      }
    ],
    "satisfaction_conditions": [
      "Redirect logic executes before page lifecycle initialization",
      "Centralized authentication check mechanism",
      "Blazor-native navigation handling",
      "State validation before rendering"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:04:08"
    }
  },
  {
    "number": 23687,
    "title": "Blazor doesn't detect state-change when state is changed in between async calls, requiring manual StateHasChanged()",
    "created_at": "2020-07-06T03:13:20Z",
    "closed_at": "2020-07-08T08:54:39Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/23687",
    "body": "### Describe the bug\r\nI have a simple div element inside a component, which has a class set conditionally based on a boolean property on the component:\r\n```\r\n<div class='spinner-container @(!IsLoading ? \"d-none\" : \"\")'>\r\n    <div class=\"spinner-border text-info\" role=\"status\">\r\n        <span class=\"sr-only\">Loading...</span>\r\n    </div>\r\n</div>\r\n```\r\n\r\nThe code looks like this:\r\n\r\n```\r\nbool IsLoading { get; set; }\r\n\r\nasync Task HandleFormSubmit()\r\n{\r\n    try\r\n    {\r\n        await Task.Delay(10);\r\n        IsLoading = true;\r\n        await Task.Delay(5000);\r\n    }\r\n    finally\r\n    {\r\n        IsLoading = false;\r\n    }\r\n}\r\n```\r\n\r\nWhen HandleFormSubmit() is called (which is via an `@onsubmit=\"HandleFormSubmit\"` on a `form` element), the div's class doesn't update to reflect the `IsLoading` state change. If I put an explicit `StateHasChanged()` after `IsLoading = true`, then it does update (but that's a bit... crap).\r\n\r\nThe more interesting bit is, if I move `IsLoading = true;` to before the first `Task.Delay`, Blazor somehow detects the state change and the div's class is updated.\r\n\r\n### To Reproduce\r\nThe above should help reproduce this, but if you can't, then I'll make some time to create a repo for this (sorry, middle of work and a bit busy currently, but didn't want to just ignore/not report this as it seems quite important).\r\n\r\n### Further technical details\r\n- Blazor (Web Assembly) version 3.2\r\n- Include the output of `dotnet --info`\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.301\r\n Commit:    7feb845744\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.301\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.5\r\n  Commit:  65cd789777\r\n\r\n.NET Core SDKs installed:\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/23687/comments",
    "author": "SaebAmini",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-07-06T13:22:57Z",
        "body": "@SaebAmini thanks for contacting us.\r\n\r\nBlazor only triggers a render within an event handler in two situations. After all the synchronous code has completed and after all the asynchronous code has completed. It can't do better because it doesn't have access to the implementation of the method, only to the task that is returned by the handler.\r\n\r\nTo achieve what you want, I think you just need to setup `IsLoading = true` before the JS interop call, since at that point a render will be triggered. \r\n\r\nIn other situations you need to call state has changed."
      },
      {
        "user": "SaebAmini",
        "created_at": "2020-07-06T22:38:51Z",
        "body": "Thanks for your quick reply @javiercn!\r\n\r\nThis is very interesting and a good gotcha to be aware of.\r\n\r\nSo to confirm, it's because the state-change is happening _in between_ the two async calls, and because the second async call (`Task.Delay`) takes a while to complete, Blazor doesn't detect and trigger a re-render, because you're saying once it encounters the first async call, then _all_ subsequent async calls need to be completed in the method for detection and re-render to happen?\r\n\r\n> Blazor only triggers a render within an event handler in two situations. After all the synchronous code has completed and after all the asynchronous code has completed.\r\n\r\nDo you mean all the synchronous code _before_ the first async call? confirming because there are still plenty of other bits of synchronous code left, even if I move `IsLoading = true` to the top, although they would be synchronous code in async code callbacks."
      },
      {
        "user": "javiercn",
        "created_at": "2020-07-07T09:47:01Z",
        "body": "@SaebAmini It works more or less like this. Your method gets conceptually transformed to something more or less like this:\r\n\r\n```csharp\r\nreturn Task.Delay(10)\r\n  .ContinueWith(t => { IsLoading = true; /* here */ return Task.Delay(5000); })\r\n  .ContinueWith(t => IsLoading = false)\r\n```\r\n\r\nBlazor only receives the returned task from this method. All we do is check whether the task completed (ran synchronously) and trigger a render or whether the task did not complete yet (it is running some async code). In this second case we do something like\r\n```csharp\r\nhandlerTask.ContinueWith(t => StateHasChanged())\r\n```\r\n\r\nWhich triggers the other render after the async work completes. The point is that we can know when the async work starts and when it ends, but there is no way for us to insert StateHasChanged calls at the point marked by the comment above."
      },
      {
        "user": "SaebAmini",
        "created_at": "2020-07-08T08:54:17Z",
        "body": "That makes sense. Thanks a lot for explaining @javiercn"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of Blazor's rendering behavior during asynchronous operations",
      "Clarification of when Blazor triggers automatic re-renders in event handlers",
      "Guidelines for state management between consecutive async operations",
      "Understanding of Task continuation behavior in Blazor's execution context"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:04:18"
    }
  },
  {
    "number": 21226,
    "title": "Checkbox keep checked, after List Updated and StateHasChanged() method is called",
    "created_at": "2020-04-27T06:26:30Z",
    "closed_at": "2020-04-27T15:34:47Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/21226",
    "body": "Hi, I have this code in Blazor :\r\n\r\n```\r\n@foreach (var item in list)\r\n{\r\n <input type=\"checkbox\" @onchange=\"@(e => HandleCheckChanged(e, item.Name))\" checked=\"@item.IsChecked\">\r\n}\r\n\r\nprivate async Task HandleCheckChanged(ChangeEventArgs e, string itemName)\r\n{\r\n   // do something ...\r\n   StateHasChanged();\r\n}\r\n```\r\nif I check a checkbox it calls the HandleCheckChanged and the checkbox is checked\r\nBut if I change the list items the previews checked checkbox is still checked and is not updated based on the new list items.\r\n\r\nfor example suppose that I have a list of ordered numbers {1-20} I follow these steps :\r\n1 : list = GetAll().Where(c => c.Id < 10);\r\n2 : I check the first checkbox (number 1)\r\n3 : list = GetAll().Where(c => c.Id >= 10); (list updated and state has changed)\r\n4 : the problem raises here , checkbox 11 is checked ??? but its value is false\r\nIt seems that DOM does not follow the Component's State ",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/21226/comments",
    "author": "webebox",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-04-27T14:40:33Z",
        "body": "@webebox thanks for contacting us.\r\n\r\nSeveral things here, I don't think you need to be calling `StateHasChanged` in your handler. The framework will do that for you automatically. You likely need to use `@key` to have the behavior you want, since otherwise Blazor tries to find the minimal change needed to update the UI and that might not have the effect you expect."
      },
      {
        "user": "webebox",
        "created_at": "2020-04-27T15:34:44Z",
        "body": "Thank you. using @key solved the problem."
      }
    ],
    "satisfaction_conditions": [
      "Ensures Blazor correctly tracks checkbox state when list items change",
      "Explains how to maintain component identity during list updates",
      "Addresses Blazor's UI update behavior without manual StateHasChanged calls",
      "Resolves DOM/component state synchronization for dynamic lists"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:04:25"
    }
  },
  {
    "number": 20455,
    "title": "In Blazor Server 3.1, is it possible to move _Host.cshtml?",
    "created_at": "2020-04-02T16:03:52Z",
    "closed_at": "2020-04-02T19:43:30Z",
    "labels": [
      "question",
      "area-mvc",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/20455",
    "body": "### Is your feature request related to a problem? Please describe.\r\nWe would like to organize code by Feature / Page.  Is it possible to move \"\\Pages\\\\_Host.cshtml\" to \"\\Features\\Host\\\\_Host.cshtml\" ?\r\n\r\n### Describe the solution you'd like\r\nWe would like to move \"\\Pages\\\\_Host.cshtml\" to \"\\Features\\Host\\\\_Host.cshtml\"\r\n\r\n### Additional context\r\nBecause we host our Blazor Server apps a sub sites in IIS onpremise, we already have the href of the base tag set:  `<base` href=\"/PickListWeb/\" `/>`\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/20455/comments",
    "author": "roysurles",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-04-02T16:16:55Z",
        "body": "@roysurles thanks for contacting us.\r\n\r\nIt is doable I believe, `_Host.cshtml` is a plain razor page used as the entry point for the server-side blazor app.\r\n\r\n@pranavkm can you answer this since you are more familiar with the area."
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2020-04-02T17:04:44Z",
        "body": "Yes, in your `Startup.cs`, change the call to `AddRazorPages` to pass a different root directory. Example:\r\n\r\n```cs\r\n            services.AddRazorPages(options =>\r\n            {\r\n                options.RootDirectory = \"/something\";\r\n            });\r\n```"
      },
      {
        "user": "roysurles",
        "created_at": "2020-04-02T19:32:20Z",
        "body": "Worked exactly as described... thanks much!"
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates how to configure Razor Pages root directory in Blazor Server",
      "Preserves functionality of _Host.cshtml as the application entry point"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:04:36"
    }
  },
  {
    "number": 19479,
    "title": "RAZORSDK1006 warning",
    "created_at": "2020-03-01T20:16:34Z",
    "closed_at": "2020-03-02T12:34:42Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19479",
    "body": "### Describe the bug\r\nI have an asp.net project that uses Microsoft.AspNetCore.Mvc package. This generates a compiler warning RAZORSDK1006 warning about Razor language version downgrade. According to the description, this is caused by a reference to Microsoft.AspNetCore.Razor.Design package.\r\n\r\nThis package is referenced by Microsoft.AspNetCore.Mvc package - can it be removed?\r\n\r\n### Further technical details\r\n- Targeting .net core 3.1\r\n- Referenced version of Microsoft.AspnetCore.Mvc is 2.2.0\r\n- IDE is Visual Studio 2019 v16.4.5\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19479/comments",
    "author": "bstordrup",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2020-03-01T22:03:36Z",
        "body": "Ideally a 3.1 project wouldn't be referencing MVC 2.2.0 - do you know why that's there? I would try to remove that.\r\n\r\n@pranavkm "
      },
      {
        "user": "bstordrup",
        "created_at": "2020-03-02T06:17:03Z",
        "body": "@rynowak, which version should I be using instead? Microsoft.AspNetCore.Mvc 2.2.0 is the latest available package on NuGet."
      },
      {
        "user": "rynowak",
        "created_at": "2020-03-02T06:22:06Z",
        "body": "Most ASP.NET Core libraries don't ship packages at all as of 3.0 - they are just included in a web project by default.  It should be safe to remove"
      },
      {
        "user": "bstordrup",
        "created_at": "2020-03-02T12:34:42Z",
        "body": "@rynowak, thank you. Removing the packages fixed the issue."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of compatibility between ASP.NET Core versions and package references",
      "Guidance on proper package management for ASP.NET Core 3.1 projects",
      "Validation that removing legacy packages is safe",
      "Resolution of Razor SDK version conflicts"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:04:58"
    }
  },
  {
    "number": 19463,
    "title": "BuildRenderTree not being called",
    "created_at": "2020-02-29T05:15:56Z",
    "closed_at": "2020-03-01T04:52:19Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19463",
    "body": "I have a Person.razor component which I wanted to separate the code behind from. After doing so, `BuildRenderTree` method is never called. See below for more information.\r\n\r\n### Customer.razor\r\nThere is no markup intentionally.\r\n\r\n``` C# \r\n@page \"/customer\"\r\n@inherits CustomerBase\r\n```\r\n\r\n### Customer.razor.cs\r\n``` C# \r\n    public class CustomerBase: ComponentBase\r\n    {\r\n        protected override void BuildRenderTree(RenderTreeBuilder builder)\r\n        {\r\n            base.BuildRenderTree(builder);\r\n            builder.AddMarkupContent(0, \"<h1>Person</h1>\");\r\n        }\r\n    }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19463/comments",
    "author": "yopez83",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2020-02-29T21:24:54Z",
        "body": "Using `@inherits` in a `.razor` file will inherit from the class you provide, and will **always** override `BuildRenderTree`. \r\n\r\nSo your hierarchy looks like:\r\n\r\n```txt\r\nCustomer::BuildRenderTree(...) (empty)\r\nCustomerBase::BuildRenderTree(...) (overridden by Customer)\r\nComponentBase::BuildRenderTree(...) (abstract)\r\n```\r\n\r\nThe solution to this is just remove `Customer.razor` if you want to define a render method in C#. You can use `[RouteAttribute(...)]` to apply a route.\n\n---\n\nYou also don't need to use inheritance to have a code-behind. Blazor as of 3.1 supports partial classes."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to structure Blazor components when separating markup and code-behind while preserving render tree building",
      "Clarification of inheritance vs partial class approaches for code separation",
      "Guidance on applying routing without .razor file markup",
      "Explanation of component lifecycle when overriding BuildRenderTree"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:13"
    }
  },
  {
    "number": 19321,
    "title": "How Can I pass Parent Tag Ref to Child Tag in taghelper",
    "created_at": "2020-02-25T04:59:37Z",
    "closed_at": "2020-02-26T06:12:49Z",
    "labels": [
      "question",
      "area-mvc",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19321",
    "body": "How Can I pass Parent Tag Ref to Child Tag in taghelper??",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19321/comments",
    "author": "kugarliyifan",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2020-02-25T07:41:53Z",
        "body": "@kugarliyifan thanks for contacting us.\r\n\r\nI'm not sure if this can be done through the TagHelper context or if it is simply not possible. @NTaylorMullen do you have any idea on how to achieve this?"
      },
      {
        "user": "NTaylorMullen",
        "created_at": "2020-02-25T17:37:16Z",
        "body": "@kugarliyifan `Ref` as in the HTML ref attribute or the actual instance of the parent tag?"
      },
      {
        "user": "kugarliyifan",
        "created_at": "2020-02-26T04:30:22Z",
        "body": "the actual instance of parent tag object\r\n\r\n> @kugarliyifan `Ref` as in the HTML ref attribute or the actual instance of the parent tag?\r\n\r\n"
      },
      {
        "user": "NTaylorMullen",
        "created_at": "2020-02-26T06:12:22Z",
        "body": "> the actual instance of parent tag object\r\n\r\nHmm, out of curiosity why do you want the parent `TagHelper` instance?\r\n\r\nTo do what you're looking for in your parent `TagHelper` have it add itself to the `TagHelperContext.Items` collection and have the child `TagHelper` read it."
      },
      {
        "user": "kugarliyifan",
        "created_at": "2020-02-26T07:05:11Z",
        "body": "emm,,thk ,,I use Items property now"
      }
    ],
    "satisfaction_conditions": [
      "Mechanism to share the parent TagHelper instance with child TagHelper",
      "Use of TagHelper framework features for inter-component communication",
      "Parent-child relationship maintenance in TagHelper hierarchy"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:20"
    }
  },
  {
    "number": 19114,
    "title": "Client-SignalR on WebAPI without Hub-SignalR in the same solution - how to configure for work? ",
    "created_at": "2020-02-18T07:43:54Z",
    "closed_at": "2020-04-25T20:00:54Z",
    "labels": [
      "question",
      "area-signalr"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19114",
    "body": "# Issue Title\r\n\r\nClient-SignalR on WebAPI without Hub-SignalR in the same solution - how to configure for work? \r\n\r\n# General\r\nWindows 10\r\ndotnet Core 3.1.1\r\nWebAPI\r\nSignalR \r\n----------\r\nThese are 2 applications Server and WebAPI :\r\nMy architecture has 1) remote WebAPI application and 2) Server that calls WebAPI. They are located at different addresses and perform different tasks. Hub SignalR is located on Server. I need to configure Client on WebAPI so that it informs everyone about the intermediate steps performed so that the server knows.\r\nThe whole day I was looking for how to register Client SignslR as Service (in WebAPI) so that Client SignslR would send messages from Controller on WebAPI to Server (Hub SignalR ).\r\nI would like it to be convenient as with IHubContext, but at least correctly, even if it is not convenient.\r\n\r\nHelp me, plz. Cann't find any sample how use SignalR client on WebAPI\\in controller without Hub in the same project.\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19114/comments",
    "author": "parad74",
    "comments": [
      {
        "user": "arunranjan1988",
        "created_at": "2020-02-18T11:31:26Z",
        "body": "if  i have load balance then how it works Signal R "
      },
      {
        "user": "BrennanConroy",
        "created_at": "2020-02-18T16:32:35Z",
        "body": "You need to create the connection on the WebAPI and manage passing it to your controller yourself. There is no built in server like `IHubContext` for this. You would need to create your own custom service that wraps a HubConnection if you'd like something similar.\r\n\r\npseudo code:\r\n```c#\r\nclass MyService\r\n{\r\n    private readonly HubConnection _connection;\r\n    public MyService()\r\n    {\r\n        _connection = new HubConnectionBuilder().WithUrl(\"someurl\").Build();\r\n       _connection.On(...);\r\n    }\r\n\r\n    public Task StartAsync()\r\n    {\r\n        return _connection.StartAsync();\r\n    }\r\n\r\n    public Task SendMessage(string message)\r\n    {\r\n        return _connection.SendAsync(\"method\", message);\r\n    }\r\n}\r\n```"
      },
      {
        "user": "parad74",
        "created_at": "2020-02-22T16:30:02Z",
        "body": "BrennanConroy , thank you for confirming that this must works. It helped me.\r\nI continued testing.\r\n\r\nAnd got so result\r\nMy mistake was that in Action in  Controller I returned not  async Task\r\n//NOT WORK\r\n```\r\n[HttpGet]\r\npublic Processes GetProcesses ()\r\n{\r\n//and I called everything synchronously\r\n...\r\n_hubChatConnection.StartAsync();\r\n_hubChatConnection.InvokeAsync(\"SendMessage\", \"_hubSignalRRepository\", \"Processes\");\r\n...\r\n}\r\n```\r\nno messages-error were issued in VisualStudio\r\n//==========================\r\n//Need change to async\\await !\r\n//WORK\r\n```\r\n[ServiceFilter(typeof(ControllerSignalRChatHubFilter))]\r\n[HttpGet]\r\npublic async Task<Processes> GetProcesses()\r\n{\r\n\tProcesses processes = new Processes();\r\n\tprocesses = this._processRepository.GetProcesses();\r\n\ttry\r\n\t{\r\n\tawait this._hubSignalRRepository.HubChatConnection.StartAsync();\r\n\tawait this._hubSignalRRepository.HubChatConnection.InvokeAsync(\"SendMessage\", \"GetProcesses\", \"Count = \" + processes.Count);\r\n\t}\r\n\tcatch (Exception ecx) { this._logger.LogError(ecx.Message, ecx); }\r\n\tfinally { await this._hubSignalRRepository.HubChatConnection.StopAsync();}\r\n\treturn processes;\r\n}\r\n\r\n// add ActionFilter\r\n ControllerSignalRChatHubFilter : Attribute, IActionFilter\r\n...\r\npublic void OnActionExecuting(ActionExecutingContext context)\r\n{\r\n\ttry\r\n\t{\r\n\tif (_hubSignalRRepository.HubChatConnection == null)\r\n\t{\r\n\t_hubSignalRRepository.HubChatConnection = new HubConnectionBuilder()\r\n\t  .WithUrl(_chatHubAddress)\r\n\t  .Build();\r\n\t\t\t\r\n\t_hubSignalRRepository.HubChatConnection.On<string, string>(SignalRHubFunction.ReceiveMessage, (user, message) =>\r\n\t{\r\n\t_logger.LogInformation(\"OnActionExecuting.ControllerSignalRChatHubFilter\" + \" create SignalR Cient \");\r\n\t});\r\n}\r\n}\r\ncatch (Exception ex)\r\n{\r\n}\r\n}\r\n\r\n```\r\n\n\n---\n\nIt works, but I still have question where to do StartAsync \\ StopAsync ?\r\nIn every Action ? This is good practice? "
      },
      {
        "user": "BrennanConroy",
        "created_at": "2020-02-25T16:22:02Z",
        "body": "> In every Action ? This is good practice?\r\n\r\nNo, you should probably do it once at the beginning of your application."
      },
      {
        "user": "ghost",
        "created_at": "2020-04-25T20:00:54Z",
        "body": "Thank you for contacting us. Due to a lack of activity on this discussion issue we're closing it in an effort to keep our backlog clean. If you believe there is a concern related to the ASP.NET Core framework, which hasn't been addressed yet, please file a new issue.\n\nThis issue will be locked after 30 more days of inactivity. If you still wish to discuss this subject after then, please create a new issue!"
      }
    ],
    "satisfaction_conditions": [
      "Demonstrate how to establish a persistent SignalR client connection from a WebAPI controller to a remote SignalR Hub",
      "Show proper async/await usage for SignalR client operations in ASP.NET Core controllers",
      "Provide guidance on connection lifecycle management (start/stop) for long-running API operations",
      "Include a service abstraction pattern for SignalR client integration",
      "Address error handling and connection resilience in distributed systems"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:30"
    }
  },
  {
    "number": 17764,
    "title": "How can I access from AuthorizeRouteView.NotAuthorized the url or name of a component .",
    "created_at": "2019-12-11T08:31:14Z",
    "closed_at": "2019-12-12T00:10:27Z",
    "labels": [
      "question",
      "area-blazor",
      ":heavy_check_mark: Resolution: Answered",
      "Status: Resolved"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17764",
    "body": "How can I access from AuthorizeRouteView.NotAuthorized the url or name of a page component from which I'm being redirected to a Login component. In other words, when an unauthenticated user tries to access a page component with the Authorize attribute, he should be redirected to a Login component. The code to navigate to the  Login component resides within the AuthorizeRouteView.NotAuthorized property thus:\r\n\r\n        <AuthorizeRouteView RouteData=\"@routeData\" \r\n                                    DefaultLayout=\"@typeof(MainLayout)\">\r\n                <NotAuthorized>\r\n                       NavigationManager.NavigateTo(\"Login\");\r\n                 </NotAuthorized>\r\n                <Authorizing>\r\n                    Wait...\r\n                </Authorizing>\r\n          </AuthorizeRouteView>\r\n\r\nNow, what I want to pass with the login route is the return url; that is the url from which the user is redirected, so that if the login succeed, I can redirect the user to the the page he wanted to access. I could do it, but as shown below, but it smells as a workaround, and I want to know if Blazor has a dedicated feature for this purpose, which I believe many users will need without resorting to workarounds.  This is the code that is supposed to do the job:\r\n    \r\n     @{\r\n          var returnUrl = routeData.PageType.Name.Equals(\"Index\") ? null : routeData.PageType.Name;\r\n                           \r\n          var str = returnUrl == null ? $\"Login/Index\" : $\"Login/{returnUrl}\";\r\n\r\n           NavigationManager.NavigateTo(str);\r\n     }\r\n \r\nNote: routeData.PageType.Name returns values such as Counter and FetchData, which is fine and I can use it as the return url. But it also returns Index, which is not so fine, because I can't use Index as a url...\r\nThis \"Login/Counter\" works, and this \"Login/FetchData\" aslo works, but this \"Login/Index\" does not exist.\r\n\r\nNote also that in the Login component, I define a parameter Property which will accept the return url value passed to the Login component. \r\n\r\nThis should be a common scenario, and that feature is much needed unless I've missed something. Thanks.   ",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17764/comments",
    "author": "enetstudio",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-12-11T11:03:00Z",
        "body": "@enetstudio thanks for contacting us.\r\n\r\nYou could write a \"Redirect\" component and use NavigaionManager.Uri to get the current URI, and then redirect appropriately."
      },
      {
        "user": "enetstudio",
        "created_at": "2019-12-12T00:07:44Z",
        "body": "Thank you very much for your quick and immensely  helpful response. I was well aware of NavigaionManager.Uri property, but I thought that I could not get the current uri as I wrongly believed that the page I was trying to access no longer exists, as a redirection to the App component has occurred. But I guess that  the App component ( and the Router embedded within) are not part of the routing. They are the routing agent themselves, and as long as no new routing (to a routable component)  has taken place, the current uri is that of the page I was trying to access (say, the FetchData page with the Authorize attribute). Am I right in my assumption ? Anyhow I did what you've suggested and it works great. Once again, many thanks..."
      }
    ],
    "satisfaction_conditions": [
      "Mechanism to capture the original requested URL before redirection",
      "Native Blazor feature utilization for URL handling",
      "Proper handling of root/Index path edge cases",
      "URL parameter passing compatibility"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:41"
    }
  },
  {
    "number": 17551,
    "title": "How to Log Controller/Handler Name From Middleware",
    "created_at": "2019-12-03T17:44:19Z",
    "closed_at": "2019-12-04T17:41:03Z",
    "labels": [
      "question",
      "area-mvc",
      ":heavy_check_mark: Resolution: Answered"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17551",
    "body": "I want to log (along with other things) the name of the controller that is ultimately invoked.  That seems to require that controllers make an explicit call or use an ActionFilter.  I don't want to encumber controller writers with that.   How can I do this in middleware?   Essentially I want to insert middleware between the endpoints and the controllers.\r\n\r\nAny recommendations?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17551/comments",
    "author": "zachwieja",
    "comments": [
      {
        "user": "Kahbazi",
        "created_at": "2019-12-04T16:59:18Z",
        "body": "You can add a middleware after `UseRouting()` and before `UseEndpoints()` and use the endpoint metadata to get the controller name.\r\n\r\n```\r\napp.UseRouting();\r\n\r\napp.Use((context, next) =>\r\n{\r\n    var endpoint = context.GetEndpoint();\r\n    if (endpoint != null)\r\n    {\r\n        var controllerActionDescriptor = endpoint.Metadata.GetMetadata<ControllerActionDescriptor>();\r\n        if (controllerActionDescriptor != null)\r\n        {\r\n            var controllerName = controllerActionDescriptor.ControllerName;\r\n           // you can log controllerName here\r\n        }\r\n    }\r\n\r\n    return next();\r\n});\r\n\r\napp.UseEndpoints(endpoints =>\r\n{\r\n    endpoints.MapControllerRoute(\r\n        name: \"default\",\r\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\r\n});\r\n```"
      },
      {
        "user": "javiercn",
        "created_at": "2019-12-04T17:41:03Z",
        "body": "@zachwieja thanks for contacting us.\r\n\r\n@Kahbazi answer is correct, that's the appropriate approach."
      },
      {
        "user": "zachwieja",
        "created_at": "2019-12-04T20:59:20Z",
        "body": "Verified.  Thank you."
      }
    ],
    "satisfaction_conditions": [
      "Solution must retrieve controller name without requiring explicit controller modifications",
      "Implementation must work through ASP.NET Core middleware pipeline",
      "Must access routing metadata before controller execution",
      "Should utilize framework-provided endpoint information"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:51"
    }
  },
  {
    "number": 17416,
    "title": "Hosting bundle IIS reset / application pool recycle question",
    "created_at": "2019-11-26T14:04:04Z",
    "closed_at": "2019-12-03T10:50:29Z",
    "labels": [
      "question",
      "feature-iis",
      ":heavy_check_mark: Resolution: Answered",
      "area-networking"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/17416",
    "body": "Hi,\r\nI'm currently working on expanding a setup application that downloads applications and puts them in a IIS folder. Some of the applications are asp. net core which require the hosting bundle to be installed. The setup module will install the bundle if it not found on the found on the target machine(which runs the setup application). When i was testing the bundle installer i saw in the eventlog all the application pools where recycled. \r\n\r\n- Why is this recycle started? \r\n    - Is this due to a IIS reset?  \r\n\r\nThe only thing i could think of was for the environment path that is added for the dotnet.exe location but we install everything in the default folders(C:\\Program Files\\dotnet).  \r\n\r\nThe web.configs for our asp.net core application all have a full path to the dotnet exe path. \r\n\r\n- Is the recycle necessary? \r\n    - Is there a way to turn this recycle off if it not necessary?\r\n\r\nI'm asking this because the customers where the applications are being installed can also have other application running on IIS and we don't want to disturb there process. \r\n\r\nKind regards,\r\n\r\nWalter\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/17416/comments",
    "author": "WalterEbbers",
    "comments": [
      {
        "user": "jkotalik",
        "created_at": "2019-11-26T16:33:31Z",
        "body": "> Why is this recycle started?\r\n\r\nI don't think we explicitly restart IIS/WAS via the hosting bundle. From what I thought, we update the applicationhost.config file, which could trigger restarts based on the application itself. \r\n\r\n> The web.configs for our asp.net core application all have a full path to the dotnet exe path.\r\n\r\nCan you elaborate more on this?\r\n\r\nIn general, we don't recommend installing the hosting bundle while sites are running at the same time. Maybe do red green deployment or something like that instead to installing the bundle while the app isn't running."
      },
      {
        "user": "WalterEbbers",
        "created_at": "2019-11-26T17:27:28Z",
        "body": "> > Why is this recycle started?\r\n> \r\n> I don't think we explicitly restart IIS/WAS via the hosting bundle. From what I thought, we update the applicationhost.config file, which could trigger restarts based on the application itself.\r\n> \r\n> > The web.configs for our asp.net core application all have a full path to the dotnet exe path.\r\n> \r\n> Can you elaborate more on this?\r\n> \r\n> In general, we don't recommend installing the hosting bundle while sites are running at the same time. Maybe do red green deployment or something like that instead to installing the bundle while the app isn't running.\r\n\r\nThnx for the response!\r\n\r\nWhat i meant by the config was the following tag:\r\n` <aspNetCore processPath=\"C:\\Program Files\\dotnet\\dotnet.exe\" arguments=\".\\API.dll\" stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\stdout\" shutdownTimeLimit=\"1\" />`\r\n\r\nBut if the change to the applicationhost.config is necessary, we can give our customers who run the software the chance to perform the install at a moment when its suitable for them, but it would be helpful to us to know that this actually happens or that something else from the installer triggers the recycle. \r\n"
      },
      {
        "user": "analogrelay",
        "created_at": "2019-12-02T23:29:53Z",
        "body": "The hosting bundle installs an IIS module (ANCM) so IIS *has* to restart in order to load it. This is the expected behavior at this time."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of the root cause for application pool recycling during hosting bundle installation",
      "Clarification on whether the recycle is mandatory for hosting bundle functionality",
      "Identification of configurable options to prevent unnecessary recycling",
      "Recommendations for deployment strategies that minimize service disruption",
      "Analysis of relationship between environment variables/paths and IIS recycling"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:05:59"
    }
  },
  {
    "number": 16839,
    "title": "How to setup integration tests so that Program.Main gets tested",
    "created_at": "2019-11-05T04:19:28Z",
    "closed_at": "2019-11-06T10:02:58Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/16839",
    "body": "The gist of my question is: how to setup integration tests so that Program.Main gets tested, or how to move most of the logic that are generally found in Program.Main to start up so to make Program.Main smaller, hence not so critical if not covered by integration tests. \r\n\r\nDescription:\r\nI can setup an integration test as the following: \r\n\r\n```csharp\r\npublic class WebAPITest : IClassFixture<WebApplicationFactory<Startup>>\r\n{\r\n    private readonly WebApplicationFactory<Startup> _factory;\r\n\r\n    public WebAPITest(WebApplicationFactory<Startup> factory)\r\n    {\r\n        _factory = factory;\r\n    }\r\n\r\n    [Fact]\r\n    public async Task IfConsumerReceives()\r\n    {\r\n        var client = _factory.CreateClient();\r\n        var response = await client.GetAsync(\"/api/v1/items\");\r\n        response.EnsureSuccessStatusCode();\r\n    }\r\n}\r\n```\r\n\r\nwhere I define `Startup` and `Program.Main` as the following: \r\n\r\n```csharp\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        var host = HostBuilder(configuration, args).Build();\r\n        host.Run();\r\n    }\r\n\r\n    public static IHostBuilder CreateHostBuilder(string[] args) => \r\n        Host.CreateDefaultBuilder(args)\r\n        .ConfigureWebHostDefaults(builder =>\r\n        {\r\n            builder.UseStartup<Startup>();\r\n        });\r\n\r\n    private static IHostBuilder HostBuilder(IConfiguration configuration, string[] args) =>\r\n        Host.CreateDefaultBuilder(args)\r\n        .ConfigureWebHostDefaults(builder =>\r\n        {\r\n            builder.UseConfiguration(configuration);\r\n            builder.UseStartup<Startup>();\r\n            builder.CaptureStartupErrors(false);\r\n            builder.UseContentRoot(Directory.GetCurrentDirectory());\r\n        }).\r\n        UseServiceProviderFactory(new AutofacServiceProviderFactory());\r\n}\r\n\r\npublic class Startup\r\n{\r\n    public IConfiguration Configuration { get; }\r\n    public ILifetimeScope AutofacContainer { get; private set; }\r\n    public IWebHostEnvironment WebHostingEnvironment { get; private set; }\r\n\r\n    public Startup(IConfiguration configuration, IWebHostEnvironment env)\r\n    {\r\n        Configuration = configuration;\r\n        WebHostingEnvironment = env;\r\n    }\r\n\r\n    public void ConfigureServices(IServiceCollection services)\r\n    {\r\n        services\r\n            .AddMvc(options => options.EnableEndpointRouting = false)\r\n            .SetCompatibilityVersion(CompatibilityVersion.Version_3_0);\r\n        services.AddOptions();\r\n    }\r\n\r\n    public void ConfigureContainer(ContainerBuilder builder)\r\n    {\r\n        //some configs such as: builder.RegisterModule(new AutofacModule());\r\n    }\r\n\r\n    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n    {\r\n        app.UseHsts();\r\n        app.UseHttpsRedirection();\r\n        app.UseMvc();;\r\n    }\r\n}\r\n```\r\n\r\nI guess `Program.Main` and `Startup` as pretty much how they are commonly setup. \r\n\r\nMy concerns are: \r\n\r\n1. with this setup, integration tests start from `Startup` and `Program.Main` and all the `Host` setup/config is not tested. \r\n\r\n2. Some `Startup` logic may not work without the configs in `Program.Main`. For instance, `autofac` will fail with the following error without `UseServiceProviderFactory(new AutofacServiceProviderFactory()` set in the `Program.Main`, which is not executed when running the integration tests as the given example. \r\n\r\n> Unable to cast object of type 'Microsoft.Extensions.DependencyInjection.ServiceCollection' to type 'Autofac.ContainerBuilder'.\r\n\r\nWhat is the recommended way to setup `Startup`, `Program.Main`, or the integration tests so that `Program.Main` gets in the integration test execution path?\r\n\r\n\r\nPS: I generally end up creating a custom `WebApplicationFactory` where I mostly repeat what is in `Program.Main`, as the following, however, I guess this approach is not super exciting as it does not test the actual `Program.Main`: \r\n\r\n```csharp\r\npublic class WebAPITestApplicationFactory : WebApplicationFactory<Startup>\r\n{\r\n    protected override IHostBuilder CreateHostBuilder()\r\n    {\r\n        return Host.CreateDefaultBuilder()\r\n        .ConfigureWebHostDefaults(builder =>\r\n        {\r\n            builder.UseStartup<Startup>();\r\n        }).\r\n        UseServiceProviderFactory(new AutofacServiceProviderFactory());\r\n    }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/16839/comments",
    "author": "nxtx",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-11-05T17:11:46Z",
        "body": "@nxtx thanks for contacting us.\r\n\r\nI'm not sure I understand your question. \r\n\r\nWebApplicationFactory will call into your CreateHostBuilder method by default. If you need something else, then you need to override CreateHostBuilder and call it yourself."
      },
      {
        "user": "nxtx",
        "created_at": "2019-11-05T17:31:51Z",
        "body": "@javiercn visual studio fails on the following without any error message; so I am not sure how to set up `Program` as Entry point: \r\n\r\n```\r\npublic class WebAPITest : IClassFixture<WebApplicationFactory<Program>>\r\n```"
      },
      {
        "user": "javiercn",
        "created_at": "2019-11-05T18:03:28Z",
        "body": "@nxtx based on your code I would simply do as follows. Make `private static IHostBuilder HostBuilder(IConfiguration configuration, string[] args)` public\r\n\r\n```csharp\r\npublic class WebAPITestApplicationFactory : WebApplicationFactory<Startup>\r\n{\r\n    protected override IHostBuilder CreateHostBuilder()\r\n    {\r\n        var configuration = ...;\r\n        var args = ...;\r\n        return HostBuilder(configuration, args);\r\n    }\r\n}\r\n```\r\n\r\nAm I missing something here?"
      },
      {
        "user": "nxtx",
        "created_at": "2019-11-05T18:20:49Z",
        "body": "Two points: \r\n- instead of `Startup`, I want to use `Program`, hence get it covered with the integration testss;\r\n- Changing access modifier from `protected` to `public` causes compile-time error:\r\n   > cannot change access modifier when overriding `protected` inherited member `WebApplicationFactory<Startup>.CreateHostBuilder()`. \r\n\r\nPS: visual studio fails when calling the constructor of `WebApplicationFactory<Startup>` or `WebApplicationFactory<Program>` with the following error message: \r\n> The following constructor parameters did not have matching fixture data: WebApplicationFactory`1 factory"
      },
      {
        "user": "kle622",
        "created_at": "2019-11-05T18:39:14Z",
        "body": "Is there any more specific reason why you want to include `Program` as part of the tests? \r\nThe way it helps me to see it is, `Startup` class is the encapsulation of your application and `Program` class is simply a driver in the same way your integration test is a driver."
      },
      {
        "user": "nxtx",
        "created_at": "2019-11-05T21:24:57Z",
        "body": "I would like any possible issues with `Program` (e.g., when my colleagues make PRs) be caught by integration tests. More specifically, recently we forgot to include `UseServiceProviderFactory(new AutofacServiceProviderFactory())` in `HostBuilder` in `Program`, and since we mainly rely on tests to capture issues, we noticed the problem long after our product was released. Hence, we're would like to add integration tests that start test from `Program`. \n\n---\n\nA clarification; even with the following `Program` is not tested (e.g., `HostBuilder` is not called): \r\n\r\n```csharp\r\npublic class WebAPITest : IClassFixture<WebAPITestApplicationFactory>\r\n{\r\n    private readonly WebAPITestApplicationFactory _factory;\r\n    public WebAPITest(WebAPITestApplicationFactory factory)\r\n    {\r\n        _factory = factory;\r\n    }\r\n}\r\n\r\npublic class WebAPITestApplicationFactory : WebApplicationFactory<Program>\r\n{\r\n    public WebAPITestApplicationFactory() : base()\r\n    { }\r\n}\r\n```"
      },
      {
        "user": "javiercn",
        "created_at": "2019-11-06T10:02:58Z",
        "body": "We don\u2019t run your program.Main, the convention is to look for CreateHostBuilder as we need access to the host.\r\n\r\nOur recommendation is that you don\u2019t put any logic within the program main itself other than the calls present during project creation.\r\n\r\nAs an alternative add an additional test that doesn\u2019t use WAF and that simply calls your program main to start the app and verify it works.\n\n---\n\nI'm closing this issue as the question has been answered."
      },
      {
        "user": "nxtx",
        "created_at": "2019-11-06T19:14:58Z",
        "body": "Thanks for the clarification. "
      }
    ],
    "satisfaction_conditions": [
      "Solution must test the complete application host configuration including both Program and Startup classes",
      "Avoid duplicate host configuration code between production and test environments",
      "Provide a pattern to structure Program.cs that allows testing critical host configurations"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:06:26"
    }
  },
  {
    "number": 15216,
    "title": "Several migration issues",
    "created_at": "2019-10-21T11:48:34Z",
    "closed_at": "2019-10-21T18:20:51Z",
    "labels": [
      "question",
      "Needs: Author Feedback",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/15216",
    "body": "Hi,\r\n\r\nafter upgrading from 2.2 to 3.0, my Web API has several issues seemingly regarded to conventions changed in version 3.0 which I couldn't find a reference to in the migration docs.\r\n\r\nGeneral info:\r\nAll my controllers are based on a custom `ApiControllerBase` with this code:\r\n```\r\n    [ApiController]\r\n    public abstract class ApiControllerBase : ControllerBase\r\n    {\r\n    }\r\n```\r\nMy expectation is that all controllers which descend from this base controller have standard API controller behavior.\r\n\r\nThese are my issues:\r\n\r\n### GET request routing returns status 400 `A non empty request body is required`\r\n\r\nSource: \r\n```\r\n        [HttpGet]\r\n        [Route(\"{id}\")]\r\n        public async Task<TaskModel> GetByIdAsync(int id, IList<string> extend = null)\r\n        {\r\n            return await _service.GetByIdAsync(id, extend);\r\n        }\r\n```\r\nThis happens because the controller interprets the `extend` parameter to be contained in the request body. In version 2.2, this was correctly interpreted as a query parameter.\r\nMy question: This is a GET request. A GET request shouldn't have a body. Why does this error occur?\r\n\r\n### Unauthorized users get redirected to the login page\r\nOn API controllers, unauthorized users get redirected to the login page when unauthorized, HTML markup is returned with a 200 code. Why aren't 401 responses sent instead?\r\n\r\nThanks for your help!\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/15216/comments",
    "author": "maxmantz",
    "comments": [
      {
        "user": "blowdart",
        "created_at": "2019-10-21T13:41:04Z",
        "body": "_On API controllers, unauthorized users get redirected to the login page when unauthorized, HTML markup is returned with a 200 code. Why aren't 401 responses sent instead?_\r\n\r\nWhat authorization are you using?"
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-10-21T16:57:15Z",
        "body": "Thanks for contacting us, @maxmantz.\r\nFor the `ApiController` marked controllers the complex and collection type parameters are automatically expected to be coming `FromBody`. This behavior was behind a compat flag in 2.2, which in case if you haven't been using it, may come up as a breaking change for you.\r\nYou can force this to work the way you want by decorating these parameters with `[FromQuery]` attribute explicitly."
      },
      {
        "user": "maxmantz",
        "created_at": "2019-10-21T18:20:51Z",
        "body": "@blowdart I'm using IdentityServer4, so this could be related to the usage of that library and not to AspNetCore. I will investigate this further,\r\n\r\n@mkArtakMSFT Thanks for your pointers to the solution. This will fix it for me. "
      }
    ],
    "satisfaction_conditions": [
      "Explanation of ASP.NET Core 3.0's parameter binding convention changes for API controllers",
      "Clarification on how to maintain query parameter binding behavior for GET requests in 3.0",
      "Documentation of compatibility flags affecting API controller behavior"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:06:37"
    }
  },
  {
    "number": 15209,
    "title": "Parsing Request Accept header: why is Mvc not using Microsoft.Net.Http.Headers.MediaTypeHeaderValue?",
    "created_at": "2019-10-20T17:37:41Z",
    "closed_at": "2019-10-21T09:24:34Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/15209",
    "body": "There seems to be a redundancy in the framework to parse accept headers request. \r\nOn the one hand there's the type `AcceptHeaderParser `in `Microsoft.AspNetCore.Mvc.Formatters `which we used to handle content negotiation, but it has recently been made internal so we had to find another solution.\r\nOn the other hand, there's `Microsoft.Net.Http.Headers.MediaTypeHeaderValue` , which also parses headers, but the results are a bit different, regarding the Quality property parsing. \r\nWhich one are we supposed to use? We switched to `MediaTypeHeaderValue `because it's still public, but they seem to be redundant and do the same work, with some small differences... \r\nI notice that the `DefaultOutputFormatterSelector` is using the internal `Microsoft.AspNetCore.Mvc.Formatters.AcceptHeaderParser` and I was wondering why there's not just one implementation to parse headers.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/15209/comments",
    "author": "anna-git",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-10-21T09:24:14Z",
        "body": "> There seems to be a redundancy in the framework to parse accept headers request.\r\n\r\nThis is due to historical reasons. We optimized the parser on the MVC side to minimize allocations and we had some different requirements due to clients not correctly following the spec.\r\n\r\nThe headers in Microsoft.Net.Http.Headers.MediaTypeHeaderValue follow the spec as close as possible, while the ones MVC uses for parsing are a little bit more permisive and support some invalid constructs like \"*\" or \"*/\" that are known to be sent by some non-conforming clients.\r\n\r\nUsing `Microsoft.Net.Http.Headers.MediaTypeHeaderValue` should be fine for your case"
      }
    ],
    "satisfaction_conditions": [
      "Clarifies the purpose and intended use cases for both AcceptHeaderParser and MediaTypeHeaderValue",
      "Explains the design rationale behind having an internal MVC parser vs public MediaTypeHeaderValue",
      "Provides guidance on when to use MediaTypeHeaderValue versus alternative approaches",
      "Explains framework's approach to handling non-spec-compliant clients"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:06:43"
    }
  },
  {
    "number": 15161,
    "title": "RenderFragment ignores component's initialized values",
    "created_at": "2019-10-18T18:11:31Z",
    "closed_at": "2019-10-21T11:22:27Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/15161",
    "body": "`RenderFragment` ignores my initialized values.  In the following code, everytime there's a mouse click, a new object is created with the mouse coordinates where the click occurred.  During the rendering section in razor, the markup is generated as expected, but the `Coordinate` parameter is zero. The `CustomText` doesn't have this issue.\r\n\r\nThis is clearly a bug since it is unexpected and inconsistent. On a side note, why is `RenderFragment` emitting \"<!--!-->\"?\r\n\r\n```\r\n<div><!--!-->\r\n        <!--!--><div>Before the component</div>\r\n        <!--!--><!--!--><text x=\"0\" y=\"0\">Custom Text</text><!--!-->\r\n        <!--!--><div>Afterthe component</div>\r\n    </div>\r\n```\r\n\r\n```\r\nTextDesignObject.razor\r\n-----------------------\r\n@Markup\r\n\r\n@code\r\n{\r\n        public MarkupString Markup { get; private protected set; }\r\n\r\n        public string Style { get; set;  }\r\n        private PointF _coordinate;\r\n        [Parameter]\r\n        public PointF Coordinate { get => _coordinate; set { Console.WriteLine(\"Coordinate setter called\");  _coordinate = value; } }\r\n\r\n    public string CustomText { get; set; } = \"Custom Text\";\r\n    public string FontStyle { get; }\r\n\r\n    protected override void OnInitialized() {\r\n        var svgString = new string(\"<text x=\" + Coordinate.X + \" y=\" + Coordinate.Y + \">\" + CustomText + \"</text>\");\r\n        Markup = new MarkupString(svgString.ToString());\r\n    }\r\n}\r\n\r\nDesigner.razor\r\n---------------\r\n@foreach (var designObject in ToolService.DesignObjects)\r\n{\r\n    Console.WriteLine(\"Binding MouseCoordinate to DesignObject...\");\r\n    RenderFragment renderFragment = builder =>\r\n    {\r\n        builder.OpenComponent(0, designObject.GetType()); \r\n        builder.CloseComponent();\r\n    };\r\n    <div>\r\n        <div>Before the component</div>\r\n        @renderFragment\r\n        <div>After the component</div>\r\n    </div>\r\n}\r\n\r\n\r\n@code {\r\n    [Parameter]\r\n    // Create a new design object based on selected tool\r\n    private void OnDesignPanelClicked(MouseEventArgs e)\r\n    {\r\n        Console.WriteLine(\"CallingCreateDesignObject...\");\r\n        var designObject = ToolService.SelectedTool.CreateDesignObject();\r\n        if (designObject == null) return;\r\n        \r\n        Console.WriteLine(\"Setting design object to mouse coordinates.\");\r\n        designObject.Coordinate = new PointF((float) e.ClientX,  (float) e.ClientY);\r\n        Console.Write(designObject.Coordinate);\r\n        \r\n        Console.WriteLine(\"Adding new DesignObject\");\r\n        ToolService.DesignObjects.Add(designObject);\r\n    }\r\n}\r\n\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/15161/comments",
    "author": "Joebeazelman",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-10-21T11:22:27Z",
        "body": "@Joebeazelman Thanks for contacting us.\r\n\r\nYou are not passing in the designObject instance in the render fragment, you are only passing the type.\r\nThe coordinate is the default value because you are not passing it as a parameter inside the RenderFragment (which would be the appropriate way to do it).\r\nThe text is set in the property setter to a default value and its not defined as a parameter, so its value will always be constant.\r\n\r\nYou can't pass in a component instance directly in Blazor as that breaks the Blazor rendering model where Blazor itself is responsible for the lifecycle of the components.\r\n\r\nTo achieve your scenario I suggest you separate your component from your component model and iterate over the list of component models and pass in the parameters to the underlying components from the associated component model.\r\n\r\nI would also suggest (based on what I infer you are trying to do, that you give each component a unique identity using `@key=componentModel.key` which will help the renderer produce a better result according to what you are trying to implement.\r\n\r\nI would also discourage you from using `MarkupString` directly as that will open an attack vector for XSS.\r\n\r\n```\r\nDesigner.razor\r\n---------------\r\n@foreach (var designObject in ToolService.DesignObjects)\r\n{\r\n    RenderFragment renderFragment = builder =>\r\n    {\r\n        builder.OpenComponent(0, designObject.ComponentType);\r\n        builder.SetKey(designObject.Key);\r\n        builder.AddAttribute(1, designObject.Coordinates);\r\n        builder.CloseComponent();\r\n    };\r\n    <div>\r\n        <div>Before the component</div>\r\n        @renderFragment\r\n        <div>After the component</div>\r\n    </div>\r\n}\r\n```\r\n\r\n\n\n---\n\nClosing the issue as the behavior is by design and not a bug."
      },
      {
        "user": "Joebeazelman",
        "created_at": "2019-10-23T19:20:13Z",
        "body": "Thanks Javier.  My code is based on what I could find on the web.  It didn't make any sense to me either. I was merely trying to dynamically create a list of polymorphic components.  It was unclear whether Blazor supports it or not, but now it's settled. So dynamic creation isn't supported as a first class citizen as I was expecting.  "
      }
    ],
    "satisfaction_conditions": [
      "Explanation of proper parameter passing in RenderFragment dynamic component creation",
      "Clarification of Blazor's component lifecycle management requirements",
      "Guidance on maintaining component state across re-renders",
      "Pattern for dynamic polymorphic component rendering"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:06:54"
    }
  },
  {
    "number": 14702,
    "title": "How to add multiple styles using the IDictionary<string, object> in Blazor attributes ?",
    "created_at": "2019-10-03T13:24:15Z",
    "closed_at": "2019-10-03T15:20:46Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14702",
    "body": "### Below is the code blow which throws an exception as this key value already exists.\r\n\r\n\"<div @attributes=\"@_Attributes\"></div>\"\r\n\r\n@code {\r\nprivate IDictionary<string, object> _Attributes = new Dictionary<string, object>();\r\n\r\n// This adds to the element\r\n_Attributes.Add(\"style\", \"width:\" + this.width);\r\n\r\n// This throws an exception that the key value already exists\r\n_Attributes.Add(\"style\", \"height:\" + this.height);\r\n}\r\n\r\nCan anyone suggest a solution for this  to achieve in any other way.?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14702/comments",
    "author": "Indrajith-Sync",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-10-03T15:52:09Z",
        "body": "Thanks for contacting us, @Indrajith-Sync.\r\nAttribute Splatting (the @attributes directive) is meant to be used for applying different attributes to an  element. In this case you're trying to apply multiple sub-values to the same `style` attribute.\r\nYou have two options here, either concatenate both `width` and `height` pieces into a single string when applying to style (using the attribute splatting technique), or directly set the `style` attribute on the `div`.\n\n---\n\nHere is a sample:\r\n```razor\r\n@page \"/\"\r\n\r\n<h1>Hello, world!</h1>\r\n\r\nWelcome to your new app.\r\n<div @attributes=\"attributes\">option 1</div>\r\n<div style=\"@Style\">option 2</div>\r\n\r\n@code{\r\n    public IDictionary<string, object> attributes = new Dictionary<string, object>();\r\n\r\n    public string Style { get; set; }\r\n    \r\n    public int Width { get; set; } = 300;\r\n    public int Height { get; set; } = 15;\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        this.Style = $\"width: {Width}px; height: {Height}px; border: 1px solid red;\";\r\n\r\n        this.attributes.Add(\"style\", this.Style);\r\n    }\r\n}\r\n```"
      },
      {
        "user": "Indrajith-Sync",
        "created_at": "2019-10-04T03:06:43Z",
        "body": "Hi @mkArtakMSFT \r\n\r\nThanks it works fine..!"
      }
    ],
    "satisfaction_conditions": [
      "Supports combining multiple style properties into a single style attribute entry",
      "Maintains compatibility with Blazor's attribute splatting mechanism",
      "Avoids dictionary key collisions when applying dynamic attributes"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:01"
    }
  },
  {
    "number": 14699,
    "title": "[Blazor] AuthorizeView Policy=<value> bug when <value> comes from variable",
    "created_at": "2019-10-03T11:31:07Z",
    "closed_at": "2019-10-03T16:14:21Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14699",
    "body": "### Description\r\nIn **Blazor**, When trying to use tag `AuthorizeView Policy=<some-value>` with property value being a string variable, it does not behave the same as if property value was a raw string.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '3.0.1'\r\n2. Run this code \r\n```\r\n<AuthorizeView Policy=ADMINS_ONLY >\r\n    <Authorized>\r\n        Authorized...\r\n    </Authorized>\r\n    <NotAuthorized>\r\n        NotAuthorized\r\n    </NotAuthorized>\r\n</AuthorizeView>\r\n\r\n@code {\r\n    private string ADMINS_ONLY = \"AdminsOnly\";\r\n}\r\n```\r\n\r\n3. Should work like this \r\n```\r\n<AuthorizeView Policy=\"AdminsOnly\">\r\n    <Authorized>\r\n        Authorized...\r\n    </Authorized>\r\n    <NotAuthorized>\r\n        NotAuthorized\r\n    </NotAuthorized>\r\n</AuthorizeView>\r\n```\r\n\r\n4. See error\r\n`blazor.server.js:15 [2019-10-03T11:20:53.249Z] Error: There was an unhandled exception on the current circuit, so this circuit will be terminated. For more details turn on detailed exceptions in 'CircuitOptions.DetailedErrors'.`\r\n\r\n### Expected behavior\r\nThe AuthorizeView should call the AuthorizationHandler as provided by the policy setup (in this case: the policy named \"AdminsOnly\").\r\n\r\nUpdate: clearifying area of effect",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14699/comments",
    "author": "henkla",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2019-10-03T16:11:24Z",
        "body": "String properties require the `@` to use variable/expressions. My guess is that this is passing the value `ADMINS_ONLY` into your `AuthorizeView` and not `AdminsOnly` as you expect.\r\n\r\nTry:\r\n```html\r\n<AuthorizeView Policy=\"@ADMINS_ONLY\">\r\n```"
      },
      {
        "user": "henkla",
        "created_at": "2019-10-03T16:12:49Z",
        "body": "Wow. That's pretty... dumb of me. Thanks."
      },
      {
        "user": "rynowak",
        "created_at": "2019-10-03T16:14:07Z",
        "body": "no worries \ud83d\udc4d "
      }
    ],
    "satisfaction_conditions": [
      "Explanation of Blazor's attribute binding syntax requirements for policy values",
      "Clarification on static vs dynamic value handling in Blazor component attributes"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:29"
    }
  },
  {
    "number": 14246,
    "title": "Blazor Server should use absolute paths for blazor.server.js and for connecting to the Blazor hub",
    "created_at": "2019-09-23T06:09:17Z",
    "closed_at": "2019-09-23T22:58:22Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14246",
    "body": "It looks like Blazor Server is using relative paths in a couple of places that limit when it can be used. This caused some issues when I tried to use Blazor components in an MVC app on any view other than the home page.\r\n\r\nRepro steps:\r\n\r\n- Create an MVC app\r\n- Add `services.AddServerSideBlazor()` to `Startup.ConfigureServices` and `endpoints.MapBlazorHub()` in `Startup.Configure`.\r\n- Add the *blazor.server.js* script to the layout using the script tag we use in the Blazor Server template: `<script src=\"_framework/blazor.server.js\"></script>`\r\n- Add a Razor component to the project with some sort of user interactivity support.\r\n- Add the component to the *Privacy.cshtml* page: `@(await Html.RenderComponentAsync<MyComponent>(RenderMode.ServerPrerendered))`\r\n- Run the app and browser to the Privacy page\r\n\r\nActual result:\r\n- The component is not interactive, because the request for *blazor.server.js* goes to */Home/_framework/blazor.server.js*. \r\n- To work around this issue, update the script tag to use `~/`: `<script src=\"~/_framework/blazor.server.js\"></script>`. **Should we do this everywhere?**\r\n- The component is still not interactive because the SignalR client tries to connect to `/Home/_blazor/`. This seems like a bug we need to fix in *blazor.server.js*?\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14246/comments",
    "author": "danroth27",
    "comments": [
      {
        "user": "javiercn",
        "created_at": "2019-09-23T13:23:54Z",
        "body": "Using base relative paths is deliberate. If you serve components from a different path you can add\r\n```\r\n<base href=\"~/\" />\r\n```\r\nto set the base path correctly.\r\n\r\nAlternatively, you can configure the url explicitly in the blazor signalr options using\r\n```\r\nBlazor.start({\r\n                configureSignalR: builder.UseUrl('@Html.Content(\"/_blazor\")'\r\n            });\r\n```"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-09-23T14:43:30Z",
        "body": "Yes, you **must** set `<base href>` correctly otherwise other things can't work either (routing). Given correct base href, the relative URLs are correct, so this is by design.\r\n\r\nLeaving open just so it comes up in triage in case there's anything else to say."
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-09-23T16:19:44Z",
        "body": "Closing this as answered."
      },
      {
        "user": "danroth27",
        "created_at": "2019-09-23T22:58:22Z",
        "body": "~~Set the base URI where? On each page for whatever route? ~~\r\n\r\nNevermind! @javiercn and I chatted about it and adding `<base \"~/\" />` to the layout makes it all work great. Yay!"
      }
    ],
    "satisfaction_conditions": [
      "Ensures blazor.server.js and SignalR hub connections use correct absolute paths regardless of page route",
      "Provides site-wide configuration for path resolution rather than per-page fixes",
      "Explains the relationship between base path configuration and Blazor resource loading",
      "Maintains compatibility with MVC routing patterns",
      "Addresses both script loading and SignalR connection path issues"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:45"
    }
  },
  {
    "number": 14144,
    "title": "Blazor String Parameters in event handlers in the new Preview 9, rc.",
    "created_at": "2019-09-19T12:07:15Z",
    "closed_at": "2019-09-19T16:41:37Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/14144",
    "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nHi I just updated from AspNetCore 3.0 Preview 7 to AspNetCore 3.0 RC1 and there the event handler syntax changed significantly.\r\n\r\nThe old version was this:\r\nonclick=@(async ()=> SetPagerSize(\"forward\"))\r\n\r\nI havent found something yet, but is there a way to pass strings as parameters.\r\n\r\nThere passing string parameters was possible \r\n\r\nHow can I pass strings to functions in RC1?\r\n\r\n<button class=\"btn pagebutton btn-secondary\" @onclick=\"(async ()=> NavigateToPage(\"next\"))\">Next</button>\r\n\r\n\r\nsince the content of @onclick= needs to be inside \"\", the string \"next\" will end this string. Is there already a syntax to fix this? When I use '' like in javascript \r\n\r\n### Describe the solution you'd like\r\nNot shure what would be the best soltion, now I extract all my strings to constants. In javascript you can always use '' inside the \"\", but that would violate the C# syntax.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/14144/comments",
    "author": "MichaelPeter",
    "comments": [
      {
        "user": "MV10",
        "created_at": "2019-09-19T13:54:28Z",
        "body": "Enclose it with apostrophes:\r\n\r\n`@onclick='(async () => await Foo(\"bar\"))'`"
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-09-19T16:41:35Z",
        "body": "Thanks for contacting us, @MichaelPeter .\r\nThe parser is smart enough to still parse `\"`, even when it seems it's wrapped twice:\r\n```razor \r\n@OnClick=\"@(async ()=> NavigateToPage(\"next\"))\"\r\n```\n\n---\n\nIf this is not working for you, please let us know and we'll look into this further."
      },
      {
        "user": "MichaelPeter",
        "created_at": "2019-09-19T16:53:49Z",
        "body": "Thanks that solved my problem :) "
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates proper syntax for passing string parameters in Blazor event handlers without quote conflicts",
      "Maintains compatibility with Blazor RC1's event handler requirements",
      "Avoids requiring workarounds like external constants for string values",
      "Resolves quote nesting conflicts between HTML attributes and C# strings"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:52"
    }
  },
  {
    "number": 13713,
    "title": "Question: How to update EditContext.FieldClass from preview8 to preview9?",
    "created_at": "2019-09-05T13:07:33Z",
    "closed_at": "2019-09-05T16:35:23Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13713",
    "body": "How can we update `EditContext?.FieldClass(FieldIdentifier)` from preview8 to preview9? Is `EditContext?.FieldCssClass(FieldIdentifier)` the equivalent?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13713/comments",
    "author": "SeppPenner",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-09-05T16:35:19Z",
        "body": "Thanks for contacting us, @SeppPenner .\r\nYes, this was renamed to `FieldCssClass`."
      },
      {
        "user": "SeppPenner",
        "created_at": "2019-09-06T07:51:51Z",
        "body": "Ok, thanks for the fast reply :)"
      }
    ],
    "satisfaction_conditions": [
      "Confirmation of the renamed method equivalent to `FieldClass` in the new version",
      "Clarity about API changes between preview8 and preview9 versions"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:07:57"
    }
  },
  {
    "number": 13195,
    "title": " JsonSerializerOptions has no setter",
    "created_at": "2019-08-16T18:54:22Z",
    "closed_at": "2019-08-20T03:08:59Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13195",
    "body": "When I want to set new options with `AddJsonOptions` the `JsonSerializerOptions` is read-only.\r\n```C#\r\npublic static void ConfigureServices(this IServiceCollection services)\r\n{\r\n    services.AddControllers().AddJsonOptions(options =>\r\n    {\r\n        options.JsonSerializerOptions = new JsonSerializerOptions(); // compile error\r\n    });\r\n}\r\n```\r\nSo here I think `AddJsonOptions` is useless and I have to use `Configure` method:\r\n```C#\r\nservices.Configure<JsonSerializerOptions>(options =>\r\n{\r\n    options.IgnoreNullValues = true;\r\n\r\n});\r\n```\r\n\r\n```\r\nASP.NET Core Version: 3.0 Preview 8 \r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13195/comments",
    "author": "xsoheilalizadeh",
    "comments": [
      {
        "user": "pranavkm",
        "created_at": "2019-08-16T22:39:01Z",
        "body": "@xsoheilalizadeh you should be able to assign properties to the `JsonSerializerOptions` instance that's passed in to the callback:\r\n\r\n```C#\r\n services.AddControllers().AddJsonOptions(options =>\r\n{\r\n    options.JsonSerializerOptions.IgnoreNullValues = true;\r\n});\r\n```"
      },
      {
        "user": "xsoheilalizadeh",
        "created_at": "2019-08-17T05:19:33Z",
        "body": "It works now thanks. I think it could be like below code by replacing JsonSerializerOptions with JsonOptions, it's shorter and easier to understand.\r\n```c#\r\nservices.AddControllers().AddJsonOptions(options =>\r\n{\r\n    options.IgnoreNullValues = true;\r\n});\r\n```"
      },
      {
        "user": "pranavkm",
        "created_at": "2019-08-20T03:08:59Z",
        "body": "Thanks for the suggestion, but we currently do not have any plans on changing how the options work. Closing this since the original question has been resolved."
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates how to modify JsonSerializerOptions properties through AddJsonOptions without replacing the entire instance",
      "Shows configuration that works with ASP.NET Core 3.0's AddJsonOptions pattern",
      "Provides a clear way to configure JSON serialization settings for controllers",
      "Avoids requiring complete replacement of JsonSerializerOptions instance"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:02"
    }
  },
  {
    "number": 13167,
    "title": "Blazor app on custom route",
    "created_at": "2019-08-15T14:23:25Z",
    "closed_at": "2019-08-15T16:43:33Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13167",
    "body": "I am not sure whether this is a bug or my lack of understanding.\r\n\r\nWhat I want to find out is whether it is possible to host a server-side blazor app on a custom route as I want to mix a Blazor app with a normal Razor pages app. So I want Razor pages with their normal routes, and then I want my Blazor app, for example, on the route `/spa`.\r\n\r\nI tried setting the route for the `_Hosts.cshtml` page to `/spa` but that does not affect anything.\r\n\r\nIs there any sample anywhere that shows how to achieve this sort of behaviour?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13167/comments",
    "author": "jerriep",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-08-15T16:43:29Z",
        "body": "Thanks for contacting us, @jerriep.\r\nYou can achieve what you want by passing the path (`/spa/{**path:nonfile}`) to the `MapFallbackToPage` call."
      },
      {
        "user": "jerriep",
        "created_at": "2019-08-16T01:12:23Z",
        "body": "Thank you @mkArtakMSFT, that works.\r\n\r\nThe only problem with that is that it requires the Blazor page components to also have a URL that includes `/spa/*`. For example, in the default Blazor template, I need to change the URL of the counter page from `/counter` to `/spa/counter`\r\n\r\nIs there any way yo specify the URL of the Blazor pages to be relative to the root `/spa` path?"
      }
    ],
    "satisfaction_conditions": [
      "Blazor app components must be accessible under a root path prefix (e.g. /spa) without requiring manual URL adjustments for each component",
      "Solution must preserve coexistence between Blazor app and Razor Pages app routing without conflicts",
      "Routing configuration should automatically inherit the base path prefix for all Blazor components",
      "Implementation must avoid hardcoding the base path in component-level route attributes"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:08"
    }
  },
  {
    "number": 13151,
    "title": "AddAttribute onclick no longer accepts lambda expressions",
    "created_at": "2019-08-15T00:31:27Z",
    "closed_at": "2019-08-15T02:39:03Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/13151",
    "body": "I've been working on a project without updating for a while, but it seems like no one else can contribute with my current setup so I decided to try setting it up with the latest version of Blazor. It's almost working, but I make extensive use of \r\n\r\n`builder.AddAttribute()`\r\n\r\nespecially with buttons. It seems that now the AddAttribute function no longer accepts actions, and when I try to do something like \r\n\r\n`builder.AddAttribute(2, \"onclick\", () => ToggleNavMenu());`\r\n\r\nI get a an error:\r\n\r\n>Error\tCS1660\tCannot convert lambda expression to type bool because it is not a delegate type\t\r\n\r\nIt seems like there is a different way to do it now, but in my searching I couldn't find any examples. \r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/13151/comments",
    "author": "billybillyjim",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2019-08-15T01:21:50Z",
        "body": "This is intentional. \r\n\r\nCan you give us a little more information about what you're trying to do?"
      },
      {
        "user": "billybillyjim",
        "created_at": "2019-08-15T01:58:30Z",
        "body": "This was just the method I used for implementing all the buttons in my app. So for example button I am currently using in preview5 looks like this:\r\n\r\n```\r\n            builder.OpenElement(7, \"button\");\r\n            builder.AddAttribute(8, \"class\", \"btn btn-primary\");\r\n            builder.AddAttribute(9, \"style\", \"margin:2px;height:2rem;line-height: initial;\");\r\n            builder.AddAttribute(10, \"onclick\", () => Deposit(item, 1));\r\n            builder.AddContent(11, \"1\");\r\n            builder.CloseElement();\r\n```\r\n\r\nI am looking for some way to still be able to call `Depost(item.Key, 1)`  on a button click with a RenderTreeBuilder. "
      },
      {
        "user": "rynowak",
        "created_at": "2019-08-15T02:01:45Z",
        "body": "Sure, so you can still do that, it just requires a little more code.\r\n\r\n```\r\nbuilder.AddAttribute(10, \"onclick\", new Action(() => Deposit(item, 1)));\r\n```\r\n\r\nWe took away some overloads of these methods because we don't think they are getting much usage. No functionality was removed."
      },
      {
        "user": "billybillyjim",
        "created_at": "2019-08-15T02:39:03Z",
        "body": "Ah, that's exactly what I was looking for. Thank you!"
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates how to assign event handlers that execute parameterized methods in Blazor's RenderTreeBuilder",
      "Shows compatibility with Blazor's updated API for attribute assignment",
      "Provides a way to wrap lambda expressions in explicit delegate types",
      "Maintains the ability to invoke custom logic on UI events"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:16"
    }
  },
  {
    "number": 12167,
    "title": "What is the CheckAccess pattern in Blazor ?",
    "created_at": "2019-07-14T17:46:29Z",
    "closed_at": "2019-07-14T23:06:57Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/12167",
    "body": "Could you please describe this concept !\r\n\r\nThanks...",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/12167/comments",
    "author": "enetstudio",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2019-07-14T21:46:40Z",
        "body": "Similar to other UI frameworks, Blazor requires you to be in the correct threading context to access UI and mutable state related to the UI.\r\n\r\nIf you have some work that triggers on a background thread, you'd normally use `InvokeAsync()` on `ComponentBase` to dispatch it to the correct context. \r\n\r\nIf you need to start some work as a result of a Blazor lifecycle method, you are already in the correct context. If you need to start some work as a result of an event handler, you are already in the correct context.\r\n\r\nIf you're in client-side Blazor, there's one thread so you don't really have to think about this.\r\n\r\n*The CheckAccess() pattern* - refers to writing code like the following:\r\n\r\n```C#\r\nif (Dispatcher.CheckAccess())\r\n{\r\n    // You already have access, do what you want\r\n}\r\nelse\r\n{\r\n    // You don't have access, enqueue your work\r\n    Dispatcher.InvokeAsync(() =>\r\n    {\r\n         // Write your code here\r\n    });\r\n}\r\n```\r\n\r\nThis is an advanced optimization for the cases where you are starting work, and you *might not* be in the correct context. This probably isn't necessary for most developers on Blazor to ever think about."
      },
      {
        "user": "enetstudio",
        "created_at": "2019-07-14T23:06:47Z",
        "body": "Thanks so much for this, @rynowak!"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of the CheckAccess pattern's purpose in Blazor threading context management",
      "Clarification of when thread context synchronization is required in Blazor",
      "Identification of scenarios where CheckAccess pattern would be applicable",
      "Differentiation between common use cases and advanced optimization scenarios"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:24"
    }
  },
  {
    "number": 10980,
    "title": "[SignalR] Access HubContext in Ctor of strongly typed Hub",
    "created_at": "2019-06-07T07:27:31Z",
    "closed_at": "2019-06-11T10:18:41Z",
    "labels": [
      "question",
      "area-signalr"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10980",
    "body": "Is it/should it be possible to access the `HubContext `in the constructor of a strongly typed hub?\r\nI\u00b4m trying to initialize some members of my hub in the ctor with values from `context.items` but the context is null at that time. Is this intended by design?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10980/comments",
    "author": "ddweber",
    "comments": [
      {
        "user": "analogrelay",
        "created_at": "2019-06-07T21:51:56Z",
        "body": "Can you post sample code that reproduces the issue? The `Context` property *should* be accessible in `OnConnectedAsync`, but it **would** be null in the constructor."
      },
      {
        "user": "ddweber",
        "created_at": "2019-06-11T10:18:41Z",
        "body": "> The Context property should be accessible in OnConnectedAsync, but it would be null in the constructor.\r\n\r\nOkay, thats the case in my application and all I wanted to clarify :)\r\nThanks for the answer."
      }
    ],
    "satisfaction_conditions": [
      "Confirmation that HubContext being null in the constructor is intentional design behavior",
      "Identification of the appropriate lifecycle method (OnConnectedAsync) for accessing HubContext"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:30"
    }
  },
  {
    "number": 10796,
    "title": "Blazor: Calling Javasscript Interop on Program.cs ",
    "created_at": "2019-06-03T20:16:26Z",
    "closed_at": "2019-06-04T10:13:14Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10796",
    "body": "Hello,\r\n\r\nI need to make a Javascript Interop call on the Program.cs. Please, check my code below:\r\n\r\n    public class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            var host = CreateHostBuilder(args).Build();\r\n            using (var scope = host.Services.CreateScope())\r\n            {\r\n                var js = scope.ServiceProvider.GetRequiredService<IJSRuntime>();\r\n                var lang = js.InvokeAsync<string>(\"myJsFunctions.browserLanguage\").Result;\r\n                CultureInfo.DefaultThreadCurrentCulture = new CultureInfo(lang);                \r\n            }\r\n            host.Run();\r\n        }\r\n\r\n        public static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) =>\r\n            BlazorWebAssemblyHost.CreateDefaultBuilder()\r\n                .UseBlazorStartup<Startup>();\r\n    }\r\n\r\nI've tried all the possible ways to make that async call, but in all the cases the application is not started on the browser, and it freezes on the loading... page.\r\n\r\nAm I doing something wrong? As you can see, I need to catch the browser language before the application is loaded.\r\n\r\nThanks!\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10796/comments",
    "author": "rodrigosendin",
    "comments": [
      {
        "user": "3x0dv5",
        "created_at": "2019-06-04T10:02:52Z",
        "body": "Wouldn't it be better on the init of your main page?"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-06-04T10:18:56Z",
        "body": "There's no guarantee that JS interop will be ready before the Blazor application is started up. You will need to move JS interop calls into a later place. For example, in your `Startup` class:\r\n\r\n```cs\r\npublic void Configure(IComponentsApplicationBuilder app, IJSRuntime jSRuntime)\r\n{\r\n    app.AddComponent<App>(\"app\");\r\n\r\n    _ = jSRuntime.InvokeAsync<object>(\"alert\", \"Hello, world!\");\r\n}\r\n```\n\n---\n\n> As you can see, I need to catch the browser language before the application is loaded.\r\n\r\nIf you could clarify why you think you have to do it in `Program.cs` and not in a regular component (or in `Startup.cs` if you really want), that would help us to provide better advice.\n\n---\n\nI'm guessing it's because you want to know the language synchronously. If my guess is correct, you can do it like this in `Startup.cs`:\r\n\r\n```cs\r\npublic void Configure(IComponentsApplicationBuilder app, IJSRuntime jSRuntime)\r\n{\r\n    var language = ((IJSInProcessRuntime)jSRuntime).Invoke<string>(\"getBrowserLanguage\");\r\n    Console.WriteLine(\"Your language is: \" + language);\r\n\r\n    app.AddComponent<App>(\"app\");\r\n}\r\n```\r\n\r\n... and the following JS code in `index.html`:\r\n\r\n```html\r\n<script>\r\n    function getBrowserLanguage() {\r\n        return navigator.language;\r\n    }\r\n</script>\r\n```\r\n\r\nAlternatively you could issue a similar interop call from any of your components."
      },
      {
        "user": "rodrigosendin",
        "created_at": "2019-06-04T12:27:59Z",
        "body": "Thanks a lot! That works great, and I've learned two new things:\r\n1. I can inject services on the Startup.Configure Method\r\n2. I can make synchonous JSInterop calls\r\n\r\nSorry if this is not the correct channel for this kind of question. All the answers I found on the web lead me to solve this on the Program.cs, with an async call.\r\n\r\nThank you for your help!"
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates how to retrieve browser language before application components initialize",
      "Shows proper lifecycle stage for JS Interop initialization",
      "Provides synchronous execution pattern for JS Interop when required",
      "Explains service injection patterns in Blazor startup sequence",
      "Clarifies JS Interop readiness constraints in Blazor lifecycle"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:38"
    }
  },
  {
    "number": 10548,
    "title": "Integrate javascript library in Razor ServerSide ends in endless requests to server",
    "created_at": "2019-05-26T20:05:08Z",
    "closed_at": "2019-05-31T17:26:25Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10548",
    "body": "I would like to integrate fullcalendar.io into an application written using Blazor ServerSide components.\r\nThe code looks like this:\r\n\r\n```js\r\nwindow.ShowCalendar = (message) => {\r\n        var calendarEl = document.getElementById('calendar');\r\n\r\n        var calendar = new FullCalendar.Calendar(calendarEl, {\r\n          aspectRatio: 1.5,\r\n          header: {\r\n            left: 'prev,next',\r\n            center: 'title',\r\n            right: 'resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth'\r\n          },\r\n          plugins: [ 'dayGrid', 'resourceTimeline' ],\r\n          defaultView: 'resourceTimelineDay',\r\n          resources: '/api/resources',\r\n          events: '/api/events'\r\n        });\r\n        calendar.render();\r\n      };\r\n```\r\n\r\n```razor\r\n@functions {\r\n    protected override async Task OnAfterRenderAsync()\r\n    {\r\n        await this.JsRuntime.InvokeAsync<string>(\"ShowCalendar\", \"\");\r\n\r\n        StateHasChanged();\r\n    }\r\n}\r\n```\r\n\r\nThe problem is that the api calls are continuously raised.\r\nWhat's the problem?\r\n\r\nI also tried to change it using JSInterop, but without success. Something like this:\r\n\r\n```js\r\nvar calendar = new FullCalendar.Calendar(calendarEl, {\r\n          aspectRatio: 1.5,\r\n          header: {\r\n            left: 'prev,next',\r\n            center: 'title',\r\n            right: 'resourceTimelineDay,resourceTimelineWeek,resourceTimelineMonth'\r\n          },\r\n          plugins: [ 'dayGrid', 'resourceTimeline' ],\r\n          defaultView: 'resourceTimelineDay',\r\n          resources: DotNet.invokeMethodAsync(\"WebApplication.Views\", \"GetResourcesAsync\"),\r\n          events: DotNet.invokeMethodAsync(\"WebApplication.Views\", \"GetEventsAsync\")\r\n        });\r\n```\r\n\r\n```razor\r\n[JSInvokable]\r\n  public static async Task<CalendarEvent[]> GetEventsAsync()\r\n  {\r\n      return ...\r\n  }\r\n\r\n  [JSInvokable]\r\n  public static async Task<CalendarResource[]> GetResourcesAsync()\r\n  {\r\n      return ...\r\n  }\r\n```",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10548/comments",
    "author": "fleed",
    "comments": [
      {
        "user": "kennywangjin",
        "created_at": "2019-05-27T08:15:09Z",
        "body": "I think you should stop calling `StateHasChanged` in OnAfterRenderAsync! Otherwise You would get infinite rendering: rendering=>OnAfterRenderAsync=>StateHasChanged=>again rendering."
      },
      {
        "user": "fleed",
        "created_at": "2019-05-31T18:09:50Z",
        "body": "Thank you @kennywangjin , that fixed it."
      }
    ],
    "satisfaction_conditions": [
      "Prevent infinite rendering loops in Blazor ServerSide components",
      "Proper handling of Blazor component lifecycle methods",
      "Avoid unnecessary state updates after rendering",
      "Understanding of Blazor's JSInterop execution context"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:47"
    }
  },
  {
    "number": 10404,
    "title": "[Question] How to add Custom JsonConverter to Blazor Client application",
    "created_at": "2019-05-20T20:00:02Z",
    "closed_at": "2019-05-22T15:26:12Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10404",
    "body": "I have created my own custom JsonConverter for custom data structure ... But I can use it only with JsonConvert.DeserializeObject directly\r\nIt would be nice somehow to register in Blazor Client Application Custom JsonConverter\r\nBut using services.AddMvc() it is not possible because is not found anywhere in assembly as extension method\r\n\r\nHow to add custom JsonConverter ?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10404/comments",
    "author": "redradist",
    "comments": [
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-05-22T15:26:11Z",
        "body": "It depends what you're trying to do. In what way do you want the framework to make use of your converter?\r\n\r\nIs it when you call HTTP methods like `Http.GetJsonAsync`? If so, that's never going to use Json.NET converters since it doesn't use Json.NET internally. It uses SimpleJSON (which is something we're in process of changing currently - we're moving to the new System.Text.Json library everywhere).\r\n\r\nIf you want to use Json.NET to deserialize HTTP responses, consider replacing calls to `Http.GetJsonAsync` with `Http.GetStringAsync` and passing the string to your chosen deserializer."
      },
      {
        "user": "redradist",
        "created_at": "2019-05-26T12:58:59Z",
        "body": "Okay, thanks !!\r\n\r\nSeems like Http.GetStringAsync is exactly what I want ...\r\nBut I'm curious why you have not added customization point for JsonConverter ?\r\nAlso it is not obvious why you have different Json converter on Server side and Front-End side. On server side it is possible to add option to NewtonsoftJson:\r\n\r\n`services.AddMvc().AddNewtonsoftJson(...);`\r\n\r\nBut on Front-End side it is not possible ( It would be nice to have possibility to add same service on Front-End as on Back-End side ..."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to configure JSON serialization in Blazor Client applications at a framework level",
      "Method to integrate custom JsonConverter with Blazor's HTTP handling without manual deserialization",
      "Clarification on JSON handling differences between Blazor Server and Client",
      "Solution that maintains parity between server and client JSON configuration"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:08:55"
    }
  },
  {
    "number": 10254,
    "title": "Anti forgery token of razor page forms within folders not available automatically. ",
    "created_at": "2019-05-15T07:22:48Z",
    "closed_at": "2019-05-20T17:25:57Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/10254",
    "body": "",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/10254/comments",
    "author": "solalem",
    "comments": [
      {
        "user": "solalem",
        "created_at": "2019-05-15T07:45:03Z",
        "body": "The default template of Razor Pages UI library creates a folder structure organized by Areas. After adding my Create.cshtml page into a feature folder and adding a form I was expecting the default anti-forgery token to be generated and sent to browsers automatically. Navigating to Feature/Create in a browser and submitting the form creates\r\n`The required antiforgery cookie \".AspNetCore.Antiforgery.MsYT7wU3Kzg\" is not present.`\r\n exception inside VS output window. The browser also shows no cookie with the specified name. I resolved my issue after manually adding `@Html.AntiForgeryToken()` inside my form. I think the default behavior of adding anti-forgery cookies should handle this case too. I can also see this is true for every pages inside child folders of Pages, folders inside Areas and any UI library folders. "
      },
      {
        "user": "pranavkm",
        "created_at": "2019-05-15T14:48:37Z",
        "body": "You might be missing a `_ViewImports.cshtml` in the Feature area that sets up the form tag helper: `@addTagHelper \"*, Microsoft.AspNetCore.Mvc.TagHelpers\"`. "
      },
      {
        "user": "solalem",
        "created_at": "2019-05-16T11:23:04Z",
        "body": "Yes that also did the trick, thank you. But I would expect the project template add that file in the first place. I think, sometimes, people may have the need to share form based pages in UI libraries as well."
      },
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-05-20T17:25:57Z",
        "body": "Thanks for contacting us. We believe that the question you've raised have been answered. If you still feel a need to continue the discussion, feel free to reopen it and add your comments."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why anti-forgery tokens aren't automatically generated in nested folder structures",
      "Solution ensuring automatic anti-forgery token generation across all organizational structures",
      "Clarification of required configuration for tag helpers in nested views",
      "Template improvement rationale for shared UI components"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:05"
    }
  },
  {
    "number": 8703,
    "title": "UriHelper NavigateTo new tab",
    "created_at": "2019-03-21T14:51:18Z",
    "closed_at": "2019-03-21T17:04:20Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/8703",
    "body": "Hello,\r\n\r\nis it somehow possible (in Blazor) to programatically open a url in new tab? \r\n\r\nBest regards,\r\nThomas",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/8703/comments",
    "author": "TFTomSun",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2019-03-21T16:37:51Z",
        "body": "Thanks for contacting us, @TFTomSun.\r\n@SteveSandersonMS is this something possible with pure Blazor, or should this be achieved with JSInterop for now?"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-03-21T17:04:20Z",
        "body": "You'll need to use JS interop for this."
      },
      {
        "user": "TFTomSun",
        "created_at": "2019-03-21T17:10:50Z",
        "body": "Just in case someone else come accross this post...\r\n\r\n```csharp\r\n        public async Task NavigateToUrlAsync(string url, bool openInNewTab)\r\n        {\r\n            if (openInNewTab)\r\n            {\r\n              await JSRuntime.Current.InvokeAsync<object>(\"open\",url,\"_blank\");\r\n            }\r\n            else\r\n            {\r\n                this.UriBuilder.NavigateTo(url);\r\n            }\r\n        }\r\n\r\n\r\n```"
      }
    ],
    "satisfaction_conditions": [
      "Provides a programmatic way to open URLs in new browser tabs within Blazor",
      "Works within Blazor's framework constraints",
      "Doesn't require user-initiated click events"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:12"
    }
  },
  {
    "number": 8672,
    "title": "Razor Components project - Controllers in same project or separate project?",
    "created_at": "2019-03-20T08:23:57Z",
    "closed_at": "2019-03-20T15:34:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/8672",
    "body": "With a Razor Components project that will need to make use of a SQL Server database, and perform typical CRUD, is it best to:\r\n\r\n**Option A:**\r\nCreate Web API controllers inside of the existing Razor Components project, and set it up to serve Web API requests too? So this way you would have your Razor Components project, and your Web API all as one project.\r\n\r\n**Option B:**\r\nLeave the Razor Components project to behave like a client only, and create a separate Web API project to house any Web API endpoints?\r\n\r\nOr is there another option other than the above which I haven't considered?",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/8672/comments",
    "author": "LaurenceFrost",
    "comments": [
      {
        "user": "rynowak",
        "created_at": "2019-03-20T15:03:48Z",
        "body": "**Option C:**\r\n\r\nIf you're writing a server-side components application you don't need to communicate with your own code through an HTTP API - you're already running on the server.\r\n\r\n"
      },
      {
        "user": "LaurenceFrost",
        "created_at": "2019-03-20T15:25:14Z",
        "body": "> **Option C:**\r\n> \r\n> If you're writing a server-side components application you don't need to communicate with your own code through an HTTP API - you're already running on the server.\r\n\r\nIf I go this route, would this then make life difficult to transition the project over to client-size Blazor if that becomes stable?"
      },
      {
        "user": "rynowak",
        "created_at": "2019-03-20T15:31:56Z",
        "body": "I think that's up to you to judge. Personally, I think the work to make an app run on the client is a super-set (adding HTTP apis).\r\n\r\nOne option would be to build repository abstractions for all of your data access from components - then implement them in a really simple way for now (just a wrapper around your DB). Then when it's time to move to the client, change the implementation to use HTTP.\n\n---\n\nIf your goal is to eventually run on the client with Blazor, then I'd suggest using two projects for now. This will enforce a separation between the code that's going to stay on the server, and the code that's going to move to the client eventually. "
      }
    ],
    "satisfaction_conditions": [
      "Addresses the trade-offs between immediate development simplicity and future migration to client-side Blazor",
      "Considers separation of concerns between server-side logic and client-consumable interfaces",
      "Provides a strategy for abstracting data access to enable implementation switching",
      "Evaluates scalability of API/component co-location vs separation"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:18"
    }
  },
  {
    "number": 8465,
    "title": "[Razor Components] Programmatically redirect the user",
    "created_at": "2019-03-13T08:33:56Z",
    "closed_at": "2019-03-13T16:41:32Z",
    "labels": [
      "question",
      "area-mvc"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/8465",
    "body": "Hello,\r\n\r\nSo far I haven't found a way to programmatically redirect the user to another page.\r\nHere's what I'm currently doing, but it's hacky:\r\n\r\n```csharp\r\n        private readonly IJSRuntime _jsRuntime;\r\n\r\n        public async Task Redirect(string location)\r\n        {\r\n            if (await IsServerSideRendering())\r\n            {\r\n                _httpContextAccessor.HttpContext.Response.Headers.Add(\"Location\", location);\r\n                _httpContextAccessor.HttpContext.Response.StatusCode = 302;\r\n            }\r\n            else\r\n            {\r\n                await _jsRuntime.InvokeAsync<string>(\"goTo\", location);\r\n            }\r\n        }\r\n```\r\n\r\nAnd then I made a javascript function\r\n```javascript\r\nfunction goTo(location) {\r\n  window.location.href = location;\r\n}\r\n```\r\n\r\nThis works great during the server side rendering, but otherwise, it's not ideal because `window.location.href = location` triggers a full page refresh.\r\n\r\nThanks for your help!",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/8465/comments",
    "author": "devnixs",
    "comments": [
      {
        "user": "julienGrd",
        "created_at": "2019-03-13T11:21:11Z",
        "body": "Hi devnixs, you don't have to redirect through Js but use c# code and inject IUriHelper\r\n\r\n[Inject]\r\nprotected IUriHelper UriHelper { get; set; }\r\n\r\nUsage\r\nthis.UriHelper.NavigateTo(\"your relative page url\");"
      },
      {
        "user": "devnixs",
        "created_at": "2019-03-13T14:57:37Z",
        "body": "Thanks @julienGrd, I'm gonna try this."
      },
      {
        "user": "vertonghenb",
        "created_at": "2019-03-13T15:18:58Z",
        "body": "As an addition :\r\nif it's a MVC controller or page outside of the client router you can use \r\n```cs\r\nthis.UriHelper.NavigateTo(\"/your relative page url\", forceLoad:true);\r\n```\r\nThis would skip internal \"client side\" routing and go to the page. A use case for this would be file downloads from the server."
      },
      {
        "user": "devnixs",
        "created_at": "2019-03-14T10:03:34Z",
        "body": "Just checked and UriHelper.NavigateTo only navigates client-side. This means is does no redirection during the prerendering.\r\n\r\nSo I changed my code to be\r\n\r\n```csharp\r\n\r\n        public async Task Redirect(string location)\r\n        {\r\n            if (await IsServerSideRendering())\r\n            {\r\n                _httpContextAccessor.HttpContext.Response.Headers.Add(\"Location\", location);\r\n                _httpContextAccessor.HttpContext.Response.StatusCode = 302;\r\n            }\r\n            else\r\n            {\r\n                this.UriHelper.NavigateTo(location);\r\n            }\r\n        }\r\n```\r\n\r\nAnd this works great.\r\nClosing this ticket then."
      }
    ],
    "satisfaction_conditions": [
      "Supports server-side redirection during prerendering using proper HTTP status codes",
      "Provides client-side navigation without full page refresh",
      "Handles both server-side and client-side execution contexts appropriately",
      "Maintains SPA behavior for internal navigation"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:24"
    }
  },
  {
    "number": 8386,
    "title": "How to create a component of InputText to use in EditForm",
    "created_at": "2019-03-10T13:45:42Z",
    "closed_at": "2019-03-18T16:30:59Z",
    "labels": [
      "question",
      "area-blazor"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/8386",
    "body": "### Cenario\r\nI'm trying to make a component that uses InputText, but when I edit the textbox, it doesn't update the EditForm Model. This is how i'm trying to do this:\r\n\r\n#### RazorInputTest.razor\r\n    <div class=\"form-group\">\r\n        <label class=\"col-form-label\">@Label</label>\r\n        <InputText Class=\"form-control\" bind-Value=\"@Value\"></InputText>\r\n    </div>\r\n\r\n    @functions{\r\n        [Parameter] string Label { get; set; }\r\n        [Parameter] string Value { get; set; }\r\n        [Parameter] EventCallback<string> ValueChanged { get; set; }\r\n    }\r\n\r\n#### Index.razor\r\n    <span>Name of the category: @category.Name</span>\r\n    <EditForm Model=\"@category\">\r\n        <RazorInputTest bind-Value=\"@category.Name\"/>\r\n    </EditForm>\r\nWhen I edit the input, the span with the \"Name of the category\" doesn't update, but I don't know what I am doing wrong.\r\n\r\n### Objective\r\nI'm doing a set of bootstrap formated components and this is an important part of this project: preformated input-boxes. I want to create components that binds viewmodels, like InputText does inside the EditForm, but InputText inside a component, inside a EditForm inside another component.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/8386/comments",
    "author": "medeirosraul",
    "comments": [
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-03-13T19:20:47Z",
        "body": "It won\u2019t update because this code doesn\u2019t trigger ValueChanged anywhere. "
      },
      {
        "user": "rynowak",
        "created_at": "2019-03-13T20:25:19Z",
        "body": "Hi @medeirosraul - what Steve said is right, this won't send change notifications because in `Index.razor` you're attaching a binding to `RazorInputTest.Value`, but nothing is going to invoke `RazorInputTest.ValueChanged`. \r\n\r\nIt's really our intended pattern for you to subclass `InputText` if you want to replace its UI but unfortunately that doesn't work well in preview3 (#8192).\r\n\r\nIf you want a solution to wrap an `InputText`, you'll have to write a little more code.\r\n\r\n\r\n**RazorInputTest.razor**\r\n```\r\n<div class=\"form-group\">\r\n    <label class=\"col-form-label\">@Label</label>\r\n    <InputText Class=\"form-control\" Value=\"@Value\" ValueChanged=\"@ValueChanged\" ValueExpression=\"@ValueExpression\"></InputText>\r\n</div>\r\n\r\n@functions{\r\n    [Parameter] string Label { get; set; }\r\n    [Parameter] string Value { get; set; }\r\n    [Parameter] EventCallback<string> ValueChanged { get; set; }\r\n    [Parameter] Expression<Func<string>> ValueExpression { get; set; }\r\n}\r\n```\r\n\r\nIndex.razor won't have to change."
      },
      {
        "user": "medeirosraul",
        "created_at": "2019-03-16T15:18:33Z",
        "body": "This works, thank you.\r\nSo I think the \"bind\" attribute also sets \"ValueExpression\" when code generated."
      },
      {
        "user": "pjmagee",
        "created_at": "2019-03-16T23:11:58Z",
        "body": "@rynowak What about the input type of password, do we fall back to the standard html input?"
      },
      {
        "user": "SteveSandersonMS",
        "created_at": "2019-03-17T07:01:38Z",
        "body": "@pjmagee Consider inheriting from InputBase directly, e.g.:\r\n\r\n     @inherits InputBase<string>\r\n     <input type=\"password\" bind=\"@CurrentValue\" id=\"@Id\" class=\"@CssClass\" />"
      },
      {
        "user": "raphadesa",
        "created_at": "2019-09-03T06:39:42Z",
        "body": "Hello, the following worked for me:\r\nFile : CustomTextBox.razor\r\n\r\n<InputText @bind-Value=\"@Value\" class=\"form-control\" />\r\n\r\n@code {\r\n    public string _Value;\r\n    [Parameter]\r\n    public string Value\r\n    {\r\n        get\r\n        {\r\n            return _Value;\r\n        }\r\n        set\r\n        {            \r\n            if (_Value != value)\r\n            {                \r\n                ValueChanged.InvokeAsync(value);\r\n            }\r\n            _Value = value;\r\n        }\r\n    }\r\n    [Parameter]\r\n    public EventCallback<string> ValueChanged { get; set; }    \r\n}\r\n\r\n\r\nuse: <CustomTextbox @bind-Value=\"@user.Title\" />"
      }
    ],
    "satisfaction_conditions": [
      "Component must propagate value changes to parent EditForm model",
      "Custom component must properly implement two-way binding pattern",
      "Solution must work within Blazor's EditForm context",
      "Component should maintain InputText's native behavior when wrapped",
      "Implementation must support nested component hierarchies"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:32"
    }
  },
  {
    "number": 5839,
    "title": "Bug: doesn't check duplicated email while changing user's email address",
    "created_at": "2018-11-27T12:28:13Z",
    "closed_at": "2019-01-03T20:45:55Z",
    "labels": [
      "question",
      "area-identity"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/5839",
    "body": "When I call UserManager.SetEmailAsync(), it doesn't validate whether there's duplicated email address in database which could cause more than one users having the same email address.\r\n\r\nIf there're any duplicated email addresses in database, the UserManager.FindByEmailAsync() will not working properly -- it only return one result but not all matching results.\r\n\r\nTherefore, it's necessary to validate duplicated email address while creating user and changing user's email address.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/5839/comments",
    "author": "hez2010",
    "comments": [
      {
        "user": "blowdart",
        "created_at": "2018-11-29T20:11:31Z",
        "body": "Have you set the RequireUniqueEmail setting in UserOptions? This is off by default. We expect uniqueness on usernames, not emails."
      },
      {
        "user": "hez2010",
        "created_at": "2018-11-30T01:39:23Z",
        "body": "@blowdart \r\nThanks, this fix my problem. \r\nBut I think that the FindByEmailAsync should return an IEnumerable\\<TUser\\>, but not TUser. "
      },
      {
        "user": "blowdart",
        "created_at": "2019-01-03T20:45:55Z",
        "body": "That would be a rather large breaking change I'm afraid, so it's not one we're willing to make."
      },
      {
        "user": "jmatheti",
        "created_at": "2019-03-08T02:39:34Z",
        "body": "> But I think that the FindByEmailAsync should return an IEnumerable<TUser>, but not TUser.\r\n\r\nIf the above is a breaking change, can we atleast have a method in the usermanager to check duplicate email and duplicate username. Currently I have to use `userManager.FindByEmailAsync`  to see if the email already exists before generating the change email token.  This method selects a full user, which is unwanted select queries. \r\n\r\nIt make sense to reject the user request to change email address before generating the token rather sending email and when the user come through the link, `userManager.ChangeEmailAsync` is the one verifying the duplicate emails and its a long process.\r\n"
      }
    ],
    "satisfaction_conditions": [
      "Ensures email uniqueness validation occurs during both user creation and email change operations",
      "Maintains backward compatibility with existing UserManager APIs",
      "Provides an efficient way to check email uniqueness without full user retrieval",
      "Aligns with ASP.NET Identity's configuration patterns"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:42"
    }
  },
  {
    "number": 2782,
    "title": "Is there any way to read and rewrite the request body in a middleware?",
    "created_at": "2018-01-16T08:25:40Z",
    "closed_at": "2018-01-18T06:50:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/2782",
    "body": "If i do it like this,:\r\n```\r\nusing System;\r\nusing System.IO;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Http.Internal;\r\nusing Newtonsoft.Json;\r\n\r\nnamespace WebApplication5.Middleware\r\n{\r\n    public class CryptoMiddleware\r\n    {\r\n        private readonly RequestDelegate _next;\r\n\r\n        public CryptoMiddleware(RequestDelegate next)\r\n        {\r\n            _next = next;\r\n        }\r\n\r\n        public async Task Invoke(HttpContext context)\r\n        {\r\n            var req = context.Request;\r\n            var resp = context.Response;\r\n            var orignalResponseBody = resp.Body;\r\n\r\n            using (var responseStream = new MemoryStream())\r\n            {\r\n                try\r\n                {\r\n                    resp.Body = responseStream;\r\n\r\n                    req.EnableRewind();\r\n                    using (var reader = new StreamReader(req.Body))\r\n                    {\r\n                        var reqData = reader.ReadToEnd();\r\n                    }\r\n\r\n                    var reqPlainObj = new\r\n                    {\r\n                        data = \"plain text\"\r\n                    };\r\n                    var reqPlainString = JsonConvert.SerializeObject(reqPlainObj);\r\n\r\n                    using (var writer = new StreamWriter(req.Body))\r\n                    {\r\n                        writer.Write(reqPlainString);\r\n                    }\r\n\r\n                    await _next(context);\r\n\r\n                    using (var reader = new StreamReader(resp.Body))\r\n                    {\r\n                        var str = reader.ReadToEnd();\r\n                        Console.WriteLine($\"response plain:{str}\");\r\n                    }\r\n\r\n                    var respDataObj = new\r\n                    {\r\n                        data = \"response data\"\r\n                    };\r\n                    var respDataStr = JsonConvert.SerializeObject(respDataObj);\r\n                    \r\n                    using (var writer = new StreamWriter(orignalResponseBody))\r\n                    {\r\n                        writer.Write(respDataStr);\r\n                    }\r\n                }\r\n                finally\r\n                {\r\n                    resp.Body = orignalResponseBody;\r\n                }\r\n            }\r\n           \r\n        }\r\n    }\r\n}\r\n\r\n```\r\nthe paramater in my action is always null.",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/2782/comments",
    "author": "HongyanShen",
    "comments": [
      {
        "user": "Tratcher",
        "created_at": "2018-01-16T16:37:05Z",
        "body": "req.Body should never be written to. If you want to augment it you should replace the stream. Your biggest problem though is that you forgot to rewind the buffer. Add a Seek(0...) or Postion = 0 before calling next.\r\n\r\nYou may have similar problem with your response body. Also, don't augment the response body without clearing the Content-Length response header or updating the Content-Type."
      },
      {
        "user": "HongyanShen",
        "created_at": "2018-01-17T02:08:36Z",
        "body": "@Tratcher thanks a lot,you have saved me from a lot of troubles."
      },
      {
        "user": "hishamco",
        "created_at": "2018-01-17T10:26:01Z",
        "body": "I think this should be closed while it's answered"
      }
    ],
    "satisfaction_conditions": [
      "Proper handling of request stream position reset",
      "Correct management of response headers when modifying content",
      "Avoid direct modification of original request/response streams",
      "Ensure middleware preserves pipeline integrity"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:50"
    }
  },
  {
    "number": 2769,
    "title": "Complete example of the correct order of middleware",
    "created_at": "2018-01-11T12:19:41Z",
    "closed_at": "2018-01-12T17:06:40Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/2769",
    "body": "I can't find an example which shows what is the correct order for all the following middleware when used together. It would be nice if there would be a maintained startup.cs containing ALL possible middleware.\r\n\r\nUseStatusCodePagesWithRedirects\r\nUseStaticFiles\r\nUseAuthentication\r\nUseResponseCaching\r\nUseWebSockets\r\nUseSignalR\r\nUseResponseCompression\r\nUseMvc\r\n\r\nWould save a lot of time and errors having it. \r\nThanks!",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/2769/comments",
    "author": "guylando",
    "comments": [
      {
        "user": "Tratcher",
        "created_at": "2018-01-11T16:21:19Z",
        "body": "There is no definitive order, only some relative dependencies between individual components. E.g. StatusCodes should come before components that generate responses without bodies. StaticFiles are often early in the pipeline for efficiency, there can be a lot of them. Auth should come before components that require auth, like MVC. Caching should come before components that generate cacheable responses like MVC. WebSockets should come before components that use them like SignalR. Compression should come before components that generate compressable responses, and after caching if you want to cache the compressed version.\r\n\r\nMaybe what we need to explain is if a middleware handles requests as they arrive, or if it inserts itself to react to responses as they're generated. E.g. caching and compression attach to a request as it comes in and monitor the response to see if they need to react. StaticFiles by contract handles any requests it can immediately."
      },
      {
        "user": "guylando",
        "created_at": "2018-01-11T23:15:29Z",
        "body": "Thanks, Maybe a dependency tree\\graph can be built\\maintained in the documentation instead of one startup.cs because the possibilities are better described in a tree\\graph than in a linear code? Such tree\\graph would probably be very useful for many"
      },
      {
        "user": "Tratcher",
        "created_at": "2018-01-12T05:36:50Z",
        "body": "Even a table might help as a quick reference:\r\n\r\nMiddleware | Ordering\r\n---------------|----------\r\nUseStatusCodePagesWithRedirects | Before components that set status codes\r\nUseAuthentication | Before HttpContext.User is needed. Terminal for OAuth callbacks.\r\nUseResponseCaching | Before components that want caching\r\nUseWebSockets | Before components that want to use WebSockets\r\nUseResponseCompression | Before components that want to use compression\r\nUseStaticFiles | Terminal if a request matches files\r\nUseSignalR | Terminal for matching routes / hubs\r\nUseMvc | Terminal if a request matches routes / controllers & actions\r\n\r\nPossibly sorted by pass through vs terminal. That sorting alone would give you a sense of the ordering."
      },
      {
        "user": "guylando",
        "created_at": "2018-01-12T16:45:04Z",
        "body": "That's great! thanks"
      },
      {
        "user": "Tratcher",
        "created_at": "2018-01-12T17:06:39Z",
        "body": "This issue was moved to aspnet/Docs#5172"
      }
    ],
    "satisfaction_conditions": [
      "Clear explanation of middleware ordering dependencies",
      "Differentiation between pass-through and terminal middleware",
      "Framework-agnostic ordering principles",
      "Conflict resolution for overlapping functionalities",
      "Visual reference for component relationships"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:09:56"
    }
  },
  {
    "number": 1308,
    "title": "Is there a way to create a class library for .NET Core and the normal .NET",
    "created_at": "2016-02-17T09:46:31Z",
    "closed_at": "2016-02-23T17:54:21Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/1308",
    "body": "Hi everyone,\n\nI need a way to build a library that I can use in a WPF-Application and in a .NET Core Web-API. Is there any way to do this?\n\nPaule\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/1308/comments",
    "author": "paule96",
    "comments": [
      {
        "user": "Eilon",
        "created_at": "2016-02-21T19:45:47Z",
        "body": "Sure - create an xproj/project.json, target whichever framework(s) you want, and cross-compile to those frameworks. E.g. target `dnxcore50` and `net451`. In WPF you'd consume the `net451` build, and in .NET Core you'd use the `dnxcore50` target (note that this target is in the process of being changed, but if you use it right now you'll be well-prepared for the future).\n"
      }
    ],
    "satisfaction_conditions": [
      "Support for both .NET Framework (WPF) and .NET Core targets",
      "Cross-compilation capability for multiple frameworks",
      "Forward compatibility with future .NET Core targets",
      "Clear consumption guidance for different project types"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:10:02"
    }
  },
  {
    "number": 861,
    "title": "ErrorPageOptions in beta6",
    "created_at": "2015-08-24T21:47:28Z",
    "closed_at": "2015-08-28T14:37:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/861",
    "body": "After updating the ASP.Net5 WebApp project template to beta6 I have the following issue in Startup.cs:\n\n```\napp.UseErrorPage(ErrorPageOptions.ShowAll);\n```\n\nThis line throws _'ErrorPageOptions' does not contain a definition for 'ShowAll'._ Any idea, how this is handled in beta6?\n",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/861/comments",
    "author": "manfredk",
    "comments": [
      {
        "user": "manfredk",
        "created_at": "2015-08-24T21:57:34Z",
        "body": "ErrorPageOptions still live in Diagnostics, so I checked it in Object Viewer but couldn't find \"ShowAll\".\n\nAfter reading the intellisense description I solved the problem with:\n\n```\napp.Properties[\"host.AppMode\"] = \"development\";\napp.UseErrorPage();\n```\n\nThis worked and seems to be the way to show all errors in beta6.\n"
      },
      {
        "user": "Tratcher",
        "created_at": "2015-08-25T16:36:43Z",
        "body": "Correct, most of the configuration was removed from EPO. Note you don't need the `app.Properties[\"host.AppMode\"] = \"development\";` line either, that looks like legacy from Katana.  To conditionally include the middleware do something like this:\n\n``` c#\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            // Add the following to the request pipeline only in development environment.\n            if (env.IsDevelopment())\n            {\n                app.UseErrorPage();\n            }\n            else\n            {\n                // Add Error handling middleware which catches all application specific errors and\n                // sends the request to the following path or controller action.\n                app.UseErrorHandler(\"/Home/Error\");\n            }\n// ...\n```\n"
      },
      {
        "user": "henkmollema",
        "created_at": "2015-08-27T07:33:47Z",
        "body": "You used to be able to configure which parts of the error page you wanted to show with `ErrorPageOptions`. That has been removed since beta6 and we just show everything by default. The only thing can configure now is the amount of lines of source code before and after the line of code in the exception's stack frame. You can remove the `ErrorPageOptions.ShowAll` as stated above.\n"
      },
      {
        "user": "manfredk",
        "created_at": "2015-08-28T14:37:04Z",
        "body": "thx for the clarification, very helpful.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why ErrorPageOptions.ShowAll is no longer available in beta6",
      "Guidance on the new method to enable detailed error pages in beta6",
      "Clarification that detailed error pages are now shown by default in development environment",
      "Environment-based configuration pattern for error handling middleware"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:10:09"
    }
  },
  {
    "number": 19530,
    "title": "httpContext.Response.OnStarting lambdas executing in reverse order ",
    "created_at": "2020-03-03T17:05:17Z",
    "closed_at": "2020-03-04T04:12:17Z",
    "labels": [
      "help wanted",
      "Docs",
      "good first issue",
      "area-networking"
    ],
    "url": "https://github.com/dotnet/aspnetcore/issues/19530",
    "body": "I have a setup where the same cookie might get deleted, set or changed in the same request based on various business logic. As per Microsoft suggestion, I have these cookie updates wrapped up inside OnStarting. In doing so, I have noticed that the lamdas run in the REVERSE order of their registration.\r\n\r\nEg: \r\n```\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n                () =>\r\n                {\r\n                    Console.WriteLine(1);\r\n                    return Task.CompletedTask;\r\n                });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(2);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(3);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(4);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(5);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(6);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n            this.HttpContext.Response.OnStarting(\r\n               () =>\r\n               {\r\n                   Console.WriteLine(7);\r\n                   return Task.CompletedTask;\r\n               });\r\n\r\n```\r\n\r\nOutputs:\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n\r\nASP.NET Core version: 3.1",
    "comments_url": "https://api.github.com/repos/dotnet/aspnetcore/issues/19530/comments",
    "author": "mtamrakar",
    "comments": [
      {
        "user": "mkArtakMSFT",
        "created_at": "2020-03-03T17:17:06Z",
        "body": "@anurse I'm not sure `hosting` is the right area for this. Can you please adjust as necessary? Thanks!"
      },
      {
        "user": "Tratcher",
        "created_at": "2020-03-03T17:46:31Z",
        "body": "This is intentional to mirror the middleware pipeline ordering. E.g. The last thing to register is the inner most component in the pipeline and so it gets to look at the response first.\r\n\r\nShould update the doc comments to reflect this.\r\n\r\nThat said, what specific guidance did you get for using OnStarting? It's one of the harder APIs to use correctly, especially with complex interactions like this. You might do better to abstract the cookie handling to centralized logic and restrict to a single OnStarting event to apply the aggregate result."
      },
      {
        "user": "mtamrakar",
        "created_at": "2020-03-03T19:00:12Z",
        "body": "At one point, we were trying solve the \"response has started\" issue and since then wrapped a cookie manager on top of OnStarting. You can imagine how these type of updates could happen from different part of the code which needs to run in sequence.\r\n\r\n```\r\n public void DeleteCookie(string name)\r\n        {\r\n            var httpContext = this.httpContextAccessor.HttpContext;\r\n\r\n            if (httpContext.Request.Cookies.ContainsKey(name))\r\n            {\r\n                httpContext.Response.OnStarting(\r\n                    () =>\r\n                    {\r\n                        httpContext.Response.Cookies.Delete(\r\n                        name);\r\n\r\n                        return Task.CompletedTask;\r\n                    });\r\n            }\r\n```\r\n\r\nIs there any risk of having these updates like this?\r\n```\r\n public void DeleteCookie(string name)\r\n        {\r\n            var httpContext = this.httpContextAccessor.HttpContext;\r\n             httpContext.Response.Cookies.Delete(name);\r\n        }\r\n```"
      },
      {
        "user": "Tratcher",
        "created_at": "2020-03-03T20:40:24Z",
        "body": "Your second example is fine if you check HttpContext.Response.HasStarted first. No cookies can be modified after HasStarted, even with OnStarting."
      },
      {
        "user": "mtamrakar",
        "created_at": "2020-03-04T03:46:29Z",
        "body": "Ideally, when would we ever do the OnStarting registration then?"
      },
      {
        "user": "Tratcher",
        "created_at": "2020-03-04T03:57:22Z",
        "body": "OnStarting is useful for last second sanity checks, not much else."
      },
      {
        "user": "mtamrakar",
        "created_at": "2020-03-04T04:12:17Z",
        "body": "Thank you. I'm closing the issue as OnStarting is doing what it supposed to and I do see that a comment update is in progress to clarify it's execution order.\r\n\r\nI think we will just go with direct updates and handle out of sequence header updates more carefully."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why OnStarting callbacks execute in reverse registration order",
      "Guidance on managing cookie updates without dependency on callback execution order",
      "Clarification of safe patterns for cookie modification in ASP.NET Core",
      "Best practices for using OnStarting in complex scenarios"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:10:17"
    }
  }
]