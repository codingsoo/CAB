[
  {
    "number": 23902,
    "title": "Cannot obtain symbol for nameof(Method)",
    "created_at": "2017-12-21T13:43:34Z",
    "closed_at": "2018-01-08T18:24:52Z",
    "labels": [
      "Question",
      "Area-Compilers",
      "Resolution-Answered"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/23902",
    "body": "**Version Used**: VS 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n```csharp\r\nclass Foo\r\n{\r\n    void Method()\r\n    {\r\n        string methodName = nameof(Method);\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\nSemanticModel should return symbol for expression 'Method' inside nameof.\r\n\r\n**Actual Behavior**:\r\nSemanticModel returns null.\r\n\r\nI tested property, field and event inside nameof and they all return a symbol.\r\n\r\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/23902/comments",
    "author": "josefpihrt",
    "comments": [
      {
        "user": "CyrusNajmabadi",
        "created_at": "2017-12-27T19:14:37Z",
        "body": "It may be because this is a method group."
      },
      {
        "user": "agocke",
        "created_at": "2018-01-08T18:24:27Z",
        "body": "@JosefPihrt Cyrus is right -- this is because `Method` is a method group. The reason why it works this way is because method groups don't have their own symbol, they are instead a group of individual method symbols.\r\n\r\nConsider what would happen if you had overloads for your method, e.g.\r\n\r\n```csharp\r\nclass Foo\r\n{\r\n    void Method()\r\n    {\r\n        string methodName = nameof(Method);\r\n    }\r\n    void Method(string s) { }\r\n    void Method(int i) { }\r\n}\r\n```\r\n\r\nThere's no single method to choose from -- `Method` could refer to any of those methods. Rather than have different behavior when there are no overloads, the compiler provides the same behavior each time: GetSymbolInfo on a method group produces a SymbolInfo where the `Symbol` property returns `null`, but `CandidateSymbols` returns all the methods (overloads) in the method group.\r\n\r\nThe reason why fields, events, and properties behave differently is that there is no way to overload those members, so there is only ever a single symbol.\r\n\r\nThe preferred way of dealing with method groups would be to normally look at `Symbol`, but if `Symbol` is null and `CandidateReason` is `MemberGroup`, then you know that the target is a method group and all the method symbols you're interested in will be in `CandidateSymbols`.\r\n  "
      },
      {
        "user": "josefpihrt",
        "created_at": "2018-01-08T21:03:56Z",
        "body": "That makes sense, thanks for explanation @agocke."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why method groups return null in SemanticModel.GetSymbolInfo for nameof expressions",
      "Clarification on how to handle method group resolution in nameof expressions",
      "Differentiation between overloadable and non-overloadable members in nameof context"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:20:37"
    }
  },
  {
    "number": 4074,
    "title": "Not found:Diagnostic with Code Fix (NuGet + VSIX) template",
    "created_at": "2015-07-23T09:34:57Z",
    "closed_at": "2015-07-23T14:13:13Z",
    "labels": [
      "Question",
      "Area-Analyzers"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/4074",
    "body": "With visual studio 2015 RC, I had used \"Diagnostic with Code Fix (NuGet + VSIX) template\" to create live code analyser where I could generate a nugget package as well as VSIX file.\n\nThe template is not available after the release of VS 2015 RTM. I have explicitly installed Roslyn SDK but still the template is not there in my Visual Studio 2015 RTM\n\nWhere can I get the similar template for visual studio 2015\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/4074/comments",
    "author": "balubchand",
    "comments": [
      {
        "user": "bkoelman",
        "created_at": "2015-07-23T13:25:13Z",
        "body": "Maybe this helps? #4051\n"
      },
      {
        "user": "Pilchie",
        "created_at": "2015-07-23T14:01:35Z",
        "body": "We've updated the template to indicate that it is only applicable with a Target Framework of .NET 4.5.2 or higher.  Take a look at the Target Framework dropdown at the top of the New Project dialog.\n"
      },
      {
        "user": "balubchand",
        "created_at": "2015-07-23T14:13:13Z",
        "body": "Thanks the framework change option helped\n"
      }
    ],
    "satisfaction_conditions": [
      "Identifies how to access the original template functionality in VS 2015 RTM",
      "Explains configuration requirements for template availability",
      "Addresses template availability through environment configuration rather than template redistribution"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:23:53"
    }
  },
  {
    "number": 3213,
    "title": "Remove node fails in Visual Basic.",
    "created_at": "2015-06-01T12:36:24Z",
    "closed_at": "2015-06-02T06:26:25Z",
    "labels": [
      "Question",
      "Area-IDE",
      "Resolution-Answered",
      "Verification Not Required"
    ],
    "url": "https://github.com/dotnet/roslyn/issues/3213",
    "body": "Fails while generating preview. \n\n```\n<ExportCodeRefactoringProvider(LanguageNames.VisualBasic, Name:=NameOf(MoveClassToFileCodeRefactoringProvider)), [Shared]>\nFriend Class MoveClassToFileCodeRefactoringProvider\nInherits CodeRefactoringProvider\n\nPublic NotOverridable Overrides Async Function ComputeRefactoringsAsync(context As CodeRefactoringContext) As Task\n    ' TODO: Replace the following code with your own analysis, generating a CodeAction for each refactoring to offer\n\n    Dim root = Await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(False)\n\n    ' Find the node at the selection.\n    Dim node = root.FindNode(context.Span)\n\n    ' Only offer a refactoring if the selected node is a type statement node.\n    Dim typeDecl = TryCast(node, ClassStatementSyntax)\n    If typeDecl Is Nothing Then\n        Return\n    End If\n\n\n    Dim a2 = CodeAction.Create(\"Delete class\", Function(c) MoveClassToFile(context.Document, typeDecl, c))\n\n    ' Register this code action.\n    context.RegisterRefactoring(a2)\n\nEnd Function\n\nPrivate Async Function MoveClassToFile(document As Document, typeDecl As ClassStatementSyntax, cancellationToken As CancellationToken) As Task(Of Document)\n\n    Dim currentSyntaxTree = document.GetSyntaxTreeAsync().Result\n    Dim currentRoot = currentSyntaxTree.GetRootAsync().Result\n    Dim replacedRoot = currentRoot.RemoveNode(typeDecl, SyntaxRemoveOptions.KeepNoTrivia)\n\n    Dim ret = document.WithSyntaxRoot(replacedRoot)\n\n    Return ret\nEnd Function\n\n\nEnd Class\n```\n\nTested in c# by altering the Language to CSharp and the ClassStatementSyntax to ClassDeclarationSyntax, it's working fine :(\n",
    "comments_url": "https://api.github.com/repos/dotnet/roslyn/issues/3213/comments",
    "author": "petterek",
    "comments": [
      {
        "user": "mattwar",
        "created_at": "2015-06-02T01:12:33Z",
        "body": "VB is trickier to get right since there are both xxxStatementSyntax nodes and xxxBlockSyntax nodes. You cannot remove a xxxStatementSyntax node if it's part of a xxxBlockSyntax, you have to remove the xxxBlockSyntax node instead.\n\n\n---\n\nYou will need to remove the ClassBlockSyntax node that is the ClassStatementSyntax's parent.\n"
      },
      {
        "user": "petterek",
        "created_at": "2015-06-02T06:26:23Z",
        "body": "OK.. I will try it out\n\n\n---\n\nThat worked  :+1: Thank you very much\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of VB syntax tree structure differences compared to C# regarding statement/block nodes",
      "Guidance on identifying parent BlockSyntax nodes when working with VB statements",
      "Solution must address VB-specific syntax tree navigation requirements"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:25:09"
    }
  }
]