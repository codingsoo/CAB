{
  "number": 25698,
  "title": "Populating a materialized view results in unexpected values",
  "created_at": "2021-06-25T06:19:21Z",
  "closed_at": "2021-06-28T10:52:20Z",
  "labels": [
    "question",
    "question-answered"
  ],
  "url": "https://github.com/ClickHouse/ClickHouse/issues/25698",
  "body": "Please forgive me if i'm missing something fairly obvious here.\r\n\r\n**Describe the unexpected behaviour**\r\nPopulating a materialized view results in unexpected values.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use: 21.3.13.9\r\n\r\n```bash\r\ndocker run -d --name some-clickhouse-server --ulimit nofile=262144:262144 yandex/clickhouse-server:21.3.13.9\r\ndocker exec -it some-clickhouse-server clickhouse-client\r\n\r\n:) CREATE TABLE tmp_aggregated\r\n(\r\n  `window_start` DateTime64 Codec(DoubleDelta, LZ4),\r\n  `metrics_name` Array(LowCardinality(String)) Codec(LZ4),\r\n  `organization_id` LowCardinality(String) Codec(LZ4)\r\n)\r\nENGINE MergeTree()\r\nPARTITION BY (organization_id) ORDER BY (window_start)\r\n\r\n:) create materialized view tmp_names (\r\n  organization_id LowCardinality(String),\r\n  metric_names SimpleAggregateFunction(groupUniqArrayArray, Array(String)),\r\n  window_start_day DateTime64\r\n)\r\nEngine=MergeTree()\r\norder by (window_start_day)\r\npopulate as select\r\n  organization_id,\r\n  groupUniqArray(metrics_name),\r\n  toStartOfDay(window_start)\r\nfrom tmp_aggregated array join metrics_name\r\ngroup by toStartOfDay(window_start), organization_id\r\n\r\n:) insert into tmp_aggregated values ('2021-06-24 07:15:09.000', ['metric1'], 'org-id');\r\n\r\n:) select * from tmp_names \\G\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\norganization_id:  org-id\r\nmetric_names:     []\r\nwindow_start_day: 1970-01-01 00:00:00\r\n\r\n:) select * from tmp_aggregated \\G\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\nwindow_start:    2021-06-24 07:15:09.000\r\nmetrics_name:    ['metric1']\r\norganization_id: org-id\r\n\r\n```\r\n\r\n**Expected behavior**\r\n\r\nWhen executing `select * from tmp_names \\G` I expected values stored in tmp_names to be:\r\n\r\n```\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\norganization_id:  org-id\r\nmetric_names:      ['metric1']\r\nwindow_start_day: 2021-06-24 07:15:09.000\r\n```\r\n\r\n**Error message and/or stacktrace**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
  "comments_url": "https://api.github.com/repos/ClickHouse/ClickHouse/issues/25698/comments",
  "author": "shivamMg",
  "comments": [
    {
      "user": "SaltTan",
      "created_at": "2021-06-26T20:05:09Z",
      "body": "The names of the columns in the MV query and the destination table must match:\r\n\r\n as select\r\n  organization_id,\r\n  groupUniqArray(metrics_name) **as metric_names**,\r\n  toStartOfDay(window_start) **as window_start_day**\r\n\r\n"
    }
  ],
  "git_commit_info": {
    "sha": "045fd6f55db37059c97c0c276e8914b096e1f6bb",
    "date": "2017-02-07T22:40:08Z",
    "message": "fix build without readline",
    "author": "proller"
  },
  "repository_info": {},
  "llm_calls_before_build": 0,
  "dockerfile_attempt_1": 1,
  "dockerfile_attempt_1_failed": true,
  "dockerfile_build_success": true,
  "llm_calls_total": 22,
  "dockerfile": "FROM ubuntu:20.04\n\n# Avoid interactive prompts during package installation\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies for ClickHouse\nRUN apt-get update && apt-get install -y \\\n    apt-transport-https \\\n    ca-certificates \\\n    dirmngr \\\n    gnupg \\\n    wget \\\n    sudo \\\n    git \\\n    cmake \\\n    build-essential \\\n    gcc-9 \\\n    g++-9 \\\n    libicu-dev \\\n    libreadline-dev \\\n    libmysqlclient-dev \\\n    unixodbc-dev \\\n    libltdl-dev \\\n    libssl-dev \\\n    libgoogle-perftools-dev \\\n    libbz2-dev \\\n    libzstd-dev \\\n    libboost-dev \\\n    libboost-system-dev \\\n    libboost-filesystem-dev \\\n    libboost-thread-dev \\\n    libboost-program-options-dev \\\n    zlib1g-dev \\\n    liblz4-dev \\\n    libdouble-conversion-dev \\\n    libzookeeper-mt-dev \\\n    libsparsehash-dev \\\n    librdkafka-dev \\\n    libcapnp-dev \\\n    libpoco-dev \\\n    libunwind-dev \\\n    libxml2-dev \\\n    libpcre3-dev \\\n    ninja-build \\\n    curl \\\n    python3 \\\n    python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set gcc-9 as default compiler\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 \\\n    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 90 \\\n    && update-alternatives --set gcc /usr/bin/gcc-9 \\\n    && update-alternatives --set g++ /usr/bin/g++-9\n\n# Create build directory\nWORKDIR /build\n\n# Clone ClickHouse repository and checkout specific commit\nRUN git clone https://github.com/ClickHouse/ClickHouse.git \\\n    && cd ClickHouse \\\n    && git checkout 045fd6f55db37059c97c0c276e8914b096e1f6bb\n\n# Create build directory\nWORKDIR /build/ClickHouse/build\n\n# Configure cmake with necessary options for the build\nRUN cmake .. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DENABLE_TESTS=OFF \\\n    -DENABLE_EXAMPLES=OFF \\\n    -DENABLE_EMBEDDED_COMPILER=OFF \\\n    -DUSE_INTERNAL_POCO_LIBRARY=ON \\\n    -DUSE_INTERNAL_BOOST_LIBRARY=ON \\\n    -DUSE_INTERNAL_ZLIB_LIBRARY=ON \\\n    -DUSE_INTERNAL_SSL_LIBRARY=ON \\\n    -DUSE_INTERNAL_CAPNP_LIBRARY=ON \\\n    -DENABLE_JEMALLOC=0 \\\n    -DENABLE_RDKAFKA=0 \\\n    -DENABLE_ICU=0 \\\n    -DENABLE_MYSQL=0 \\\n    -DENABLE_POCO_MONGODB=0 \\\n    -DENABLE_POCO_NETSSL=0 \\\n    -DENABLE_POCO_ODBC=0 \\\n    -DENABLE_ODBC=0 \\\n    -DENABLE_CLICKHOUSE_ODBC_BRIDGE=0 \\\n    -DENABLE_HDFS=0 \\\n    -DUSE_INTERNAL_CITYHASH_LIBRARY=ON \\\n    -DCMAKE_CXX_FLAGS=\"-Wno-error\" \\\n    -DCMAKE_C_FLAGS=\"-Wno-error\" \\\n    -DENABLE_PROTOBUF=OFF \\\n    -DENABLE_PARQUET=OFF \\\n    -DENABLE_CASSANDRA=OFF \\\n    -DENABLE_POCO_DATA=OFF \\\n    -DENABLE_POCO_JSON=OFF \\\n    -DENABLE_POCO_UTIL=ON \\\n    -DENABLE_POCO_NET=ON \\\n    -DENABLE_POCO_FOUNDATION=ON \\\n    -DENABLE_POCO_XML=ON\n\n# Set higher memory limit for the build and disable ASAN leak detection\nENV ASAN_OPTIONS=detect_leaks=0:allocator_may_return_null=1\n\n# Build ClickHouse with retry mechanism to handle potential build failures\nRUN for i in 1 2 3; do \\\n        cmake --build . --config Release -- -j$(nproc) && break || \\\n        echo \"Build attempt $i failed, retrying with less parallelism...\" && \\\n        cmake --build . --config Release -- -j2 && break || \\\n        echo \"Build attempt $i failed, retrying with single thread...\" && \\\n        cmake --build . --config Release -- -j1 && break || \\\n        echo \"Build attempt $i failed, will retry...\" && \\\n        sleep 5; \\\n    done\n\n# Add the build directory to PATH\nENV PATH=\"/build/ClickHouse/build/programs:${PATH}\"\n\n# Create directories for ClickHouse data and configuration\nRUN mkdir -p /etc/clickhouse-server/config.d \\\n    && mkdir -p /etc/clickhouse-server/users.d \\\n    && mkdir -p /var/lib/clickhouse\n\n# Create test script to reproduce the issue\nRUN echo '#!/bin/bash\\n\\\n# Start ClickHouse server\\n\\\nclickhouse-server --config-file=/etc/clickhouse-server/config.xml &\\n\\\nSERVER_PID=$!\\n\\\necho \"Waiting for ClickHouse server to start...\"\\n\\\nsleep 10\\n\\\n\\n\\\n# Run test case\\n\\\necho \"Creating test tables...\"\\n\\\nclickhouse-client -q \"CREATE TABLE tmp_aggregated (\\n\\\n  \\`window_start\\` DateTime64 Codec(DoubleDelta, LZ4),\\n\\\n  \\`metrics_name\\` Array(LowCardinality(String)) Codec(LZ4),\\n\\\n  \\`organization_id\\` LowCardinality(String) Codec(LZ4)\\n\\\n) ENGINE MergeTree() PARTITION BY (organization_id) ORDER BY (window_start)\"\\n\\\n\\n\\\necho \"Creating materialized view...\"\\n\\\nclickhouse-client -q \"CREATE MATERIALIZED VIEW tmp_names (\\n\\\n  organization_id LowCardinality(String),\\n\\\n  metric_names SimpleAggregateFunction(groupUniqArrayArray, Array(String)),\\n\\\n  window_start_day DateTime64\\n\\\n) Engine=MergeTree() ORDER BY (window_start_day)\\n\\\nPOPULATE AS SELECT\\n\\\n  organization_id,\\n\\\n  groupUniqArray(metrics_name),\\n\\\n  toStartOfDay(window_start)\\n\\\nFROM tmp_aggregated ARRAY JOIN metrics_name\\n\\\nGROUP BY toStartOfDay(window_start), organization_id\"\\n\\\n\\n\\\necho \"Inserting test data...\"\\n\\\nclickhouse-client -q \"INSERT INTO tmp_aggregated VALUES (\\\"2021-06-24 07:15:09.000\\\", [\\\"metric1\\\"], \\\"org-id\\\")\"\\n\\\n\\n\\\necho \"Querying materialized view...\"\\n\\\nclickhouse-client -q \"SELECT * FROM tmp_names FORMAT Vertical\"\\n\\\n\\n\\\necho \"Querying source table...\"\\n\\\nclickhouse-client -q \"SELECT * FROM tmp_aggregated FORMAT Vertical\"\\n\\\n\\n\\\n# Kill the server\\n\\\nkill $SERVER_PID\\n\\\necho \"Test completed.\"\\n\\\n' > /test_issue_25698.sh && chmod +x /test_issue_25698.sh\n\n# Create a README file explaining the issue and how to test it\nRUN echo \"# ClickHouse Issue #25698: Populating a materialized view results in unexpected values\\n\\n\\\nThis Docker image is built to validate issue #25698 where populating a materialized view results in unexpected values.\\n\\n\\\n## Issue Description\\n\\\nWhen creating a materialized view with POPULATE using groupUniqArray on an array column, the resulting view\\n\\\ncontains incorrect values.\\n\\n\\\n## Testing\\n\\\nTo test the issue, run:\\n\\\n\\`\\`\\`\\n\\\n/test_issue_25698.sh\\n\\\n\\`\\`\\`\\n\\\nThis will create the test tables, insert data, and show the results.\\n\\n\\\n## Manual Testing\\n\\\nYou can also start the server manually and run your own tests:\\n\\\n\\`\\`\\`\\n\\\nclickhouse-server --config-file=/etc/clickhouse-server/config.xml &\\n\\\nclickhouse-client  # Connect to the server\\n\\\n\\`\\`\\`\\n\" > /README.md\n\n# Default command to show help\nCMD [\"cat\", \"/README.md\"]",
  "satisfaction_conditions": [
    "Materialized view must correctly preserve the data types from source to target"
  ]
}