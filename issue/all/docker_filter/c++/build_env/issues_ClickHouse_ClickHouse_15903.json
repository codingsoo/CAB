{
  "number": 15903,
  "title": "DB::Exception: Unknown data type family: DateTime64 while import from tsv, csv",
  "created_at": "2020-10-13T09:40:24Z",
  "closed_at": "2020-10-13T14:56:07Z",
  "labels": [
    "question",
    "comp-datetime",
    "question-answered"
  ],
  "url": "https://github.com/ClickHouse/ClickHouse/issues/15903",
  "body": "When I import data from external file (tsv, csv) I got error:\r\n\r\n**Code: 50. DB::Exception: Unknown data type family: DateTime64**\r\n\r\nServer version 20.9.2.\r\n\r\n```\r\n24b27b0d4af5 :) SELECT * FROM system.data_type_families WHERE name LIKE 'DateTime%';\r\n\r\nSELECT * FROM system.data_type_families WHERE name LIKE 'DateTime%'\r\n\r\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500case_insensitive\u2500\u252c\u2500alias_to\u2500\u2510\r\n\u2502 DateTime   \u2502                1 \u2502          \u2502\r\n\u2502 DateTime64 \u2502                1 \u2502          \u2502\r\n\u2502 DateTime32 \u2502                1 \u2502          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nDateTime64 is present.\r\n\r\nMy data:\r\n\r\n\r\n**database**\r\n```\r\nCREATE TABLE log_viewing  \r\n(\r\n  id UInt32,\r\n  ts DateTime64(6, 'Europe/Moscow'),\r\n  document_id UInt16,\r\n  user_id UInt16,\r\n  element_id_max UInt16,\r\n  element_id_max_child UInt16,\r\n  element_id_min UInt16,\r\n  element_id_min_child UInt16,\r\n  status UInt8,\r\n  tz_offset Int16,\r\n  ts_local DateTime64(6, 'Europe/Moscow'),\r\n  source UInt8,\r\n  duration UInt16\r\n) ENGINE Log;\r\n```\r\n\r\nFile **log_viewing-0.tsv**\r\n```\r\nid\tts\tdocument_id\tuser_id\telement_id_min\telement_id_min_child\telement_id_max\telement_id_max_child\tstatus\ttz_offset\tts_local\tsource\tduration\r\n1592845\t2019-07-23 12:31:31.997075\t4\t2\t1\t1\t10\t10\t2\t-180\t2019-07-23 12:31:31.997075\t1\t0\r\n1592846\t2019-07-23 12:31:33.997075\t4\t2\t1\t1\t3\t3\t2\t-180\t2019-07-23 12:31:33.997075\t1\t2000\r\n1592847\t2019-07-23 12:31:35.497075\t4\t2\t2\t2\t6\t6\t2\t-180\t2019-07-23 12:31:35.497075\t1\t1000\r\n1592848\t2019-07-23 12:31:36.497075\t4\t2\t1\t1\t4\t4\t2\t-180\t2019-07-23 12:31:36.497075\t1\t1000\r\n1592849\t2019-07-23 12:31:37.997075\t4\t2\t2\t2\t5\t5\t2\t-180\t2019-07-23 12:31:37.997075\t1\t2000\r\n1592850\t2019-07-23 12:31:39.497075\t4\t2\t1\t1\t4\t4\t2\t-180\t2019-07-23 12:31:39.497075\t1\t1000\r\n1592851\t2019-07-23 12:31:40.497075\t4\t2\t2\t2\t4\t4\t2\t-180\t2019-07-23 12:31:40.497075\t1\t1000\r\n1592852\t2019-07-23 12:31:40.997075\t4\t2\t1\t1\t3\t3\t2\t-180\t2019-07-23 12:31:40.997075\t1\t1000\r\n1592854\t2019-07-23 12:31:48.191737\t4\t2\t1\t1\t3\t3\t2\t-180\t2019-07-23 12:31:48.191737\t1\t7000\r\n```\r\n\r\nCommand for import:\r\n```\r\nclickhouse-client --query \"INSERT INTO spnav.log_viewing FORMAT TabSeparatedWithNames\" <log_viewing-0.tsv\r\n```",
  "comments_url": "https://api.github.com/repos/ClickHouse/ClickHouse/issues/15903/comments",
  "author": "borisovcode",
  "comments": [
    {
      "user": "den-crane",
      "created_at": "2020-10-13T12:57:45Z",
      "body": "Your clickhouse-client is outdated and does not support DateTime64.\r\nInstall clickhouse-client with version 20.9.2 \r\n\r\nIn case of \r\n`clickhouse-client --query \"INSERT INTO spnav.log_viewing FORMAT TabSeparatedWithNames\" <log_viewing-0.tsv`\r\nclickhouse-client reads a stream and does a stream parsing and sends parsed data in the Native format to a server.\r\n\r\n\r\n\r\n```\r\n$ clickhouse-client --query \"INSERT INTO spnav.log_viewing FORMAT TabSeparatedWithNames\" <log_viewing-0.tsv\r\n\r\n\r\nClickHouse client version 20.11.1.4897 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.11.1 revision 54441.\r\n\r\nselect count() from log_viewing\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502       9 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```"
    }
  ],
  "git_commit_info": {
    "sha": "045fd6f55db37059c97c0c276e8914b096e1f6bb",
    "date": "2017-02-07T22:40:08Z",
    "message": "fix build without readline",
    "author": "proller"
  },
  "repository_info": {},
  "llm_calls_before_build": 0,
  "dockerfile_attempt_1": 1,
  "dockerfile_attempt_1_failed": true,
  "dockerfile_build_success": true,
  "llm_calls_total": 5,
  "dockerfile": "FROM ubuntu:20.04\n\n# Avoid interactive prompts during package installation\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install dependencies for ClickHouse\nRUN apt-get update && apt-get install -y \\\n    apt-transport-https \\\n    ca-certificates \\\n    dirmngr \\\n    gnupg \\\n    wget \\\n    sudo \\\n    git \\\n    cmake \\\n    build-essential \\\n    gcc-9 \\\n    g++-9 \\\n    libicu-dev \\\n    libreadline-dev \\\n    libmysqlclient-dev \\\n    unixodbc-dev \\\n    libltdl-dev \\\n    libssl-dev \\\n    libgoogle-perftools-dev \\\n    libbz2-dev \\\n    libzstd-dev \\\n    libboost-dev \\\n    libboost-system-dev \\\n    libboost-filesystem-dev \\\n    libboost-thread-dev \\\n    libboost-program-options-dev \\\n    zlib1g-dev \\\n    liblz4-dev \\\n    libdouble-conversion-dev \\\n    libzookeeper-mt-dev \\\n    libsparsehash-dev \\\n    librdkafka-dev \\\n    libcapnp-dev \\\n    libpoco-dev \\\n    libunwind-dev \\\n    libxml2-dev \\\n    libpcre3-dev \\\n    ninja-build \\\n    curl \\\n    python3 \\\n    python3-pip \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set gcc-9 as default compiler\nRUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 \\\n    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 90 \\\n    && update-alternatives --set gcc /usr/bin/gcc-9 \\\n    && update-alternatives --set g++ /usr/bin/g++-9\n\n# Create build directory\nWORKDIR /build\n\n# Clone ClickHouse repository and checkout specific commit\nRUN git clone https://github.com/ClickHouse/ClickHouse.git \\\n    && cd ClickHouse \\\n    && git checkout 045fd6f55db37059c97c0c276e8914b096e1f6bb\n\n# Create build directory\nWORKDIR /build/ClickHouse/build\n\n# Configure cmake with necessary options for the build\nRUN cmake .. \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DENABLE_TESTS=OFF \\\n    -DENABLE_EXAMPLES=OFF \\\n    -DENABLE_EMBEDDED_COMPILER=OFF \\\n    -DUSE_INTERNAL_POCO_LIBRARY=ON \\\n    -DUSE_INTERNAL_BOOST_LIBRARY=ON \\\n    -DUSE_INTERNAL_ZLIB_LIBRARY=ON \\\n    -DUSE_INTERNAL_SSL_LIBRARY=ON \\\n    -DUSE_INTERNAL_CAPNP_LIBRARY=ON \\\n    -DENABLE_JEMALLOC=0 \\\n    -DENABLE_RDKAFKA=0 \\\n    -DENABLE_ICU=0 \\\n    -DENABLE_MYSQL=0 \\\n    -DENABLE_POCO_MONGODB=0 \\\n    -DENABLE_POCO_NETSSL=0 \\\n    -DENABLE_POCO_ODBC=0 \\\n    -DENABLE_ODBC=0 \\\n    -DENABLE_CLICKHOUSE_ODBC_BRIDGE=0 \\\n    -DENABLE_HDFS=0 \\\n    -DUSE_INTERNAL_CITYHASH_LIBRARY=ON \\\n    -DCMAKE_CXX_FLAGS=\"-Wno-error\" \\\n    -DCMAKE_C_FLAGS=\"-Wno-error\" \\\n    -DENABLE_PROTOBUF=OFF \\\n    -DENABLE_PARQUET=OFF \\\n    -DENABLE_CASSANDRA=OFF \\\n    -DENABLE_POCO_DATA=OFF \\\n    -DENABLE_POCO_JSON=OFF \\\n    -DENABLE_POCO_UTIL=ON \\\n    -DENABLE_POCO_NET=ON \\\n    -DENABLE_POCO_FOUNDATION=ON \\\n    -DENABLE_POCO_XML=ON\n\n# Set higher memory limit for the build and disable ASAN leak detection\nENV ASAN_OPTIONS=detect_leaks=0:allocator_may_return_null=1\n\n# Build ClickHouse with retry mechanism to handle potential build failures\nRUN for i in 1 2 3; do \\\n        cmake --build . --config Release -- -j$(nproc) && break || \\\n        echo \"Build attempt $i failed, retrying with less parallelism...\" && \\\n        cmake --build . --config Release -- -j2 && break || \\\n        echo \"Build attempt $i failed, retrying with single thread...\" && \\\n        cmake --build . --config Release -- -j1 && break || \\\n        echo \"Build attempt $i failed, will retry...\" && \\\n        sleep 5; \\\n    done\n\n# Create config directories for ClickHouse\nRUN mkdir -p /etc/clickhouse-server/config.d \\\n    && mkdir -p /etc/clickhouse-server/users.d\n\n# Create sample data file for testing the DateTime64 issue\nRUN mkdir -p /data && echo \"id\\tts\\tdocument_id\\tuser_id\\telement_id_min\\telement_id_min_child\\telement_id_max\\telement_id_max_child\\tstatus\\ttz_offset\\tts_local\\tsource\\tduration\\n\\\n1592845\\t2019-07-23 12:31:31.997075\\t4\\t2\\t1\\t1\\t10\\t10\\t2\\t-180\\t2019-07-23 12:31:31.997075\\t1\\t0\\n\\\n1592846\\t2019-07-23 12:31:33.997075\\t4\\t2\\t1\\t1\\t3\\t3\\t2\\t-180\\t2019-07-23 12:31:33.997075\\t1\\t2000\" > /data/log_viewing-0.tsv\n\n# Create a script to test the DateTime64 issue\nRUN echo '#!/bin/bash\\n\\\n# Start ClickHouse server\\n\\\n/build/ClickHouse/build/programs/clickhouse-server --config-file=/build/ClickHouse/programs/server/config.xml &\\n\\\nSERVER_PID=$!\\n\\\nsleep 5\\n\\\n\\n\\\necho \"Creating test database and table for DateTime64 issue...\"\\n\\\n/build/ClickHouse/build/programs/clickhouse-client --query \"CREATE DATABASE IF NOT EXISTS spnav;\"\\n\\\n/build/ClickHouse/build/programs/clickhouse-client --query \"CREATE TABLE spnav.log_viewing (\\n\\\n  id UInt32,\\n\\\n  ts DateTime64(6, '\\''Europe/Moscow'\\''),\\n\\\n  document_id UInt16,\\n\\\n  user_id UInt16,\\n\\\n  element_id_max UInt16,\\n\\\n  element_id_max_child UInt16,\\n\\\n  element_id_min UInt16,\\n\\\n  element_id_min_child UInt16,\\n\\\n  status UInt8,\\n\\\n  tz_offset Int16,\\n\\\n  ts_local DateTime64(6, '\\''Europe/Moscow'\\''),\\n\\\n  source UInt8,\\n\\\n  duration UInt16\\n\\\n) ENGINE = Log;\"\\n\\\n\\n\\\necho \"Inserting test data...\"\\n\\\n/build/ClickHouse/build/programs/clickhouse-client --query \"INSERT INTO spnav.log_viewing FORMAT TabSeparatedWithNames\" < /data/log_viewing-0.tsv\\n\\\n\\n\\\necho \"Querying the inserted data...\"\\n\\\n/build/ClickHouse/build/programs/clickhouse-client --query \"SELECT * FROM spnav.log_viewing;\"\\n\\\n\\n\\\n# Stop ClickHouse server\\n\\\nkill $SERVER_PID\\n\\\nwait\\n\\\n' > /test_datetime64_issue.sh && chmod +x /test_datetime64_issue.sh\n\n# Add the build directory to PATH\nENV PATH=\"/build/ClickHouse/build/programs:${PATH}\"\n\n# Default command to show help\nCMD [\"echo\", \"ClickHouse has been built with the fix for issue #15903 (DateTime64 import from TSV/CSV). To test the issue, run: /test_datetime64_issue.sh\"]",
  "successful_candidate_index": 1,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "satisfaction_conditions": [
    "Client version must support DateTime64 data type",
    "Client and server versions must be compatible",
    "Data must be successfully imported with correct data types",
    "Input file format must match the specified TabSeparatedWithNames format"
  ]
}