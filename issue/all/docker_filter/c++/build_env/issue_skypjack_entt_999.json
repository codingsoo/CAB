{
  "number": 999,
  "title": "meta_any::invoke dose not change a instance which is passed as reference.",
  "created_at": "2023-03-22T14:29:07Z",
  "closed_at": "2023-03-22T14:47:55Z",
  "labels": [
    "question",
    "solved"
  ],
  "url": "https://github.com/skypjack/entt/issues/999",
  "body": "### Environment\r\n- entt : v3.11.1\r\n- visual studio 2022 : Version17.4.5\r\n\r\n### Issue\r\nI called meta_any::invoke with a function which receive a reference parameter and modify it.\r\n\r\nI read issue #460, so I used std::ref.\r\n\r\nBut the caller's instance value was not changed.\r\n\r\nMy code is as follow.\r\n\r\n``` cpp\r\nstruct Position\r\n{\r\n\tdouble x, y, z;\r\n\r\n\tvoid get(double& tmp)\r\n\t{\r\n\t\ttmp = x;\r\n\t}\r\n};\r\n\r\nBOOST_AUTO_TEST_CASE(Test)\r\n{\r\n\tusing entt::operator\"\"_hs;\r\n\r\n\tentt::meta<::Position>()\r\n\t\t.type(entt::type_id<::Position>().hash())\r\n\t\t.func<&::Position::get>(\"get\"_hs);\r\n\r\n\t::Position data{ 1.0, 2.0, 3.0 };\r\n\tauto any = entt::resolve(entt::type_id<Position>()).from_void(&data);\r\n\r\n\tdouble value;\r\n\tany.invoke(\"get\"_hs, std::ref(value));\r\n\r\n\tBOOST_TEST(value == data.x);\r\n}\r\n```\r\n\r\nIn addition, I executed the code in 460 with a slight modification.\r\nResults were similar.\r\n\r\n``` cpp\r\nBOOST_AUTO_TEST_CASE(MutateByRef)\r\n{\r\n\tusing entt::operator\"\"_hs;\r\n\r\n\tentt::meta<get_last_hour_data>().type(\"/getLastHourData\"_hs).template base<Base>().\r\n\t\ttemplate func<&get_last_hour_data::exec>(\"exec\"_hs).\r\n\t\ttemplate ctor<&get_last_hour_data::create>();\r\n\tauto type = entt::resolve(\"/getLastHourData\"_hs);\r\n\tassert(type);\r\n\r\n\tauto func = type.func(\"exec\"_hs);\r\n\tassert(func);\r\n\r\n\tauto any = type.construct(std::string{});\r\n\tassert(any);\r\n\r\n\tstd::string s;\r\n\tauto any_2 = func.invoke(any, std::ref(s));\r\n\tassert(any_2);\r\n\tBOOST_TEST(\".\" == s);\r\n}\r\n\r\nBOOST_AUTO_TEST_CASE(MutateBySharedPtrRef)\r\n{\r\n\tusing entt::operator\"\"_hs;\r\n\r\n\tentt::meta<get_last_hour_data>().template func<&get_last_hour_data::exec_ptr>(\"exec_ptr\"_hs);\r\n\r\n\tauto type = entt::resolve(\"/getLastHourData\"_hs);\r\n\tassert(type);\r\n\r\n\r\n\tauto func = type.func(\"exec_ptr\"_hs);\r\n\tassert(func);\r\n\r\n\tauto any = type.construct(std::string{});\r\n\tassert(any);\r\n\r\n\tauto s = std::make_shared<std::string>();\r\n\tauto any_2 = func.invoke(any, std::ref(s));\r\n\tassert(any_2);\r\n\tBOOST_TEST(\".\" == *s);\r\n}\r\n```\r\n\r\nThank you for your help in advance.",
  "comments_url": "https://api.github.com/repos/skypjack/entt/issues/999/comments",
  "author": "tetrisplusplus",
  "comments": [
    {
      "user": "Green-Sky",
      "created_at": "2023-03-22T14:34:50Z",
      "body": "you can use `entt::forward_as_meta(value)` instead of `std::ref(value)`"
    },
    {
      "user": "tetrisplusplus",
      "created_at": "2023-03-22T14:47:55Z",
      "body": "It worked fine by using entt::forward_as_meta.\r\nThank you very much!\r\n\r\n"
    }
  ],
  "satisfaction_conditions": [
    "Demonstrates proper handling of reference parameters in EnTT's meta system",
    "Shows correct use of EnTT's type forwarding mechanism for mutable references",
    "Ensures meta_any interactions preserve reference semantics for output parameters",
    "Uses EnTT-specific mechanisms rather than standard library reference wrappers"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-04-04 23:54:01"
  },
  "git_commit_info": {
    "sha": "cc6c45f591b440550f490683834f591ed11adff7",
    "date": "2022-06-04T09:40:52Z",
    "message": "adjacency_matrix: edges -> out_edges",
    "author": "Michele Caini"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-69524dfdf858699ed44a6d8f2ffabfd9b610269c.pack\n./.git/objects/pack/pack-69524dfdf858699ed44a6d8f2ffabfd9b610269c.rev\n./.git/objects/pack/pack-69524dfdf858699ed44a6d8f2ffabfd9b610269c.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/master\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/master\n./.git/logs/HEAD\n./.git/index\n./.github\n./.github/FUNDING.yml\n./.github/workflows\n./.github/workflows/build.yml\n./.github/workflows/coverage.yml\n./.github/workflows/deploy.yml\n./.github/workflows/sanitizer.yml\n./AUTHORS\n./CONTRIBUTING.md\n./build\n./build/.gitignore\n./cmake\n./cmake/in\n./cmake/in/EnTTConfig.cmake.in\n./cmake/in/entt.pc.in\n./conan\n./conan/build.py\n./conan/ci\n./conan/ci/build.sh\n./conan/ci/install.sh\n./conan/test_package\n./conan/test_package/CMakeLists.txt\n./conan/test_package/conanfile.py\n./conan/test_package/test_package.cpp\n./conanfile.py\n./docs\n./docs/md\n./docs/md/config.md\n./docs/md/container.md\n./docs/md/core.md\n./docs/md/entity.md\n./docs/md/faq.md\n./docs/md/lib.md\n./docs/md/links.md\n./docs/md/locator.md\n./docs/md/meta.md\n./docs/md/poly.md\n./docs/md/process.md\n./docs/md/reference.md\n./docs/md/resource.md\n./docs/md/signal.md\n./docs/md/unreal.md\n./docs/CMakeLists.txt\n./docs/dox\n./docs/dox/extra.dox\n./docs/doxy.in\n./natvis\n./natvis/entt\n./natvis/entt/config.natvis\n./natvis/entt/locator.natvis\n./natvis/entt/poly.natvis\n./natvis/entt/process.natvis\n./natvis/entt/container.natvis\n./natvis/entt/core.natvis\n./natvis/entt/entity.natvis\n./natvis/entt/meta.natvis\n./natvis/entt/platform.natvis\n./natvis/entt/resource.natvis\n./natvis/entt/signal.natvis\n./scripts\n./scripts/amalgamate.py\n./scripts/config.json\n./scripts/update_homebrew.sh\n./single_include\n./single_include/entt\n./single_include/entt/entt.hpp\n./src\n./src/entt\n./src/entt/config\n./src/entt/config/config.h\n./src/entt/config/macro.h\n./src/entt/config/version.h\n./src/entt/container\n./src/entt/container/dense_map.hpp\n./src/entt/container/dense_set.hpp\n./src/entt/container/fwd.hpp\n./src/entt/core\n./src/entt/core/attribute.h\n./src/entt/core/enum.hpp\n./src/entt/core/ident.hpp\n./src/entt/core/algorithm.hpp\n./src/entt/core/any.hpp\n./src/entt/core/compressed_pair.hpp\n./src/entt/core/family.hpp\n./src/entt/core/fwd.hpp\n./src/entt/core/hashed_string.hpp\n./src/entt/core/iterator.hpp\n./src/entt/core/memory.hpp\n./src/entt/core/monostate.hpp\n./src/entt/core/tuple.hpp\n./src/entt/core/type_info.hpp\n./src/entt/core/type_traits.hpp\n./src/entt/core/utility.hpp\n./src/entt/entity\n./src/entt/entity/component.hpp\n./src/entt/entity/entity.hpp\n./src/entt/entity/fwd.hpp\n./src/entt/entity/group.hpp\n./src/entt/entity/handle.hpp\n./src/entt/entity/helper.hpp\n./src/entt/entity/observer.hpp\n./src/entt/entity/organizer.hpp\n./src/entt/entity/registry.hpp\n./src/entt/entity/runtime_view.hpp\n./src/entt/entity/sigh_storage_mixin.hpp\n./src/entt/entity/snapshot.hpp\n./src/entt/entity/sparse_set.hpp\n./src/entt/entity/storage.hpp\n./src/entt/entity/view.hpp\n./src/entt/graph\n./src/entt/graph/adjacency_matrix.hpp\n./src/entt/graph/fwd.hpp\n./src/entt/locator\n./src/entt/locator/locator.hpp\n./src/entt/meta\n./src/entt/meta/adl_pointer.hpp\n./src/entt/meta/container.hpp\n./src/entt/meta/ctx.hpp\n./src/entt/meta/factory.hpp\n./src/entt/meta/fwd.hpp\n./src/entt/meta/meta.hpp\n./src/entt/meta/node.hpp\n./src/entt/meta/pointer.hpp\n./src/entt/meta/policy.hpp\n./src/entt/meta/range.hpp\n./src/entt/meta/resolve.hpp\n./src/entt/meta/template.hpp\n./src/entt/meta/type_traits.hpp\n./src/entt/meta/utility.hpp\n./src/entt/poly\n./src/entt/poly/fwd.hpp\n./src/entt/poly/poly.hpp\n./src/entt/process\n./src/entt/process/fwd.hpp\n./src/entt/process/process.hpp\n./src/entt/process/scheduler.hpp\n./src/entt/resource\n./src/entt/resource/fwd.hpp\n./src/entt/resource/loader.hpp\n./src/entt/resource/cache.hpp\n./src/entt/resource/resource.hpp\n./src/entt/signal\n./src/entt/signal/delegate.hpp\n./src/entt/signal/dispatcher.hpp\n./src/entt/signal/emitter.hpp\n./src/entt/signal/fwd.hpp\n./src/entt/signal/sigh.hpp\n./src/entt/entt.hpp\n./src/entt/fwd.hpp\n./src/entt/platform\n./src/entt/platform/android-ndk-r17.hpp\n./test\n./test/benchmark\n./test/benchmark/benchmark.cpp\n./test/entt\n./test/entt/config\n./test/entt/config/version.cpp\n./test/entt/container\n./test/entt/container/dense_map.cpp\n./test/entt/container/dense_set.cpp\n./test/entt/core\n./test/entt/core/family.cpp\n./test/entt/core/algorithm.cpp\n./test/entt/core/any.cpp\n./test/entt/core/compressed_pair.cpp\n./test/entt/core/enum.cpp\n./test/entt/core/hashed_string.cpp\n./test/entt/core/ident.cpp\n./test/entt/core/iterator.cpp\n./test/entt/core/memory.cpp\n./test/entt/core/monostate.cpp\n./test/entt/core/tuple.cpp\n./test/entt/core/type_info.cpp\n./test/entt/core/type_traits.cpp\n./test/entt/core/utility.cpp\n./test/entt/entity\n./test/entt/entity/component.cpp\n./test/entt/entity/entity.cpp\n./test/entt/entity/group.cpp\n./test/entt/entity/handle.cpp\n./test/entt/entity/helper.cpp\n./test/entt/entity/observer.cpp\n./test/entt/entity/organizer.cpp\n./test/entt/entity/registry.cpp\n./test/entt/entity/runtime_view.cpp\n./test/entt/entity/sigh_storage_mixin.cpp\n./test/entt/entity/snapshot.cpp\n./test/entt/entity/sparse_set.cpp\n./test/entt/entity/storage.cpp\n./test/entt/entity/view.cpp\n./test/entt/graph\n./test/entt/graph/adjacency_matrix.cpp\n./test/entt/locator\n./test/entt/locator/locator.cpp\n./test/entt/meta\n./test/entt/meta/meta_any.cpp\n./test/entt/meta/meta_base.cpp\n./test/entt/meta/meta_container.cpp\n./test/entt/meta/meta_conv.cpp\n./test/entt/meta/meta_ctor.cpp\n./test/entt/meta/meta_data.cpp\n./test/entt/meta/meta_dtor.cpp\n./test/entt/meta/meta_func.cpp\n./test/entt/meta/meta_handle.cpp\n./test/entt/meta/meta_pointer.cpp\n./test/entt/meta/meta_prop.cpp\n./test/entt/meta/meta_range.cpp\n./test/entt/meta/meta_template.cpp\n./test/entt/meta/meta_type.cpp\n./test/entt/meta/meta_utility.cpp\n./test/entt/poly\n./test/entt/poly/poly.cpp\n./test/entt/process\n./test/entt/process/process.cpp\n./test/entt/process/scheduler.cpp\n./test/entt/resource\n./test/entt/resource/resource.cpp\n./test/entt/resource/resource_cache.cpp\n./test/entt/resource/resource_loader.cpp\n./test/entt/signal\n./test/entt/signal/delegate.cpp\n./test/entt/signal/dispatcher.cpp\n./test/entt/signal/emitter.cpp\n./test/entt/signal/sigh.cpp\n./test/entt/common\n./test/entt/common/basic_test_allocator.hpp\n./test/entt/common/throwing_allocator.hpp\n./test/entt/common/throwing_type.hpp\n./test/entt/common/tracked_memory_resource.hpp\n./test/example\n./test/example/custom_identifier.cpp\n./test/example/entity_copy.cpp\n./test/example/signal_less.cpp\n./test/snapshot\n./test/snapshot/snapshot.cpp\n./test/CMakeLists.txt\n./test/lib\n./test/lib/dispatcher\n./test/lib/dispatcher/lib.cpp\n./test/lib/dispatcher/main.cpp\n./test/lib/dispatcher/types.h\n./test/lib/dispatcher_plugin\n./test/lib/dispatcher_plugin/main.cpp\n./test/lib/dispatcher_plugin/plugin.cpp\n./test/lib/dispatcher_plugin/types.h\n./test/lib/emitter\n./test/lib/emitter/lib.cpp\n./test/lib/emitter/main.cpp\n./test/lib/emitter/types.h\n./test/lib/emitter_plugin\n./test/lib/emitter_plugin/main.cpp\n./test/lib/emitter_plugin/plugin.cpp\n./test/lib/emitter_plugin/types.h\n./test/lib/meta\n./test/lib/meta/lib.cpp\n./test/lib/meta/main.cpp\n./test/lib/meta/types.h\n./test/lib/meta_plugin\n./test/lib/meta_plugin/main.cpp\n./test/lib/meta_plugin/plugin.cpp\n./test/lib/meta_plugin/types.h\n./test/lib/meta_plugin_std\n./test/lib/meta_plugin_std/main.cpp\n./test/lib/meta_plugin_std/plugin.cpp\n./test/lib/meta_plugin_std/types.h\n./test/lib/registry\n./test/lib/registry/lib.cpp\n./test/lib/registry/main.cpp\n./test/lib/registry/types.h\n./test/lib/registry_plugin\n./test/lib/registry_plugin/main.cpp\n./test/lib/registry_plugin/plugin.cpp\n./test/lib/registry_plugin/types.h\n./test/odr.cpp\n./.clang-format\n./.gitignore\n./BUILD.bazel\n./CMakeLists.txt\n./LICENSE\n./README.md\n./TODO\n./WORKSPACE\n",
    "readme": "\n--- ./README.md ---\n![EnTT: Gaming meets modern C++](https://user-images.githubusercontent.com/1812216/103550016-90752280-4ea8-11eb-8667-12ed2219e137.png)\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\n[![Build Status](https://github.com/skypjack/entt/workflows/build/badge.svg)](https://github.com/skypjack/entt/actions)\n[![Coverage](https://codecov.io/gh/skypjack/entt/branch/master/graph/badge.svg)](https://codecov.io/gh/skypjack/entt)\n[![Try online](https://img.shields.io/badge/try-online-brightgreen)](https://godbolt.org/z/zxW73f)\n[![Documentation](https://img.shields.io/badge/docs-docsforge-blue)](http://entt.docsforge.com/)\n[![Gitter chat](https://badges.gitter.im/skypjack/entt.png)](https://gitter.im/skypjack/entt)\n[![Discord channel](https://img.shields.io/discord/707607951396962417?logo=discord)](https://discord.gg/5BjPWBd)\n[![Donate](https://img.shields.io/badge/donate-paypal-blue.svg)](https://www.paypal.me/skypjack)\n\n> `EnTT` has been a dream so far, we haven't found a single bug to date and it's\n> super easy to work with\n\n`EnTT` is a header-only, tiny and easy to use library for game programming and\nmuch more written in **modern C++**.<br/>\n[Among others](https://github.com/skypjack/entt/wiki/EnTT-in-Action), it's used\nin [**Minecraft**](https://minecraft.net/en-us/attribution/) by Mojang, the\n[**ArcGIS Runtime SDKs**](https://developers.arcgis.com/arcgis-runtime/) by Esri\nand the amazing [**Ragdoll**](https://ragdolldynamics.com/).<br/>\nIf you don't see your project in the list, please open an issue, submit a PR or\nadd the [#entt](https://github.com/topics/entt) tag to your _topics_! :+1:\n\n---\n\nDo you want to **keep up with changes** or do you have a **question** that\ndoesn't require you to open an issue?<br/>\nJoin the [gitter channel](https://gitter.im/skypjack/entt) and the\n[discord server](https://discord.gg/5BjPWBd), meet other users like you. The\nmore we are, the better for everyone.<br/>\nDon't forget to check the\n[FAQs](https://github.com/skypjack/entt/wiki/Frequently-Asked-Questions) and the\n[wiki](https://github.com/skypjack/entt/wiki) too. Your answers may already be\nthere.\n\nDo you want to support `EnTT`? Consider becoming a\n[**sponsor**](https://github.com/users/skypjack/sponsorship).\nMany thanks to [these people](https://skypjack.github.io/sponsorship/) and\n**special** thanks to:\n\n[![mojang](https://user-images.githubusercontent.com/1812216/106253145-67ca1980-6217-11eb-9c0b-d93561b37098.png)](https://mojang.com)\n[![imgly](https://user-images.githubusercontent.com/1812216/106253726-271ed000-6218-11eb-98e0-c9c681925770.png)](https://img.ly/)\n\n# Table of Contents\n\n* [Introduction](#introduction)\n  * [Code Example](#code-example)\n  * [Motivation](#motivation)\n  * [Performance](#performance)\n* [Integration](#integration)\n  * [Requirements](#requirements)\n  * [CMake](#cmake)\n  * [Natvis support](#natvis-support)\n  * [Packaging Tools](#packaging-tools)\n  * [pkg-config](#pkg-config)\n* [Documentation](#documentation)\n* [Tests](#tests)\n* [EnTT in Action](#entt-in-action)\n* [Contributors](#contributors)\n* [License](#license)\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n\n# Introduction\n\nThe entity-component-system (also known as _ECS_) is an architectural pattern\nused mostly in game development. For further details:\n\n* [Entity Systems Wiki](http://entity-systems.wikidot.com/)\n* [Evolve Your Hierarchy](http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/)\n* [ECS on Wikipedia](https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system)\n\nThis project started off as a pure entity-component system. Over time the\ncodebase has grown as more and more classes and functionalities were added.<br/>\nHere is a brief, yet incomplete list of what it offers today:\n\n* Built-in **RTTI system** mostly similar to the standard one.\n* A `constexpr` utility for human readable **resource names**.\n* Minimal **configuration system** built using the monostate pattern.\n* Incredibly fast **entity-component system** with its own _pay for what you\n  use_ policy.\n* Views and groups to iterate entities and components and allow different access\n  patterns, from **perfect SoA** to fully random.\n* A lot of **facilities** built on top of the entity-component system to help\n  the users and avoid reinventing the wheel.\n* The smallest and most basic implementation of a **service locator** ever seen.\n* A built-in, non-intrusive and macro-free runtime **reflection system**.\n* **Static polymorphism** made simple and within everyone's reach.\n* A few homemade containers, like a sparse set based **hash map**.\n* A **cooperative scheduler** for processes of any type.\n* All that is needed for **resource management** (cache, loaders, handles).\n* Delegates, **signal handlers** and a tiny event dispatcher.\n* A general purpose **event emitter** as a CRTP idiom based class template.\n* And **much more**! Check out the\n  [**wiki**](https://github.com/skypjack/entt/wiki).\n\nConsider these lists a work in progress as well as the project. The whole API is\nfully documented in-code for those who are brave enough to read it.<br/>\nPlease, do note that all tools are also DLL-friendly now and run smoothly across\nboundaries.\n\nOne thing known to most is that `EnTT` is also used in **Minecraft**.<br/>\nGiven that the game is available literally everywhere, I can confidently say \nthat the library has been sufficiently tested on every platform that can come to \nmind.\n\n## Code Example\n\n```cpp\n#include <entt/entt.hpp>\n\nstruct position {\n    float x;\n    float y;\n};\n\nstruct velocity {\n    float dx;\n    float dy;\n};\n\nvoid update(entt::registry &registry) {\n    auto view = registry.view<const position, velocity>();\n\n    // use a callback\n    view.each([](const auto &pos, auto &vel) { /* ... */ });\n\n    // use an extended callback\n    view.each([](const auto entity, const auto &pos, auto &vel) { /* ... */ });\n\n    // use a range-for\n    for(auto [entity, pos, vel]: view.each()) {\n        // ...\n    }\n\n    // use forward iterators and get only the components of interest\n    for(auto entity: view) {\n        auto &vel = view.get<velocity>(entity);\n        // ...\n    }\n}\n\nint main() {\n    entt::registry registry;\n\n    for(auto i = 0u; i < 10u; ++i) {\n        const auto entity = registry.create();\n        registry.emplace<position>(entity, i * 1.f, i * 1.f);\n        if(i % 2 == 0) { registry.emplace<velocity>(entity, i * .1f, i * .1f); }\n    }\n\n    update(registry);\n}\n```\n\n## Motivation\n\nI started developing `EnTT` for the _wrong_ reason: my goal was to design an\nentity-component system to beat another well known open source library both in\nterms of performance and possibly memory usage.<br/>\nIn the end, I did it, but it wasn't very satisfying. Actually it wasn't\nsatisfying at all. The fastest and nothing more, fairly little indeed. When I\nrealized it, I tried hard to keep intact the great performance of `EnTT` and to\nadd all the features I wanted to see in *my own library* at the same time.\n\nNowadays, `EnTT` is finally what I was looking for: still faster than its\n_competitors_, lower memory usage in the average case, a really good API and an\namazing set of features. And even more, of course.\n\n## Performance\n\nThe proposed entity-component system is incredibly fast to iterate entities and\ncomponents, this is a fact. Some compilers make a lot of optimizations because\nof how `EnTT` works, some others aren't that good. In general, if we consider\nreal world cases, `EnTT` is somewhere between a bit and much faster than many of\nthe other solutions around, although I couldn't check them all for obvious\nreasons.\n\nIf you are interested, you can compile the `benchmark` test in release mode (to\nenable compiler optimizations, otherwise it would make little sense) by setting\nthe `ENTT_BUILD_BENCHMARK` option of `CMake` to `ON`, then evaluate yourself\nwhether you're satisfied with the results or not.\n\nHonestly I got tired of updating the README file whenever there is an\nimprovement.<br/>\nThere are already a lot of projects out there that use `EnTT` as a basis for\ncomparison (this should already tell you a lot). Many of these benchmarks are\ncompletely wrong, many others are simply incomplete, good at omitting some\ninformation and using the wrong function to compare a given feature. Certainly\nthere are also good ones but they age quickly if nobody updates them, especially\nwhen the library they are dealing with is actively developed.\n\nThe choice to use `EnTT` should be based on its carefully designed API, its\nset of features and the general performance, **not** because some single\nbenchmark shows it to be the fastest tool available.\n\nIn the future I'll likely try to get even better performance while still adding\nnew features, mainly for fun.<br/>\nIf you want to contribute and/or have suggestions, feel free to make a PR or\nopen an issue to discuss your idea.\n\n# Integration\n\n`EnTT` is a header-only library. This means that including the `entt.hpp` header\nis enough to include the library as a whole and use it. For those who are\ninterested only in the entity-component system, consider to include the sole\n`entity/registry.hpp` header instead.<br/>\nIt's a matter of adding the following line to the top of a file:\n\n```cpp\n#include <entt/entt.hpp>\n```\n\nUse the line below to include only the entity-component system instead:\n\n```cpp\n#include <entt/entity/registry.hpp>\n```\n\nThen pass the proper `-I` argument to the compiler to add the `src` directory to\nthe include paths.\n\n## Requirements\n\nTo be able to use `EnTT`, users must provide a full-featured compiler that\nsupports at least C++17.<br/>\nThe requirements below are mandatory to compile the tests and to extract the\ndocumentation:\n\n* `CMake` version 3.7 or later.\n* `Doxygen` version 1.8 or later.\n\nAlternatively, [Bazel](https://bazel.build) is also supported as a build system\n(credits to [zaucy](https://github.com/zaucy) who offered to maintain it).<br/>\nIn the documentation below I'll still refer to `CMake`, this being the official\nbuild system of the library.\n\n## CMake\n\nTo use `EnTT` from a `CMake` project, just link an existing target to the\n`EnTT::EnTT` alias.<br/>\nThe library offers everything you need for locating (as in `find_package`),\nembedding (as in `add_subdirectory`), fetching (as in `FetchContent`) or using\nit in many of the ways that you can think of and that involve `CMake`.<br/>\nCovering all possible cases would require a treaty and not a simple README file,\nbut I'm confident that anyone reading this section also knows what it's about\nand can use `EnTT` from a `CMake` project without problems.\n\n## Natvis support\n\nWhen using `CMake`, just enable the option `ENTT_INCLUDE_NATVIS` and enjoy\nit.<br/>\nOtherwise, most of the tools are covered via Natvis and all files can be found\nin the `natvis` directory, divided by module.<br/>\nIf you spot errors or have suggestions, any contribution is welcome!\n\n## Packaging Tools\n\n`EnTT` is available for some of the most known packaging tools. In particular:\n\n* [`Conan`](https://github.com/conan-io/conan-center-index), the C/C++ Package\n  Manager for Developers.\n\n* [`vcpkg`](https://github.com/Microsoft/vcpkg), Microsoft VC++ Packaging\n  Tool.<br/>\n  You can download and install `EnTT` in just a few simple steps:\n\n  ```\n  $ git clone https://github.com/Microsoft/vcpkg.git\n  $ cd vcpkg\n  $ ./bootstrap-vcpkg.sh\n  $ ./vcpkg integrate install\n  $ vcpkg install entt\n  ```\n\n  Or you can use the `experimental` feature to test the latest changes:\n\n  ```\n  vcpkg install entt[experimental] --head\n  ```\n\n  The `EnTT` port in `vcpkg` is kept up to date by Microsoft team members and\n  community contributors.<br/>\n  If the version is out of date, please\n  [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the\n  `vcpkg` repository.\n\n* [`Homebrew`](https://github.com/skypjack/homebrew-entt), the missing package\n  manager for macOS.<br/>\n  Available as a homebrew formula. Just type the following to install it:\n\n  ```\n  brew install skypjack/entt/entt\n  ```\n\n* [`build2`](https://build2.org), build toolchain for developing and packaging C\n  and C++ code.<br/>\n  In order to use the [`entt`](https://cppget.org/entt) package in a `build2`\n  project, add the following line or a similar one to the `manifest` file:\n\n  ```\n  depends: entt ^3.0.0\n  ```\n\n  Also check that the configuration refers to a valid repository, so that the\n  package can be found by `build2`:\n\n  * [`cppget.org`](https://cppget.org), the open-source community central\n    repository, accessible as `https://pkg.cppget.org/1/stable`.\n\n  * [Package source repository](https://github.com/build2-packaging/entt):\n    accessible as either `https://github.com/build2-packaging/entt.git` or\n    `ssh://git@github.com/build2-packaging/entt.git`.\n    Feel free to [report issues](https://github.com/build2-packaging/entt) with\n    this package.\n\n  Both can be used with `bpkg add-repo` or added in a project\n  `repositories.manifest`. See the official\n  [documentation](https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml#guide-repositories)\n  for more details.\n\nConsider this list a work in progress and help me to make it longer if you like.\n\n## pkg-config\n\n`EnTT` also supports `pkg-config` (for some definition of _supports_ at least).\nA suitable file called `entt.pc` is generated and installed in a proper\ndirectory when running `CMake`.<br/>\nThis should also make it easier to use with tools such as `Meson` or similar.\n\n# Documentation\n\nThe documentation is based on [doxygen](http://www.doxygen.nl/). To build it:\n\n    $ cd build\n    $ cmake .. -DENTT_BUILD_DOCS=ON\n    $ make\n\nThe API reference will be created in HTML format within the directory\n`build/docs/html`. To navigate it with your favorite browser:\n\n    $ cd build\n    $ your_favorite_browser docs/html/index.html\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\nThe same version is also available [online](https://skypjack.github.io/entt/)\nfor the latest release, that is the last stable tag. If you are looking for\nsomething more pleasing to the eye, consider reading the nice-looking version\navailable on [docsforge](https://entt.docsforge.com/): same documentation, much\nmore pleasant to read.<br/>\nMoreover, there exists a [wiki](https://github.com/skypjack/entt/wiki) dedicated\nto the project where users can find all related documentation pages.\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n\n# Tests\n\nTo compile and run the tests, `EnTT` requires *googletest*.<br/>\n`cmake` will download and compile the library before compiling anything else.\nIn order to build the tests, set the `CMake` option `ENTT_BUILD_TESTING` to\n`ON`.\n\nTo build the most basic set of tests:\n\n* `$ cd build`\n* `$ cmake -DENTT_BUILD_TESTING=ON ..`\n* `$ make`\n* `$ make test`\n\nNote that benchmarks are not part of this set.\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\n# EnTT in Action\n\n`EnTT` is widely used in private and commercial applications. I cannot even\nmention most of them because of some signatures I put on some documents time\nago. Fortunately, there are also people who took the time to implement open\nsource projects based on `EnTT` and did not hold back when it came to\ndocumenting them.\n\n[Here](https://github.com/skypjack/entt/wiki/EnTT-in-Action) you can find an\nincomplete list of games, applications and articles that can be used as a\nreference.\n\nIf you know of other resources out there that are about `EnTT`, feel free to\nopen an issue or a PR and I'll be glad to add them to the list.\n\n# Contributors\n\nRequests for features, PRs, suggestions ad feedback are highly appreciated.\n\nIf you find you can help and want to contribute to the project with your\nexperience or you do want to get part of the project for some other reason, feel\nfree to contact me directly (you can find the mail in the\n[profile](https://github.com/skypjack)).<br/>\nI can't promise that each and every contribution will be accepted, but I can\nassure that I'll do my best to take them all as soon as possible.\n\nIf you decide to participate, please see the guidelines for\n[contributing](CONTRIBUTING.md) before to create issues or pull\nrequests.<br/>\nTake also a look at the\n[contributors list](https://github.com/skypjack/entt/blob/master/AUTHORS) to\nknow who has participated so far.\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n\n# License\n\nCode and documentation Copyright (c) 2017-2022 Michele Caini.<br/>\nColorful logo Copyright (c) 2018-2021 Richard Caseres.\n\nCode released under\n[the MIT license](https://github.com/skypjack/entt/blob/master/LICENSE).<br/>\nDocumentation released under\n[CC BY 4.0](https://creativecommons.org/licenses/by/4.0/).<br/>\nAll logos released under\n[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/).\n\n\n\n--- ./CONTRIBUTING.md ---\n# Contributing\n\nFirst of all, thank you very much for taking the time to contribute to the\n`EnTT` library.<br/>\nHow to do it mostly depends on the type of contribution:\n\n* If you have a question, **please** ensure there isn't already an answer for\n  you by searching on GitHub under\n  [issues](https://github.com/skypjack/entt/issues). Do not forget to search\n  also through the closed ones. If you are unable to find a proper answer, feel\n  free to [open a new issue](https://github.com/skypjack/entt/issues/new).\n  Usually, questions are marked as such and closed in a few days.\n\n* If you want to fix a typo in the inline documentation or in the README file,\n  if you want to add some new sections or if you want to help me with the\n  language by reviewing what I wrote so far (I'm not a native speaker after\n  all), **please** open a new\n  [pull request](https://github.com/skypjack/entt/pulls) with your changes.\n\n* If you found a bug, **please** ensure there isn't already an answer for you by\n  searching on GitHub under [issues](https://github.com/skypjack/entt/issues).\n  If you are unable to find an open issue addressing the problem, feel free to\n  [open a new one](https://github.com/skypjack/entt/issues/new). **Please**, do\n  not forget to carefully describe how to reproduce the problem, then add all\n  the information about the system on which you are experiencing it and point\n  out the version of `EnTT` you are using (tag or commit).\n\n* If you found a bug and you wrote a patch to fix it, open a new\n  [pull request](https://github.com/skypjack/entt/pulls) with your code.\n  **Please**, add some tests to avoid regressions in future if possible, it\n  would be really appreciated. Note that the `EnTT` library has a\n  [coverage at 100%](https://coveralls.io/github/skypjack/entt?branch=master)\n  (at least it was at 100% at the time I wrote this file) and this is the reason\n  for which you can be confident with using it in a production environment.\n\n* If you want to propose a new feature and you know how to code it, **please**\n  do not issue directly a pull request. Before to do it,\n  [create a new issue](https://github.com/skypjack/entt/issues/new) to discuss\n  your proposal. Other users could be interested in your idea and the discussion\n  that will follow can refine it and therefore give us a better solution.\n\n* If you want to request a new feature, I'm available for hiring. Take a look at\n  [my profile](https://github.com/skypjack) and feel free to write me.\n\n\n\n--- ./docs/md/config.md ---\n# Crash Course: configuration\n\n<!--\n@cond TURN_OFF_DOXYGEN\n-->\n# Table of Contents\n\n* [Introduction](#introduction)\n* [Definitions](#definitions)\n  * [ENTT_NOEXCEPTION](#entt_noexception)\n  * [ENTT_USE_ATOMIC](#entt_use_atomic)\n  * [ENTT_ID_TYPE](#entt_id_type)\n  * [ENTT_SPARSE_PAGE](#entt_sparse_page)\n  * [ENTT_PACKED_PAGE](#entt_packed_page)\n  * [ENTT_ASSERT](#entt_assert)\n    * [ENTT_DISABLE_ASSERT](#entt_disable_assert)\n  * [ENTT_NO_ETO](#entt_no_eto)\n  * [ENTT_STANDARD_CPP](#entt_standard_cpp)\n\n<!--\n@endcond TURN_OFF_DOXYGEN\n-->\n\n# Introduction\n\n`EnTT` doesn't offer many hooks for customization but it certainly offers\nsome.<br/>\nIn the vast majority of cases, users will have no interest in changing the\ndefault parameters. For all other cases, the list of possible configurations\nwith which it's possible to adjust the behavior of the library at runtime can be\nfound below.\n\n# Definitions\n\nAll options are intended as parameters to the compiler (or user-defined macros\nwithin the compilation units, if preferred).<br/>\nEach parameter can result in internal library definitions. It's not recommended\nto try to also modify these definitions, since there is no guarantee that they\nwill remain stable over time unlike the options below.\n\n## ENTT_NOEXCEPTION\n\nDefine this variable without assigning any value to it to turn off exception\nhandling in `EnTT`.<br/>\nThis is roughly equivalent to setting the compiler flag `-fno-exceptions` but is\nalso limited to this library only.\n\n## ENTT_USE_ATOMIC\n\nIn general, `EnTT` doesn't offer primitives to support multi-threading. Many of\nthe feature can be split over multiple threads without any explicit control and\nthe user is the one who knows if a synchronization point is required.<br/>\nHowever, some feature aren't easily accessible to users and are made thread-safe\nby means of this definition.\n\n## ENTT_ID_TYPE\n\n`entt::id_type` is directly controlled by this definition and widely used within\nthe library.<br/>\nBy default, its type is `std::uint32_t`. However, users can define a different\ndefault type if necessary.\n\n## ENTT_SPARSE_PAGE\n\nIt's known that the ECS module of `EnTT` is based on _sparse sets_. What is less\nknown perhaps is that the sparse arrays are paged to reduce memory usage.<br/>\nDefault size of pages (that is, the number of elements they contain) is 4096 but\nusers can adjust it if appropriate. In all case, the chosen value **must** be a\npower of 2.\n\n## ENTT_PACKED_PAGE\n\nAs it happens with sparse arrays, packed arrays are also paginated. However, in\nthis case the aim isn't to reduce memory usage but to have pointer stability\nupon component creation.<br/>\nDefault size of pages (that is, the number of elements they contain) is 1024 but\nusers can adjust it if appropriate. In all case, the chosen value **must** be a\npower of 2.\n\n## ENTT_ASSERT\n\nFor performance reasons, `EnTT` doesn't use exceptions or any other control\nstructures. In fact, it offers many features that result in undefined behavior\nif not used correctly.<br/>\nTo get around this, the library relies on a lot of asserts for the purpose of\ndetecting errors in debug builds. By default, it uses `assert` internally. Users\nare allowed to overwrite its behavior by setting this variable.\n\n### ENTT_DISABLE_ASSERT\n\nAssertions may in turn affect performance to an extent when enabled. Whether\n`ENTT_ASSERT` is redefined or not, all asserts can be disabled at once by means\nof this definition.<br/>\nNote that `ENTT_DISABLE_ASSERT` takes precedence over the redefinition of\n`ENTT_ASSERT` and is therefore meant to disable all controls no matter what.\n\n## ENTT_NO_ETO\n\nIn order to reduce memory consumption and increase performance, empty types are\nnever stored by the ECS module of `EnTT`.<br/>\nUse this variable to treat these types like all others and therefore to create a\ndedicated storage for them.\n\n## ENTT_STANDARD_CPP\n\n`EnTT` mixes non-standard language features with others that are perfectly\ncompliant to offer some of its functionalities.<br/>\nThis definition prevents the library from using non-standard techniques, that\nis, functionalities that aren't fully compliant with the standard C++.<br/>\nWhile there are no known portability issues at the time of this writing, this\nshould make the library fully portable anyway if needed.\n\n\n",
    "readme_filenames": [
      "./README.md",
      "./CONTRIBUTING.md",
      "./docs/md/config.md"
    ],
    "github_workflows": {
      ".github/workflows/build.yml": "name: build\n\non: [push, pull_request]\n\njobs:\n\n  linux:\n    timeout-minutes: 15\n\n    strategy:\n      matrix:\n        compiler:\n          - pkg: g++-7\n            exe: g++-7\n          - pkg: g++-8\n            exe: g++-8\n          - pkg: g++-9\n            exe: g++-9\n          - pkg: g++-10\n            exe: g++-10\n          - pkg: clang-8\n            exe: clang++-8\n          - pkg: clang-9\n            exe: clang++-9\n          - pkg: clang-10\n            exe: clang++-10\n          - pkg: clang-11\n            exe: clang++-11\n          - pkg: clang-12\n            exe: clang++-12\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Install compiler\n      run: |\n        sudo apt update\n        sudo apt install -y ${{ matrix.compiler.pkg }}\n    - name: Compile tests\n      working-directory: build\n      env:\n        CXX: ${{ matrix.compiler.exe }}\n      run: |\n        cmake -DENTT_BUILD_TESTING=ON -DENTT_BUILD_LIB=ON -DENTT_BUILD_EXAMPLE=ON ..\n        make -j4\n    - name: Run tests\n      working-directory: build\n      env:\n        CTEST_OUTPUT_ON_FAILURE: 1\n      run: ctest --timeout 30 -C Debug -j4\n\n  linux-extra:\n    timeout-minutes: 15\n\n    strategy:\n      matrix:\n        compiler: [g++, clang++]\n        id_type: [\"std::uint32_t\", \"std::uint64_t\"]\n        cxx_std: [cxx_std_17, cxx_std_20]\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Compile tests\n      working-directory: build\n      env:\n        CXX: ${{ matrix.compiler }}\n      run: |\n        cmake -DENTT_BUILD_TESTING=ON -DENTT_CXX_STD=${{ matrix.cxx_std }} -DENTT_ID_TYPE=${{ matrix.id_type }} ..\n        make -j4\n    - name: Run tests\n      working-directory: build\n      env:\n        CTEST_OUTPUT_ON_FAILURE: 1\n      run: ctest --timeout 30 -C Debug -j4\n\n  windows:\n    timeout-minutes: 15\n\n    strategy:\n      matrix:\n        toolset: [default, v141, v142, clang-cl]\n        include:\n          - toolset: v141\n            toolset_option: -T\"v141\"\n          - toolset: v142\n            toolset_option: -T\"v142\"\n          - toolset: clang-cl\n            toolset_option: -T\"ClangCl\"\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Compile tests\n      working-directory: build\n      run: |\n        cmake -DENTT_BUILD_TESTING=ON -DENTT_BUILD_LIB=ON -DENTT_BUILD_EXAMPLE=ON ${{ matrix.toolset_option }} ..\n        cmake --build . -j 4\n    - name: Run tests\n      working-directory: build\n      env:\n        CTEST_OUTPUT_ON_FAILURE: 1\n      run: ctest --timeout 30 -C Debug -j4\n\n  windows-extra:\n    timeout-minutes: 15\n\n    strategy:\n      matrix:\n        id_type: [\"std::uint32_t\", \"std::uint64_t\"]\n        cxx_std: [cxx_std_17, cxx_std_20]\n\n    runs-on: windows-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Compile tests\n      working-directory: build\n      run: |\n        cmake -DENTT_BUILD_TESTING=ON -DENTT_CXX_STD=${{ matrix.cxx_std }} -DENTT_ID_TYPE=${{ matrix.id_type }} ..\n        cmake --build . -j 4\n    - name: Run tests\n      working-directory: build\n      env:\n        CTEST_OUTPUT_ON_FAILURE: 1\n      run: ctest --timeout 30 -C Debug -j4\n\n  macos:\n    timeout-minutes: 15\n    runs-on: macOS-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Compile tests\n      working-directory: build\n      run: |\n        cmake -DENTT_BUILD_TESTING=ON -DENTT_BUILD_LIB=ON -DENTT_BUILD_EXAMPLE=ON ..\n        make -j4\n    - name: Run tests\n      working-directory: build\n      env:\n        CTEST_OUTPUT_ON_FAILURE: 1\n      run: ctest --timeout 30 -C Debug -j4\n\n  macos-extra:\n    timeout-minutes: 15\n\n    strategy:\n      matrix:\n        id_type: [\"std::uint32_t\", \"std::uint64_t\"]\n        cxx_std: [cxx_std_17, cxx_std_20]\n\n    runs-on: macOS-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Compile tests\n      working-directory: build\n      run: |\n        cmake -DENTT_BUILD_TESTING=ON -DENTT_CXX_STD=${{ matrix.cxx_std }} -DENTT_ID_TYPE=${{ matrix.id_type }} ..\n        make -j4\n    - name: Run tests\n      working-directory: build\n      env:\n        CTEST_OUTPUT_ON_FAILURE: 1\n      run: ctest --timeout 30 -C Debug -j4\n",
      ".github/workflows/coverage.yml": "name: coverage\n\non: [push, pull_request]\n\njobs:\n\n  codecov:\n    timeout-minutes: 15\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Compile tests\n      working-directory: build\n      env:\n        CXXFLAGS: \"--coverage -fno-inline\"\n        CXX: g++\n      run: |\n        cmake -DENTT_BUILD_TESTING=ON -DENTT_BUILD_LIB=ON -DENTT_BUILD_EXAMPLE=ON ..\n        make -j4\n    - name: Run tests\n      working-directory: build\n      env:\n        CTEST_OUTPUT_ON_FAILURE: 1\n      run: ctest --timeout 30 -C Debug -j4\n    - name: Collect data\n      working-directory: build\n      run: |\n        sudo apt install lcov\n        lcov -c -d . -o coverage.info\n        lcov -l coverage.info\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v2\n      with:\n        token: ${{ secrets.CODECOV_TOKEN }}\n        files: build/coverage.info\n        name: EnTT\n        fail_ci_if_error: true\n",
      ".github/workflows/deploy.yml": "name: deploy\n\non:\n  release:\n    types: published\n\njobs:\n\n  homebrew-entt:\n    timeout-minutes: 5\n    runs-on: ubuntu-latest\n\n    env:\n      GH_REPO: homebrew-entt\n      FORMULA: entt.rb\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Clone repository\n      working-directory: build\n      env:\n        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n      run: git clone https://$GITHUB_ACTOR:$PERSONAL_ACCESS_TOKEN@github.com/$GITHUB_ACTOR/$GH_REPO.git\n    - name: Prepare formula\n      working-directory: build\n      run: |\n        cd $GH_REPO\n        curl \"https://github.com/${{ github.repository }}/archive/${{ github.ref }}.tar.gz\" --location --fail --silent --show-error --output archive.tar.gz\n        sed -i -e '/url/s/\".*\"/\"'$(echo \"https://github.com/${{ github.repository }}/archive/${{ github.ref }}.tar.gz\" | sed -e 's/[\\/&]/\\\\&/g')'\"/' $FORMULA\n        sed -i -e '/sha256/s/\".*\"/\"'$(openssl sha256 archive.tar.gz | cut -d \" \" -f 2)'\"/' $FORMULA\n    - name: Update remote\n      working-directory: build\n      run: |\n        cd $GH_REPO\n        git config --local user.email \"action@github.com\"\n        git config --local user.name \"$GITHUB_ACTOR\"\n        git add $FORMULA\n        git commit -m \"Update to ${{ github.ref }}\"\n        git push origin master\n"
    }
  },
  "llm_calls_before_build": 0,
  "github_workflows_found": [
    ".github/workflows/build.yml",
    ".github/workflows/coverage.yml",
    ".github/workflows/deploy.yml"
  ],
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM ubuntu:22.04\n\n# Install system dependencies and compiler tools\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -y \\\n    build-essential \\\n    cmake \\\n    git \\\n    libboost-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Clone repository and checkout specific commit\nRUN git clone https://github.com/skypjack/entt.git /entt\nWORKDIR /entt\nRUN git checkout cc6c45f591b440550f490683834f591ed11adff7\n\n# Create build directory and configure project\nWORKDIR /entt/build\nRUN cmake -DENTT_BUILD_TESTING=ON ..\n\n# Build the project with all available cores\nRUN cmake --build . -- -j$(nproc)",
  "dockerfile_build_success": true,
  "successful_candidate_index": 5,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "llm_calls_total": 5
}