[
  {
    "number": 1684,
    "title": "Can't compile with cuBLAS with non-standard CUDA setup on linux",
    "created_at": "2023-12-23T15:24:00Z",
    "closed_at": "2023-12-27T20:36:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ggerganov/whisper.cpp/issues/1684",
    "body": "I've installed CUDA packages from the Negativo17 repo on a Fedora 38 system (because I'm using their nvidia-driver on this Lenovo P50 laptop with its discrete Nvidia GPU, which used to be tricky to setup when I first got this machine, and this was the driver that worked), and I'm having problems compiling whisper.cpp with cuBLAS enabled. I get a barrage of weird errors like \r\n\r\n```\r\n/usr/include/cuda/std/detail/libcxx/include/__cuda/atomic_prelude.h(29): error: identifier \"ATOMIC_LLONG_LOCK_FREE\" is undefined\r\n      static_assert(ATOMIC_LLONG_LOCK_FREE == 2, \"\");\r\n                    ^\r\n\r\n/usr/include/cuda/std/detail/libcxx/include/__cuda/atomic_prelude.h(30): error: identifier \"ATOMIC_POINTER_LOCK_FREE\" is undefined\r\n      static_assert(ATOMIC_POINTER_LOCK_FREE == 2, \"\");\r\n                    ^\r\n\r\nggml-cuda.cu(6519): error: namespace \"std\" has no member \"atomic_flag\"\r\n      std::atomic_flag& lock;\r\n           ^\r\n\r\nggml-cuda.cu(6520): error: namespace \"std\" has no member \"atomic_flag\"\r\n      scoped_spin_lock(std::atomic_flag& lock) : lock(lock) {\r\n```\r\n\r\nThe problem seems to be that these packages install the CUDA headers and libraries under /usr/ instead of /usr/local/cuda (like the official cuda-toolkit from Nvidia does). Apart from whisper.cpp (and llama.cpp for that matter) the setup seems to be functional, e.g. I could compile and run the examples from cuda-samples.\r\n\r\nDoes anyone have any ideas or experience on how to fix this?",
    "comments_url": "https://api.github.com/repos/ggerganov/whisper.cpp/issues/1684/comments",
    "author": "pjuhasz",
    "comments": [
      {
        "user": "bobqianic",
        "created_at": "2023-12-23T16:14:31Z",
        "body": "> The problem seems to be that these packages install the CUDA headers and libraries under /usr/ instead of /usr/local/cuda (like the official cuda-toolkit from Nvidia does). \r\n\r\nTry `CMake` and see if that helps.\r\n\r\n`cmake -S [source] -B [build] -DWHISPER_CUBLAS=1`\r\n\r\n`cmake --build [build] --config release`\r\n"
      },
      {
        "user": "pjuhasz",
        "created_at": "2023-12-27T20:36:32Z",
        "body": "It didn't help:\r\n```\r\nCMake Error at /usr/share/cmake/Modules/CMakeDetermineCUDACompiler.cmake:227 (message):\r\n  Couldn't find CUDA library root.\r\n```\r\n\n\n---\n\nAfter reinstalling the machine with the official Nvidia driver packages, the errors went away and I could compile the program. So, PEBKAC, I guess."
      },
      {
        "user": "stevestorey",
        "created_at": "2024-01-15T15:46:20Z",
        "body": "Just for anyone else who gets here prior to something being changed in the negativo17 packaging - the current workaround is to comment the line `INCLUDES += \"-I/usr/include/cuda\"` from the `/usr/bin/nvcc.profile` file after which compilation works."
      }
    ],
    "satisfaction_conditions": [
      "Resolves CUDA header/library path conflicts in non-standard installations",
      "Ensures compatibility with compiler's C++ standard library expectations",
      "Works without requiring official NVIDIA driver installation",
      "Provides configuration adjustments for build systems"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:20:13"
    }
  }
]