[
  {
    "number": 17769,
    "title": "Bybit watch_ticker() does not return values",
    "created_at": "2023-05-03T17:29:26Z",
    "closed_at": "2023-11-22T19:49:44Z",
    "labels": [
      "enhancement",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17769",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n3.0.90\n\n### Description\n\nHi,\r\n\r\nBybit watch_ticker() seems broken for spot. Works fine for perpetual swaps. \n\n### Code\n\n```\r\nimport asyncio\r\nimport ccxt.pro as ccxt\r\n\r\nbybit = ccxt.bybit()\r\nasyncio.run(bybit.watch_ticker(\"BTC/USDT\"))  # this hangs forever\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17769/comments",
    "author": "mrpouley",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-05-03T17:36:53Z",
        "body": "Hello @mrpouley,\r\nYou need to set `defaultType = spot` because bybit has conflicting ids. "
      },
      {
        "user": "mrpouley",
        "created_at": "2023-05-03T18:01:11Z",
        "body": "It works, thanks.\r\nSo it's not possible to call watch_ticker() on both spot and futures using the same exchange object, am i correct?"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-04T10:44:28Z",
        "body": "> It works, thanks. So it's not possible to call watch_ticker() on both spot and futures using the same exchange object, am i correct?\r\n\r\n@mrpouley As of now it is not possible, but we will try to fix this issue in the future"
      },
      {
        "user": "philipperemy",
        "created_at": "2023-11-22T12:29:40Z",
        "body": "It would be good if this issue could be addressed. Not being able to use bybit spot with ccxt pro is not ideal."
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-11-22T12:55:47Z",
        "body": "@philipperemy @mrpouley After the v5 migration, this should work, you should be able to do\r\n```Python\r\nawait bybit.watch_ticker('BTC/USDT')\r\nawait bybit.watch_ticker('BTC/USDT:USDT')\r\n```\r\nwith no issues as long as you have an updated version of ccxt"
      },
      {
        "user": "frosty00",
        "created_at": "2023-11-22T19:49:40Z",
        "body": "yep, ccxt 3.0 is very old..."
      },
      {
        "user": "philipperemy",
        "created_at": "2023-11-23T00:04:50Z",
        "body": "@carlosmiei so it works but the `bid` and the `ask` are equal to `None` when it comes to spot instruments.\n\n---\n\nLatest ccxt (ccxt-4.1.61)\r\n*code*\r\n```python\r\nimport asyncio\r\n\r\nimport ccxt.pro\r\n\r\nbybit = ccxt.pro.bybit()\r\nprint(asyncio.run(bybit.watch_ticker('BTC/USDT')))\r\n```\r\n\r\n*result*\r\n```\r\n{'symbol': 'BTC/USDT', 'timestamp': 1700697865426, 'datetime': '2023-11-23T00:04:25.426Z', 'high': None, 'low': 35822.01, 'bid': None, 'bidVolume': None, 'ask': None, 'askVolume': None, 'vwap': 36870.1403687674, 'open': 35829.61, 'close': 37445.77, 'last': 37445.77, 'previousClose': None, 'change': 1616.16, 'percentage': 4.51, 'average': 36637.69, 'baseVolume': 11610.147233, 'quoteVolume': 428067758.18276644, 'info': {'symbol': 'BTCUSDT', 'lastPrice': '37445.77', 'highPrice24h': '37864.94', 'lowPrice24h': '35822.01', 'prevPrice24h': '35829.61', 'volume24h': '11610.147233', 'turnover24h': '428067758.18276642', 'price24hPcnt': '0.0451', 'usdIndexPrice': '37451.710000000001'}}\r\n```\r\n\r\nAdding `{'options': {'defaultType': 'spot'}}` does nothing to it."
      }
    ],
    "satisfaction_conditions": [
      "Support simultaneous monitoring of both spot and futures markets using a single exchange instance",
      "Ensure complete ticker data (including bid/ask prices) is returned for spot markets",
      "Provide clear configuration requirements for market type differentiation",
      "Maintain compatibility with Bybit's API v5 migration requirements"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:59:33"
    }
  },
  {
    "number": 17753,
    "title": "unsupported operand type(s) for %: 'int' and 'NoneType' in watchTicker",
    "created_at": "2023-05-02T16:52:55Z",
    "closed_at": "2023-05-02T17:38:31Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17753",
    "body": "### Operating System\r\n\r\nLinux\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.78\r\n\r\n### Description\r\n\r\nThe *complete* (just fill in an api and secret) code below throws the \r\n\r\n> unsupported operand type(s) for %: 'int' and 'NoneType' \r\n\r\nerror.\r\n\r\nCould it be there's an error somewhere in the watchTicker function ?\r\n\r\nI tried with symbol = 'ETH/USDT', symbol = 'ETH/USDT:USDT' and 'ETH-USDT'\r\n\r\n### Code\r\n\r\n```\r\n#!/usr/bin/python3.8\r\nimport ccxt\r\nimport ccxt.pro as ccxtpro\r\nimport os, sys, platform, traceback\r\nimport socket, requests\r\nimport pprint\r\nimport asyncio, aiohttp\r\nimport uvloop\r\n\r\nasync def watch_ticker(exchange):\r\n    while True:\r\n        try:\r\n            symbol = 'ETH/USDT'\r\n            print (symbol)\r\n            tck = await exchange.watchTicker(symbol)\r\n            pp.pprint(tck)\r\n        except Exception as e:\r\n            print(f\"{e}\")\r\n            exc_type, exc_obj, exc_tb = sys.exc_info()\r\n            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\r\n            print(exc_type, fname, exc_tb.tb_lineno)\r\n            await exchangepro.close()\r\n\r\n######################################\r\n### MAIN PROGRAM STARTS HERE \r\nasync def main():\r\n    tasks = []\r\n\r\n    tasks.append(asyncio.create_task(watch_ticker(exchangepro)))\r\n\r\n    try:\r\n        await asyncio.gather(*tasks)\r\n\r\n    except (ccxt.RequestTimeout, ccxt.NetworkError) as e:\r\n        print(f\"Request error occurred: {e} ...\")\r\n\r\n    except Exception as e:\r\n        print(f\"{e}\")\r\n        exc_type, exc_obj, exc_tb = sys.exc_info()\r\n        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]\r\n        print(exc_type, fname, exc_tb.tb_lineno)\r\n        await exchangepro.close()\r\n\r\n########################################\r\n### WRAPPER FOR MAIN PROGRAM\r\n\r\nexchangepro = ccxtpro.binance({\r\n    'apiKey': api_key,\r\n    'secret': api_secret,\r\n    'enableRateLimit': False,\r\n})\r\n\u2002\u2002\r\nexchangepro.options = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'}\r\n\r\ntry:\r\n    if os.name.upper() != 'NT':\r\n        uvloop.install()\r\n    if os.name.upper() == 'NT':\r\n        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\r\n\r\n    asyncio.run(main(), debug=False)\r\n\r\nexcept KeyboardInterrupt:\r\n    print(\"Program interrupted by user\")\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17753/comments",
    "author": "spc789",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:10:33Z",
        "body": "Hello  @spc789 is it possible to share the complete stacktrace? \r\nAlso, do you get that error immediately? \r\n"
      },
      {
        "user": "spc789",
        "created_at": "2023-05-02T17:16:10Z",
        "body": "Error comes immediately\r\nComplete stack trace : \r\n\r\nTraceback (most recent call last):\r\n>  File \"./CCXT\", line 20, in watch_ticker\r\n>    tck = await exchange.watchTicker(symbol)\r\n>  File \"/usr/local/lib/python3.8/dist-packages/ccxt/pro/binance.py\", line 702, in watch_ticker\r\n>    url = self.urls['api']['ws'][type] + '/' + self.stream(type, messageHash)\r\n>  File \"/usr/local/lib/python3.8/dist-packages/ccxt/pro/binance.py\", line 108, in stream\r\n>    normalizedIndex = streamIndex % streamLimit\r\n>TypeError: unsupported operand type(s) for %: 'int' and 'NoneType'\r\n><class 'NameError'> selfGrid-CCXT-WS-TICKERTEST 23\r\n\r\n"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:26:14Z",
        "body": "@spc789 Ok found the issue, basically you can't do this:\r\n\r\n```Python\r\nexchangepro.options = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'}\r\n```\r\nbecause you override and delete all the other options, you should be doing this instead:\r\n\r\n```Python\r\ncustomOptions = {\r\n    'defaultType': 'future', # or 'margin' or 'spot'\r\n    'adjustForTimeDifference': True,\r\n    'newOrderRespType': 'FULL',\r\n    'defaultTimeInForce': 'GTC'\r\n}\r\n\r\nexchangepro = ccxtpro.binance({\r\n    'apiKey': os.environ['BINANCEUSDM_APIKEY'],\r\n    'secret': os.environ['BINANCEUSDM_SECRET'],\r\n    'enableRateLimit': False,\r\n    'options': customOptions\r\n})\r\n```\r\n"
      },
      {
        "user": "spc789",
        "created_at": "2023-05-02T17:31:09Z",
        "body": "Works like a charm ... obrigado senhor for the quick reply !"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-05-02T17:38:31Z",
        "body": "> Works like a charm ... obrigado senhor for the quick reply !\r\n\r\n@spc789 no problem \ud83d\ude01 let us know if anything!"
      }
    ],
    "satisfaction_conditions": [
      "Identifies why 'streamLimit' parameter becomes NoneType in the Binance WebSocket implementation",
      "Explains proper method to configure exchange options without overriding critical defaults",
      "Ensures preservation of CCXT Pro's internal WebSocket connection management parameters",
      "Demonstrates correct option merging strategy for CCXT exchange instances"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:59:59"
    }
  },
  {
    "number": 17479,
    "title": "Fetch oldest candles on BitGet, no response",
    "created_at": "2023-04-04T21:23:55Z",
    "closed_at": "2023-04-06T06:21:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17479",
    "body": "### Operating System\n\nlinux\n\n### Programming Languages\n\nJS\n\n### CCXT Version\n\n3.0.52\n\n### Description\n\nHi @carlosmiei,\r\n\r\nI'm trying to retrieve the oldest candles for a symbol on BitGet.\r\nI use a large time frame to estimate the first market time.\r\nBut no candle is returned.\r\nSee example.\r\nWork fine on Binance and ByBit.\n\n### Code\n\n```\r\n\u2002\u2002    const exchange = new ccxt['bitget']()\r\n\r\n    // big time frame\r\n    let ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1w')\r\n\r\n    let firstMonthCandle = ohlcvRawList[0]\r\n    const timeStart = firstMonthCandle[0]\r\n\r\n    const timeStartTenMonthAfter = timeStart + 60 * 60 * 24 * 30 * 10 * 1000\r\n\r\n    console.log('first month candle', firstMonthCandle)\r\n    ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1h', timeStart)\r\n    console.log(ohlcvRawList.length) // 0\r\n\r\n    // try 10 months after\r\n    ohlcvRawList = await exchange.fetchOHLCV('ETH/USDT:USDT', '1h', timeStartTenMonthAfter)\r\n    console.log(ohlcvRawList.length) // 0\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17479/comments",
    "author": "dawadam",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-05T02:30:43Z",
        "body": "Hi @dawadam \r\n\r\nAfter test, it seems you can fetch data within 30 days for 1h (the documentations said for `1m` candles)"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of BitGet's API limitations for historical candle data",
      "Clarification of valid time ranges for different candle intervals on BitGet",
      "Method to determine the earliest available timestamp for historical data",
      "Workaround for fetching older data beyond API limitations"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:00:36"
    }
  },
  {
    "number": 17170,
    "title": "watch_ohlcv function not working for Bybit exchange",
    "created_at": "2023-03-14T15:40:00Z",
    "closed_at": "2023-03-14T19:25:33Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17170",
    "body": "### Operating System\n\nWindows 11\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.8.89\n\n### Description\n\nI am trying to connect with Bybit using the watch_ohlcv function to stream live data, but it returns an array with no values. The same code works fine for Binance Exchange.\r\n\r\nOutput ---\r\n\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\r\n[[None, None, None, None, None, None]]\n\n### Code\n\n```\r\nimport asyncio\r\nimport ccxt.pro\r\n\r\n\r\nmarket = \"future\"\r\napi_key = \"api_key\"\r\napi_sec = \"api_secret\"\r\n\r\nexchange = ccxt.pro.bybit({\r\n    'enableRateLimit': True,\r\n    'options': {\r\n        'defaultType': market,\r\n        'adjustForTimeDifference': True\r\n    },\r\n    \"apiKey\" : api_key,\r\n    \"secret\" : api_sec\r\n})\r\n\r\n\r\n\r\nasync def fetch_kline():\r\n\r\n    while True:\r\n\r\n        live_feed = await exchange.watch_ohlcv(\"ETH/USDT\", \"1m\")\r\n\r\n        print(live_feed)\r\n\r\n\r\n\r\nasyncio.run(fetch_kline())\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17170/comments",
    "author": "sumitgautam0101",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-03-14T15:41:49Z",
        "body": "Hello @sumitgautam0101,\r\nDo you mind updating your ccxt version? I think this issue was fixed in the meantime."
      },
      {
        "user": "sumitgautam0101",
        "created_at": "2023-03-14T19:13:35Z",
        "body": "Thank You, it works now !! "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-03-14T19:25:33Z",
        "body": "@sumitgautam0101 nice, will close this issue then. Let us know if anything!"
      }
    ],
    "satisfaction_conditions": [
      "Solution resolves compatibility between CCXT version and Bybit's OHLCV streaming implementation",
      "Ensures watch_ohlcv returns valid numerical data instead of null values for Bybit",
      "Maintains equivalent functionality to working Binance implementation",
      "Addresses version-specific bugs in CCXT's Bybit WebSocket implementation"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:00:58"
    }
  },
  {
    "number": 16193,
    "title": "CCXT Ascendex Stopped Working (fetch_markets())",
    "created_at": "2022-12-24T18:04:51Z",
    "closed_at": "2022-12-25T01:43:32Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16193",
    "body": "Hi all.\r\n\r\nHave been using CCXT for Ascendex successfully for months.  Recently it stopped working.\r\nIt's failing in 'load_markets'.  Base currency & quote currency for some trading pair I don't even care about are both Null, this leads to a Type error during concatenation.    I would guess some bad/null data coming from the exchange, or that Null's are not being filtered/handled properly in CCXT Ascendex.\r\n\r\n- OS:  AWS EC2 (Windows)\r\n- Programming Language version:  Python 3.9 ( 3.9.5 I think)\r\n- CCXT version:  latest, 2.2.89\r\n\r\nYOUR_CODE_TO_REPRODUCE_THE_ISSUE_WITHOUT_YOUR_KEYS\r\n\r\nascendex.py, line 573, 'fetch_markets()'\r\n\r\nERROR LINE>>>symbol = base + '/' + quote \r\n \r\nFails with Type error, because base & quote are both = None.\r\nThe symbol is XMR5S/USDT, which I am not even interested in.\r\n\r\n----\r\nThe calling code is standard set up:\r\n```\r\nself.exchange_class = getattr(mod, exchange_id)\u2028\u2028\r\nself.ccxt = self.exchange_class({\u2028    'apiKey': config['apiKey'],\u2028    'secret': config['secret'],\u2028    'uid': config['uid'],\u2028    'password': config['password'],\u2028    'options': {\u2028        'defaultType': 'spot',\u2028    },\u2028    'enableRateLimit': True,\u2028})\u2028 \r\nself.ccxt.set_sandbox_mode(\u2028config['is_sandbox']\u2028)\u2028\r\n\u2028self.ccxt.load_markets()\r\n\r\n```\r\n\r\nYOUR_OUTPUT_ERROR_EXCEPTION_IN_TEXT_NO_SCREENSHOTS\r\n```\r\nNot very useful is it doesn't cast light on WHY they are None value.\r\n\"unsupported operand type(s) for +: 'NoneType' and 'str'\"\r\n```\r\n\r\nPlease advise, thank you\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16193/comments",
    "author": "SpenTappy",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-12-24T18:10:39Z",
        "body": "Hello @SpenTappy,\r\nYes, we detected this issue recently, but it should already be fixed. Can you try updating to the latest version?\r\n\r\nThanks!"
      },
      {
        "user": "SpenTappy",
        "created_at": "2022-12-24T19:15:43Z",
        "body": "Thanks so much for quick response.  Turns out my 'latest' version wasn't as latest as I thought it was..\r\nConfirmed this is running well in `ccxt     2.4.55`\r\nHappy holidays."
      }
    ],
    "satisfaction_conditions": [
      "Resolves the NoneType error in symbol concatenation during market loading",
      "Handles invalid market data from Ascendex exchange",
      "Maintains compatibility with existing CCXT initialization patterns",
      "Requires no manual filtering of unwanted trading pairs"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:02:54"
    }
  },
  {
    "number": 9880,
    "title": "Python ratelimiter broken",
    "created_at": "2021-08-26T09:34:50Z",
    "closed_at": "2021-08-26T09:48:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9880",
    "body": "The python rateLimiter is broken in the newest version.\r\nI tested this on python 3.7 and 3.8 (Debian and CentOS)\r\n\r\nThe following snippet should return, but it is stuck after the first loop.\r\n\r\n```\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await exchange1.throttle(exchange1.rateLimit)\r\n        await exchange2.throttle(exchange2.rateLimit)\r\n        print(\"Round done\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9880/comments",
    "author": "brandsimon",
    "comments": [
      {
        "user": "brandsimon",
        "created_at": "2021-08-26T09:40:38Z",
        "body": "The snippet works for binance, so I changed the rateLimit to 50 (binance has 50, hitbtc 1500).\r\nThis works, but instead of waiting 50ms, it waits 5 seconds."
      },
      {
        "user": "frosty00",
        "created_at": "2021-08-26T09:44:24Z",
        "body": "@brandsimon the usage is wrong it should be:\r\n\r\n```\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await exchange1.throttle(1)\r\n        await exchange2.throttle(1)\r\n        print(\"Round done\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```\n\n---\n\nthe argument exchange.rateLimit is deprecated now we have dynamic costs for calls in binance.js"
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T09:48:10Z",
        "body": "@brandsimon the new version of `throttle()` accepts the call `cost` instead of `rateLimit`.\n\n---\n\n```Python\r\nimport asyncio\r\nimport ccxt.async_support\r\n\r\nasync def main():\r\n    exchange1 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    exchange2 = ccxt.async_support.hitbtc({\"enableRateLimit\": True})\r\n    for i in range(0, 20):\r\n        await asyncio.gather(*[\r\n            exchange1.throttle(1),\r\n            exchange2.throttle(1),\r\n        ])\r\n        print(\"Round done\")\r\n\r\nif __name__ == \"__main__\":\r\n    asyncio.run(main())\r\n```\r\nThis snippet prints a line every 1.5 sec, according to hitbtc's rate limit setting."
      },
      {
        "user": "brandsimon",
        "created_at": "2021-08-26T10:06:44Z",
        "body": "@kroitor @frosty00 \r\nThank you very much, this solves my issue.\r\nSo the CCXT `rateLimit` and `enableRateLimit` behavior stays the same, it is just the throttle API which changed?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-08-26T10:07:35Z",
        "body": "@brandsimon yes, moreover, enableRateLimit is true by default now."
      },
      {
        "user": "brandsimon",
        "created_at": "2021-08-26T10:12:01Z",
        "body": "Great, thank you :)"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of API changes in throttle() method parameters",
      "Proper async execution pattern for multiple rate-limited exchanges",
      "Clarification of default rate-limiting behavior in new versions",
      "Demonstration of correct rate limit timing calculation"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:08:27"
    }
  },
  {
    "number": 8492,
    "title": "pip install ccxt failed => error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1",
    "created_at": "2021-02-20T21:55:11Z",
    "closed_at": "2021-02-20T22:20:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8492",
    "body": "I tried to install ccxt on Ubuntu 20.10 (GNU/Linux 5.8.0-1013-raspi armv7l) and go this error:\r\n\r\n```\r\nERROR: Command errored out with exit status 1:\r\n     command: /usr/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-wptrvtsv/pycares/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-wptrvtsv/pycares/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-pip-egg-info-6eg7h048\r\n         cwd: /tmp/pip-install-wptrvtsv/pycares/\r\n    Complete output (73 lines):\r\n      ERROR: Command errored out with exit status 1:\r\n       command: /usr/bin/python3 -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-wheel-9vn7c6c_/cffi/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-wheel-9vn7c6c_/cffi/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' bdist_wheel -d /tmp/pip-wheel-iv1tnu4e\r\n           cwd: /tmp/pip-wheel-9vn7c6c_/cffi/\r\n      Complete output (36 lines):\r\n      running bdist_wheel\r\n      running build\r\n      running build_py\r\n      creating build\r\n      creating build/lib.linux-armv7l-3.8\r\n      creating build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/backend_ctypes.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/recompiler.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/cparser.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/ffiplatform.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/model.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/vengine_gen.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/error.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/verifier.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/lock.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/api.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/cffi_opcode.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/__init__.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/setuptools_ext.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/vengine_cpy.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/commontypes.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/pkgconfig.py -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_cffi_include.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/parse_c_type.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_embedding.h -> build/lib.linux-armv7l-3.8/cffi\r\n      copying cffi/_cffi_errors.h -> build/lib.linux-armv7l-3.8/cffi\r\n      running build_ext\r\n      building '_cffi_backend' extension\r\n      creating build/temp.linux-armv7l-3.8\r\n      creating build/temp.linux-armv7l-3.8/c\r\n      arm-linux-gnueabihf-gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DUSE__THREAD -DHAVE_SYNC_SYNCHRONIZE -I/usr/include/ffi -I/usr/include/libffi -I/usr/include/python3.8 -c c/_cffi_backend.c -o build/temp.linux-armv7l-3.8/c/_cffi_backend.o\r\n      c/_cffi_backend.c:15:10: fatal error: ffi.h: No such file or directory\r\n         15 | #include <ffi.h>\r\n            |          ^~~~~~~\r\n      compilation terminated.\r\n      error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1\r\n      ----------------------------------------\r\n      ERROR: Failed building wheel for cffi\r\n    ERROR: Failed to build one or more wheels\r\n    Traceback (most recent call last):\r\n      File \"/usr/lib/python3/dist-packages/setuptools/installer.py\", line 128, in fetch_build_egg\r\n        subprocess.check_call(cmd)\r\n      File \"/usr/lib/python3.8/subprocess.py\", line 364, in check_call\r\n        raise CalledProcessError(retcode, cmd)\r\n    subprocess.CalledProcessError: Command '['/usr/bin/python3', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmpja9grf0o', '--quiet', 'cffi>=1.5.0']' returned non-zero exit status 1.\r\n    \r\n    The above exception was the direct cause of the following exception:\r\n    \r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/tmp/pip-install-wptrvtsv/pycares/setup.py\", line 15, in <module>\r\n        setup(name             = 'pycares',\r\n      File \"/usr/lib/python3/dist-packages/setuptools/__init__.py\", line 162, in setup\r\n        _install_setup_requires(attrs)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/__init__.py\", line 157, in _install_setup_requires\r\n        dist.fetch_build_eggs(dist.setup_requires)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/dist.py\", line 699, in fetch_build_eggs\r\n        resolved_dists = pkg_resources.working_set.resolve(\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 779, in resolve\r\n        dist = best[req.key] = env.best_match(\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 1064, in best_match\r\n        return self.obtain(req, installer)\r\n      File \"/usr/lib/python3/dist-packages/pkg_resources/__init__.py\", line 1076, in obtain\r\n        return installer(requirement)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/dist.py\", line 758, in fetch_build_egg\r\n        return fetch_build_egg(self, req)\r\n      File \"/usr/lib/python3/dist-packages/setuptools/installer.py\", line 130, in fetch_build_egg\r\n        raise DistutilsError(str(e)) from e\r\n    distutils.errors.DistutilsError: Command '['/usr/bin/python3', '-m', 'pip', '--disable-pip-version-check', 'wheel', '--no-deps', '-w', '/tmp/tmpja9grf0o', '--quiet', 'cffi>=1.5.0']' returned non-zero exit status 1.\r\n    ----------------------------------------\r\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8492/comments",
    "author": "theMoe",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-02-20T21:58:45Z",
        "body": "Try `apt install libffi-dev` or `sudo apt install libffi-dev` and then retry to install ccxt."
      }
    ],
    "satisfaction_conditions": [
      "Resolve missing ffi.h header file dependency",
      "Identify system package dependencies for Python cryptography modules",
      "Provide working Python package installation path"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:10:05"
    }
  },
  {
    "number": 8366,
    "title": "Missing symbols on Binance",
    "created_at": "2021-01-29T17:10:43Z",
    "closed_at": "2021-01-29T17:38:52Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8366",
    "body": "Hi there,\r\nthere seems to be missing symbols on Binance, specifically running `[s for s in exchange.symbols if 'BTC' in s]` in python returns only `['BTC/BUSD', 'BTC/USDT']`. The same holds for `[s for s in exchange.markets.keys() if 'BTC' in s]`. Other exchanges seem to be ok.\r\n\r\nccxt version: 1.41.19\r\npython: 3.8.7\r\nos: win 10",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8366/comments",
    "author": "LukasUlrych",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:19:25Z",
        "body": "@LukasUlrych hi! Which specific market/symbol is missing?"
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:28:52Z",
        "body": "Well, `ADA/BTC`, `ETH/BTC`, `LTC/BTC` etc., pretty much any altcoin vs. BTC. I can see only USDT or BUSD pairs.\n\n---\n\n@kroitor I am not sure whether this is only local issue or not. I tried going back to version 1.41.10 and the symbols are all there. I noticed this after update today."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:31:09Z",
        "body": "@LukasUlrych always use the most recent version and make sure it's the most recent number by printing it in runtime (don't trust the pip output). Let me know if this does not help:\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'spot'},  # spot is the default\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'future'},\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n```Python\r\nimport ccxt\r\nfrom pprint import pprint\r\nprint('CCXT Version:', ccxt.__version__)\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True,\r\n    'options': {'defaultType':'delivery'},\r\n})\r\nmarkets = exchange.load_markets()\r\npprint(exchange.symbols)\r\n```\r\n\r\n"
      },
      {
        "user": "LukasUlrych",
        "created_at": "2021-01-29T17:37:05Z",
        "body": "@kroitor Thank you, it helped! The issue seems to be that running just \r\n```\r\nexchange = ccxt.binance({\r\n    'enableRateLimit': True\r\n})\r\n```\r\ndefaults to defaultType = 'future' not defaultType = 'spot'."
      },
      {
        "user": "kroitor",
        "created_at": "2021-01-29T17:37:59Z",
        "body": "@LukasUlrych ah, i see, hold on, will fix that in 1.41.20."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how Binance market type configuration affects symbol availability",
      "Clarification of CCXT's default exchange configuration behavior",
      "Guidance on troubleshooting missing symbols across CCXT versions"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:10:35"
    }
  },
  {
    "number": 2044,
    "title": "Binance receiving error code -2015 while using API keys",
    "created_at": "2018-02-25T09:09:25Z",
    "closed_at": "2018-02-25T13:36:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2044",
    "body": "Hi,\r\n \r\nI have created a new Binance account and set its API keys (read info, enable trading, IP access unrestricted).\r\nWhile trying to connect to my account programmaticly using CCXT, I get the following authorization error: `ccxt.base.errors.ExchangeError: binance: unknown error code: {\"code\":-2015,\"msg\":\"Invalid API-key, IP, or permissions for action.\"}`\r\nOS: Ubuntu 16 (happens on windows as well)\r\nProgramming language: Python 3.5 \r\nCCXT version: 1.10.1178\r\n\r\nWhen using `python-binance` library, I successfully connect to my account.\r\n\r\nThe code I use:\r\n```\r\nfrom binance.client import Client\r\nimport json\r\nimport ccxt\r\n\r\ndata = json.load(open('binance_auth.json'))\r\n\r\nclient = Client(\r\n    data['secret'],\r\n    data['key'])\r\n\r\napi = {\r\n                'apiKey': data['key'],\r\n                'secret': data['secret'],\r\n                'password': None,\r\n      }\r\nccxtBinance = ccxt.binance(api)\r\n\r\nprint(\"python-binance=\", client.get_account()) # succeeds\r\nprint (\"ccxt=\",ccxtBinance.fetchBalance())     # fails\r\n```\r\n\r\nThanks,\r\nLena",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2044/comments",
    "author": "lenak25",
    "comments": [
      {
        "user": "mkutny",
        "created_at": "2018-02-25T09:58:51Z",
        "body": "Try the following:\r\n\r\n```javascript\r\napi = {\r\n                'apiKey': data['secret'],\r\n                'secret': data['key'],\r\n      }\r\n```\r\n"
      },
      {
        "user": "lenak25",
        "created_at": "2018-02-25T11:22:44Z",
        "body": "Thanks @mkutny, it works for this account.\r\nI have another Binance account (which was opened a while ago) and I had no problems to connect to it with my original code. Any reason why for some accounts the API key and secret should be swapped, while for others not? Will there be a common solution for all?\r\nThanks,\r\nLena  "
      },
      {
        "user": "mkutny",
        "created_at": "2018-02-25T12:56:06Z",
        "body": "> Any reason why for some accounts the API key and secret should be swapped, while for others not?\r\n\r\nThey should NEVER be swapped. You just happened to mix them in your `binance_auth.json`.\r\n\r\n> I have another Binance account (which was opened a while ago) and I had no problems to connect to it with my original code.\r\n\r\nYour `python-binance` won't work with that pair."
      },
      {
        "user": "lenak25",
        "created_at": "2018-02-25T13:36:59Z",
        "body": "You are correct, my mistake.\r\nThanks, closing this."
      }
    ],
    "satisfaction_conditions": [
      "Identifies root cause of API key/secret mismatch between CCXT and python-binance implementations",
      "Ensures API credentials are validated as correctly assigned (key vs secret)",
      "Provides solution that works consistently across multiple Binance accounts",
      "Explains error code -2015 in context of CCXT's implementation specifics"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:19:48"
    }
  },
  {
    "number": 1733,
    "title": "[Bug] Bittrex OHLCV not realtime?",
    "created_at": "2018-02-02T14:56:43Z",
    "closed_at": "2018-02-02T15:02:15Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/1733",
    "body": "Here's how I'm doing the OHLCV requests:\r\n```\r\n  new ccxt[exchange]().fetchOHLCV(\r\n    'ETH/BTC\", \r\n    '1m',\r\n    undefined\r\n  )\r\n\r\n```\r\n\r\nAnd, here's the output for 3 exchange (binance, bittrex, okex):\r\n```\r\nokex:\r\nFri Feb 02 2018 21:52:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n\r\nbinance\r\n Fri Feb 02 2018 21:52:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n\r\nbittrex\r\nFri Feb 02 2018 21:49:00 GMT+0700 (+07) (printCurrent @ index.mjs:32)\r\n```\r\n\r\nNotice how bittrex is lagging? I kept on running the script for a while, and bittrex OHLCV was consistently 3-4 min lagging behind.\r\nIs this a bug in my code, or a bug in the library?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/1733/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2018-02-02T15:02:15Z",
        "body": "> Is this a bug in my code, or a bug in the library?\r\n\r\nThis is neither a bug in your code, nor a bug in the library. It's just how Bittrex works, and you can enable verbose mode (pass the `{'verbose': True}` to the constructor params), and check their URLs and reported values yourself. Bittrex does not have an official OHLCV API endpoint at all, and we use their undocumented v2.0 endpoint for that. Hope it answers your question. Thx!"
      },
      {
        "user": "ghost",
        "created_at": "2018-02-02T17:54:43Z",
        "body": "Wow! I checked their own website, and I get the same 'delay' on their own charts. That's really not a good thing at all, but that's beyoud the scope of this library.\r\nYour answer makes total sense. Thx a lot!"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of whether the observed delay originates from the user's code, the library, or the exchange's API limitations",
      "Confirmation that the observed behavior matches the exchange's native API output",
      "Guidance for independent verification of raw exchange data"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 01:20:27"
    }
  }
]