[
  {
    "number": 7156,
    "title": "mitmproxy user in Docker container assigned UID/GID 0 by default",
    "created_at": "2024-09-03T17:03:47Z",
    "closed_at": "2024-09-17T11:11:07Z",
    "labels": [
      "kind/feature",
      "help wanted",
      "os/linux"
    ],
    "url": "https://github.com/mitmproxy/mitmproxy/issues/7156",
    "body": "#### Problem Description\r\nBy default, the `mitmproxy` process and user run as UID/GID 0. This seems unintentional and like an implementation artifact.\r\n\r\n#### Steps to reproduce the behavior:\r\n1. `docker run --rm -it --entrypoint /bin/bash mitmproxy/mitmproxy -c \"ls -la /home/mitmproxy\"`\r\n3. Observe that `.mitmproxy` is owned by `root:root`\r\n4. Observe that the entrypoint changes the UID/GID of `mitmproxy` to the UID/GID of this directory\r\n\r\n#### Note\r\nThis is caused by the `VOLUME` declaration in the Dockerfile - it creates the directory with the current `USER` which is `root`. Subsequently chowning it to `mitmproxy` would fix this.\r\n\r\n#### System Information\r\nMitmproxy: 10.4.2\r\nPython:    3.11.9\r\nOpenSSL:   OpenSSL 3.3.1 4 Jun 2024\r\nPlatform:  Linux-6.10.0-linuxkit-aarch64-with-glibc2.31",
    "comments_url": "https://api.github.com/repos/mitmproxy/mitmproxy/issues/7156/comments",
    "author": "dr-yd",
    "comments": [
      {
        "user": "mhils",
        "created_at": "2024-09-04T12:43:40Z",
        "body": "Thanks for pointing this out! Would you mind sending a PR with a fix? \ud83d\ude03 "
      },
      {
        "user": "dr-yd",
        "created_at": "2024-09-17T11:13:28Z",
        "body": "Oh, sorry for the lack of feedback, looks like the previous notification passed by me. Thanks @jasonstultz for making the change!"
      }
    ],
    "satisfaction_conditions": [
      "Ensure mitmproxy Docker container runs with non-root UID/GID by default",
      "Persist configuration directory ownership correctly for the mitmproxy user",
      "Implement automatic permission handling during container initialization",
      "Follow Docker security best practices for user context isolation"
    ],
    "_classification": {
      "category": "Can be dockerized without any issue",
      "timestamp": "2025-04-05 00:32:20"
    }
  }
]