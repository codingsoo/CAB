[
  {
    "number": 22447,
    "title": "Cancelling orders does not work on OKX",
    "created_at": "2024-05-09T14:17:59Z",
    "closed_at": "2024-05-10T11:49:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/22447",
    "body": "### Operating System\r\n\r\nMac OS Sonoma 14.1.1\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.3.18\r\n\r\n### Description\r\n\r\nUsing the test code to open and cancel an order, it leaves an order uncancelled. Thank you for your help ahead of time.\r\n\r\n### Code\r\n\r\n```\r\n\u2002\u2002\r\ndef close_positions():\r\n    # Fetch open orders\r\n    open_orders = exchange.fetch_open_orders()\r\n\r\n    # Cancel all open orders\r\n    for order in open_orders:\r\n        exchange.cancel_order(order['id'], order['symbol'])\r\n\r\n\r\ndef test_orders():\r\n    order = exchange.create_order(symbol= symbol, type = \"market\", side = \"buy\", amount=10.0)\r\n    time.sleep(10)\r\n    #exchange.cancel_order(order['id'], symbol)\r\n    close_positions()\r\n    print(\"test complete\")\r\n\r\ntest_orders()\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/22447/comments",
    "author": "MrMechanical",
    "comments": [
      {
        "user": "MrMechanical",
        "created_at": "2024-05-09T14:32:05Z",
        "body": "after debugging I believe the issue is with fetch_open_orders as open_orders is empty during testing\r\nopen_orders\r\n[]"
      },
      {
        "user": "sc0Vu",
        "created_at": "2024-05-10T05:23:21Z",
        "body": "@MrMechanical because the order type is market, and it would be matched when you create. You can use `fetchClosedOrders` instead."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why market orders don't appear in open orders",
      "Clarification on order lifecycle differences between order types",
      "Guidance on proper order status verification methods",
      "Differentiation between cancellable and non-cancellable order states"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:54:55"
    }
  },
  {
    "number": 19666,
    "title": "Bitmex fetch positions doesn't show information anymore",
    "created_at": "2023-10-25T13:07:11Z",
    "closed_at": "2023-10-25T14:02:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19666",
    "body": "### Operating System\n\nWindows 10\n\n### Programming Languages\n\nPython\n\n### CCXT Version\n\n4.1.20\n\n### Description\n\nHello,\r\n\r\nsuddenly, probably after ccxt update I get no Information from \r\n\r\nBitmex.fetch.positions anymore. \r\n\r\nOutput is --> []  None\r\n\r\nWas there any change on ccxt for Bitmex or is it a bug? \r\n\r\nMy account was liquidated because of this problem. Luckily it was just play money :-)... \r\n\r\n\n\n### Code\n\n```\r\nbitmex = ccxt.bitmex({'enableRateLimit': True,\r\n                       'apiKey': bitmexconfig.api_key,\r\n                       'secret': bitmexconfig.api_secret,})\r\n\r\n\r\nsymbol = 'XBTUSD'\r\nparams={\"type\":\"swap\",\"code\":\"XBT\"}\r\n\r\nbitmex_pos = bitmex.fetch_positions([symbol], params)\r\nprint(bitmex_pos)\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19666/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-25T13:46:00Z",
        "body": "Hello @Nitrix321,\r\n\r\nRecently we just improved the filtering because if you called `fetch_positions([A,B,C])` it would return all the positions regardless of the symbols provided. The filtering might not be working correctly with exchange-specific ids and I will fix it ASAP but in the meantime, you can either not provide any symbol or provide the unified one (BTC/USD:BTC)\r\n\r\nExample:\r\n```Python\r\npos = bitmex.fetch_positions(params = params)\r\n# or\r\npos = bitmex.fetch_positions(['BTC/USD:BTC'] ,params = params)\r\n```\r\n\n\n---\n\n@Nitrix321 Sorry I think what I said is wrong, exchange-specific symbols are also working,  but due to the filtering it will only return positions from the symbols in the symbols array, so I would suggest calling `fetch_positions` without any argument. "
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-10-25T14:02:36Z",
        "body": "hi @carlosmiei thanks, its working now without any argument as you said. I already tried without symbol or only symbol and no param but without any argument I was not thinking about that...  "
      }
    ],
    "satisfaction_conditions": [
      "Ensures fetch_positions() returns valid position data for Bitmex after CCXT update",
      "Explains correct parameter usage for fetch_positions() in latest CCXT version",
      "Addresses compatibility between symbol formats and CCXT's filtering logic",
      "Provides workaround for immediate use while maintaining forward compatibility"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:56:26"
    }
  },
  {
    "number": 19588,
    "title": "Bybit: Invalid Order, reduce-only rule not satisfied",
    "created_at": "2023-10-16T14:21:26Z",
    "closed_at": "2023-10-17T09:28:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19588",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.1.13\r\n\r\n### Description\r\n\r\nIf in a long position, and try to make limit sell order.\r\nThe limit order has been placed but the following error message occurs.\r\n\r\nInvalidOrder: bybit {\"retCode\":110017,\"retMsg\":\"Reduce-only rule not satisfied\",\"result\":{},\"retExtInfo\":{},\"time\":1697464683996}\r\n\r\n### Code\r\n\r\n```python\r\nsymbol = 'ETH/USDT:USDT'\r\n\r\nexitprice = 1650  # --> as example\r\n\r\n# if I create params without 'reduce_only': True entry the same issue occurs \r\n\r\nparams={'reduce_only': True,        \r\n            'close_on_trigger': True,}\r\n\r\npos_size = 0.35\r\n\r\nbybit.create_limit_sell_order(symbol, pos_size, exitprice, params=params)\r\n\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19588/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-10-16T16:31:25Z",
        "body": "Hello @Nitrix321,\r\n`reduce_only` (snake_case) is not the correct format, you should always use the camelCase version `reduceOnly`.\r\n\r\nCan you try that?"
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-10-17T09:28:38Z",
        "body": "Hi @carlosmiei, thank you.  It's working now but it was another issue, it was not the wrong format. But I will use the format version you recommend in future. \r\n\r\nThanks again. "
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-10-17T09:38:00Z",
        "body": "@Nitrix321 now, after the V5 migration, the snake_case version is not supported (it was previously but not anymore) so I highly recommend sticking to the camelCase one \ud83d\ude42 "
      }
    ],
    "satisfaction_conditions": [
      "Correct parameter naming convention for Bybit API V5",
      "Compatibility with Bybit's reduce-only order rules",
      "Clear documentation of API parameter requirements"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:57:01"
    }
  },
  {
    "number": 19177,
    "title": "symbol BTC/FDUSD leverage not working",
    "created_at": "2023-09-11T09:13:01Z",
    "closed_at": "2023-09-12T06:10:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/19177",
    "body": "### Operating System\r\n\r\nWindows11\r\n\r\n### Programming Languages\r\n\r\nPython\r\n\r\n### CCXT Version\r\n\r\n4.0.78\r\n\r\n### Description\r\n\r\nHi, \r\n\r\nWe are working on binance BTC/FDUSD symbol trading with leverage. \r\nThis symbol is working totally fine without leveraging (e.g. binance.fetch_ticker, binance.create_market_buy_order), while when calling binance.markets[ 'BTC/FDUSD' ], the return leverage limit is None.\r\n\r\nWe've checked that the return of leverage with binance.markets[ 'BTC/USDT' ] is working while binance.markets[ 'BTC/FDUSD' ] and binance.markets[ 'FDUSD/BTC' ] are not (returns None), also binance.fapiPrivate_post_leverage is not working with 'FDUSD' symbols.\r\n\r\nWe've also confirmed with binance support that 'FDUSD' symbols endpoints are fine on binance side, so we suppose the issue is on the ccxt tool, thanks.\r\n\r\n### Code\r\n\r\n```\r\nsymbol = 'BTC/FDUSD'\r\nself.binance = ccxt.binance({ })\r\n\r\nresult = float(self.binance.fetch_ticker(symbol)['bid']) # Works\r\norder = self.binance.create_market_buy_order(symbol, amount) # Works\r\norder = self.binance.create_market_sell_order(symbol, amount) # Works\r\n\r\nself.binance.load_markets()\r\nmarket = self.binance.markets[ symbol ]  # returns None in leverage limit\r\nself.binance.fapiPrivate_post_leverage(symbol) # Not working\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/19177/comments",
    "author": "cO-Oe",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-09-11T10:57:19Z",
        "body": "Hello @cO-Oe,\r\n\r\nThe main issue is that you're calling a derivatives endpoint (fapiPrivate_post_leverage) using a spot symbol. "
      },
      {
        "user": "cO-Oe",
        "created_at": "2023-09-12T06:10:38Z",
        "body": "Hi @carlosmiei, \r\n\r\nAppreciated! We've switched to margin trading for spot symbols and worked as what we would liked to, thanks!"
      }
    ],
    "satisfaction_conditions": [
      "Clarification of endpoint types (spot vs. derivatives vs. margin)",
      "Explanation of CCXT's market type configuration requirements",
      "Differentiation between spot symbols and derivatives contracts in CCXT",
      "Documentation of margin trading requirements for FDUSD pairs"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:57:34"
    }
  },
  {
    "number": 18857,
    "title": "Bybit stop limit orders cannot be canceled",
    "created_at": "2023-08-11T09:05:59Z",
    "closed_at": "2023-08-11T14:12:04Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/18857",
    "body": "### Operating System\n\nWindows\n\n### Programming Languages\n\nJavaScript\n\n### CCXT Version\n\n4.0.57\n\n### Description\n\nWhen placing stop loss orders, using the CCXT unified method, on Bybit spot market (using a Unified Bybit account), it is not possible to cancel those orders. As an example, this is what I did:\r\n\r\n`await exchange.createOrder('BTC/USDT', 'limit', 'sell', 0.001, 28500, { stopLossPrice: 29000 });`\r\n\r\nWhen using `exchange.cancelAllOrders('BTC/USDT')`, the order is not canceled. No exception is thrown, but I still see the open order on the exchange.\r\n\r\nWhen using `exchange.cancelOrder(<id>, 'BTC/USDT')`, using the id that is returned when creating the order, does not work either. In that case I get the following exception:\r\n\r\nOrderNotFound: bybit {\"retCode\":170213,\"retMsg\":\"Order does not exist.\",\"result\":{},\"retExtInfo\":{},\"time\":1691743905604}\r\n    at bybit.throwExactlyMatchedException (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:3087:19)\r\n    at bybit.handleErrors (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:9161:18)\r\n    at C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:766:51\r\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\r\n    at async bybit.fetch2 (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:2666:16)\r\n    at async bybit.request (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\base\\Exchange.js:2669:16)\r\n    at async bybit.cancelUnifiedAccountOrder (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:4690:26)\r\n    at async bybit.cancelOrder (C:\\code\\crypto-coding-course\\code\\cc-bot\\node_modules\\ccxt\\dist\\cjs\\src\\bybit.js:4874:20)\r\n\r\n\r\nAm I doing something wrong, or is this a bug?\n\n### Code\n\n```\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/18857/comments",
    "author": "hodlerhacks",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T13:36:07Z",
        "body": "Hello @hodlerhacks,\r\nHave you tried to provide `stop:true` inside `params`? \r\n\r\nExample:\r\n```Python\r\nexchange.cancelAllOrders('BTC/USDT', {'stop': true})\r\n```\r\n"
      },
      {
        "user": "hodlerhacks",
        "created_at": "2023-08-11T13:48:25Z",
        "body": "Oh wow, that solves it indeed, thanks! :-)\r\n\r\nI couldn't find this in the documentation. What exactly does this parameter do? When should I use it? Is it Bybit-specific and/or can I safely use that with other exchanges as well? (I'm developing an application that works with many different exchanges, and I'm trying to keep the code as generic as possible, hence the question.)"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T13:57:32Z",
        "body": "> I couldn't find this in the documentation. What exactly does this parameter do? When should I use it? Is it Bybit-specific and/or can I safely use that with other exchanges as well? (I'm developing an application that works with many different exchanges, and I'm trying to keep the code as generic as possible, hence the question.)\r\n\r\n@hodlerhacks Some exchanges have different endpoints to handle stop/trigger orders, so the `stop` parameter tells ccxt to use that endpoint instead, and yes it is unified across exchanges so you should be able to use it with other exchanges as well.\r\n\r\nAdditionally, we will try to improve our documentation, thanks for letting us know. \r\n\r\n"
      },
      {
        "user": "hodlerhacks",
        "created_at": "2023-08-11T13:59:43Z",
        "body": "Thanks for clarifying and your quick response, appreciate it!"
      },
      {
        "user": "carlosmiei",
        "created_at": "2023-08-11T14:12:04Z",
        "body": "@hodlerhacks no problem, feel free to reach out any time."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how CCXT handles stop/trigger order cancellation across exchanges",
      "Clarification on when to use exchange-specific parameters vs unified methods",
      "Identification of required parameters for interacting with stop orders in CCXT",
      "Documentation of endpoint differences for order types across exchanges",
      "Guidance on maintaining exchange-agnostic code while handling special cases"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 00:58:06"
    }
  },
  {
    "number": 17514,
    "title": "Opening stop loss and take profit orders on Bybit",
    "created_at": "2023-04-09T10:11:46Z",
    "closed_at": "2023-05-06T10:33:12Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/17514",
    "body": "### Operating System\r\n\r\nWindows 10\r\n\r\n### Programming Languages\r\n\r\npython\r\n\r\n### CCXT Version\r\n\r\n3.0.9\r\n\r\n### Description\r\n\r\nI'm trying to create a stop loss and take profit for my order on bybit with ccxt.\r\n\r\n\r\n\r\n### Code\r\n\r\nI've tried the following:\r\n(1)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopLoss' : stop_loss,\r\n            'takeProfit' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n(2)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopLossPrice' : stop_loss,\r\n            'takeProfitPrice' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n(3)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stop_loss' : stop_loss,\r\n            'take_profit' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\n\r\n\r\n(4)\r\n```\r\n        side = direction\r\n        order_type = 'market'\r\n        entry_price = last_price\r\n        size = 1\r\n        params = {\r\n            'leverage': 1,\r\n            'marginMode': 'cross',\r\n            'stopPrice' : stop_loss,\r\n            'triggerPrice' : take_profit\r\n        }\r\n\r\n        order = exchange.create_order(symbol, order_type, side, size, entry_price, params)\r\n```\r\n\r\nI'm either getting the following error:\r\n```\r\nError: bybit {\"retCode\":10001,\"retMsg\":\"Request parameter error.\",\"result\":{},\"retExtInfo\":{},\"time\":1681034354617}\r\n```\r\n\r\nOr it opens a limit order for the stop loss and it ignores the take profit limit order and market order.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/17514/comments",
    "author": "ambiflextrous",
    "comments": [
      {
        "user": "sc0Vu",
        "created_at": "2023-04-10T04:48:10Z",
        "body": "Hi @weslienlive\r\n\r\nThe bug was incorrect data type of stopLoss/takeProfit (should be string). We already fixed last week. Please update ccxt. Let me know if you have any other issues."
      },
      {
        "user": "ambiflextrous",
        "created_at": "2023-04-10T07:18:34Z",
        "body": "Thank you, it works now.  Got another question, why when I set the leverage to 1 in the exchange it's 10?"
      }
    ],
    "satisfaction_conditions": [
      "Correct parameter format specification for stopLoss/takeProfit in CCXT for Bybit",
      "Proper handling of leverage parameter synchronization between CCXT and Bybit",
      "Clear documentation of Bybit-specific parameter requirements through CCXT"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:00:23"
    }
  },
  {
    "number": 16898,
    "title": "Kucoinfutures fetch open orders shows no data anymore",
    "created_at": "2023-02-19T15:55:05Z",
    "closed_at": "2023-02-20T13:10:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16898",
    "body": "### \u061c\n\nOS: Windows 10\r\nProgramming Language version: Python\r\nCCXT version: 2.8.16\r\n\r\n\r\nHello, \r\n\r\nsince a few days kucoinfutures doesn't show any data if I try to fetch open orders when STOP ORDER is placed. Issue occurs at linear and inverse contracts.   If a limit order above price is placed it works. \r\nAlso here I didn't change anything, it has worked fine for months now, but suddenly it doesn't work anymore. \r\n\r\n\r\nkucoin = ccxt.kucoinfutures({'enableRateLimit': True,\r\n                       'apiKey': kucoinconfig.api_key,\r\n                       'secret': kucoinconfig.api_secret,\r\n                       'password' : 'xxxxxxxxxxx',})\r\n\r\nsymbol = 'ETH/USDT:USDT'\r\npos_size = 1\r\n\r\norders = kucoin.fetch_open_orders(symbol)\r\n        print(orders)\r\n\r\nOutput is this --> []\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16898/comments",
    "author": "Nitrix321",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-02-20T09:58:19Z",
        "body": "Hello @Nitrix321,\r\n\r\nIf you want to fetch open `stop` orders you should provide `stop:True` inside `params`.\r\nExample:\r\n```\r\nparams = {\r\n   'stop': True\r\n}\r\nstop_open_orders = kucoin.fetch_open_orders(symbol, params=params)\r\n```\r\n\r\n"
      },
      {
        "user": "Nitrix321",
        "created_at": "2023-02-20T13:10:32Z",
        "body": "Hi @carlosmiei,\r\nyou are right, now it's working. I could have sworn it worked all along. \r\nBut ok, now it is.\r\n\r\nThank you again :-)"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to retrieve stop orders specifically when fetching open orders",
      "Clarification on filtering mechanisms for different order types (stop vs limit)",
      "Documentation of required API parameters for specialized order queries"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:01:47"
    }
  },
  {
    "number": 16650,
    "title": "python async speed slower",
    "created_at": "2023-01-27T07:36:29Z",
    "closed_at": "2023-01-27T18:00:35Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/16650",
    "body": "### Operating System\n\nubuntu\n\n### Programming Languages\n\npython\n\n### CCXT Version\n\n2.6.94\n\n### Description\n\nWhile I was trying to migrate my code to async I noticed that my execution was slower.\r\n\r\nI wrote a small code to compare the async vs sync speed. \r\n\r\nAverage execution time of both is written below in seconds in one of my test runs. On average async takes rougly 2x longer . Similar results when tested in other methods such as \"fetch_tickers\".\r\n\r\nasync mean: 1.1664345026016236\r\nsync mean: 0.5469205617904663\n\n### Code\n\n```\r\nimport asyncio\r\nimport time\r\n\r\nimport ccxt.async_support as ccxta  \r\nimport ccxt\r\nimport os\r\nfrom dotenv import load_dotenv\r\nload_dotenv()\r\n\r\nbinance_keys = {\r\n        \"apikey\" : os.getenv(\"BINANCE_APIKEY\"),\r\n        \"secret\" : os.getenv(\"BINANCE_SECRET\")\r\n    }\r\n\r\nasync def get_balance_async(exchange):\r\n    balance = await exchange.fetch_balance()\r\n    await exchange.close()\r\n    return balance\r\n\r\nexchange_async = ccxta.binance({\r\n        'apiKey': binance_keys[\"apikey\"],\r\n        'secret': binance_keys[\"secret\"],\r\n    })\r\n\r\nexchange_sync = ccxt.binance({\r\n        'apiKey': binance_keys[\"apikey\"],\r\n        'secret': binance_keys[\"secret\"],\r\n    })\r\n\r\ntime_sync = []\r\ntime_async = []\r\n\r\nloop = asyncio.get_event_loop()\r\nfor i in range(10):\r\n\r\n    start = time.time()\r\n    loop.run_until_complete(get_balance_async(exchange_async))\r\n    time_async.append(time.time() - start)\r\n    time.sleep(0.2)\r\n\r\n    start = time.time()\r\n    balance = exchange_sync.fetch_balance()\r\n    time_sync.append(time.time() - start)\r\n    time.sleep(0.2)\r\n\r\nprint(\"Async data: \", time_async)\r\nprint(\"Sync data: \", time_sync)\r\nprint(f\"async mean: {sum(time_async)/len(time_async)}\")\r\nprint(f\"sync mean: {sum(time_sync)/len(time_sync)}\")\r\n\u2002\u2002\r\n\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/16650/comments",
    "author": "akasimo",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2023-01-27T11:23:45Z",
        "body": "Hello @akasimo,\r\nThe difference is not related to the sync vs async approach, but the default RateLimiter ccxt async has in place. You can disable it if you want by providing this option: `enableRateLimit: False`. "
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why async implementation is slower than sync in this specific CCXT context",
      "Identification of configuration differences between async and sync CCXT implementations",
      "Guidance on optimizing async performance to match/exceed sync approach",
      "Clarification of CCXT's async architecture decisions",
      "Best practices for fair comparison between sync/async approaches in CCXT"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:02:05"
    }
  },
  {
    "number": 15160,
    "title": "Fetching balance state on Bybit returns an empty list",
    "created_at": "2022-10-01T11:52:12Z",
    "closed_at": "2022-10-01T14:04:20Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/15160",
    "body": "- OS: Windows 10 (WSL2 Ubuntu 20.04)\r\n- Programming Language version: Node.js 18\r\n- CCXT version: 1.92.89\r\n\r\nFetching a balance returns all 0. It does not work both on mainnet and testnet.\r\n\r\nBalance amount for all symbols is returned as 0. API key and secret is a correct one.\r\nSwitching from bybit to binance exchange successfully returns a correct amount of balance, but not on bybit.\r\n\r\nMy actual balance on testnet is: 112,294.98 USD (\u22485.82435910 BTC)\r\n\r\n```\r\nconst ccxt = require('ccxt')\r\n\r\n(async () => {\r\n  const exchange = new ccxt.bybit({\r\n    apiKey: 'xxx',\r\n    secret: 'xxx'\r\n  })\r\n  \r\n  const balance = await exchange.fetchBalance()\r\n  console.log(balance)\r\n})()\r\n```\r\n\r\n```\r\n{\r\n  info: {\r\n    ret_code: '0',\r\n    ret_msg: 'OK',\r\n    result: {\r\n      USDT: [Object],\r\n      DOT: [Object],\r\n      LTC: [Object],\r\n      BIT: [Object],\r\n      MANA: [Object],\r\n      BTC: [Object],\r\n      ETH: [Object],\r\n      EOS: [Object],\r\n      XRP: [Object],\r\n      SOL: [Object],\r\n      ADA: [Object]\r\n    },\r\n    ext_code: '',\r\n    ext_info: '',\r\n    time_now: '1664624408.371975',\r\n    rate_limit_status: '117',\r\n    rate_limit_reset_ms: '1664624408367',\r\n    rate_limit: '120'\r\n  },\r\n  USDT: { free: 0, used: 0, total: 0 },\r\n  DOT: { free: 0, used: 0, total: 0 },\r\n  LTC: { free: 0, used: 0, total: 0 },\r\n  BIT: { free: 0, used: 0, total: 0 },\r\n  MANA: { free: 0, used: 0, total: 0 },\r\n  BTC: { free: 0, used: 0, total: 0 },\r\n  ETH: { free: 0, used: 0, total: 0 },\r\n  EOS: { free: 0, used: 0, total: 0 },\r\n  XRP: { free: 0, used: 0, total: 0 },\r\n  SOL: { free: 0, used: 0, total: 0 },\r\n  ADA: { free: 0, used: 0, total: 0 },\r\n  free: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  },\r\n  used: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  },\r\n  total: {\r\n    USDT: 0,\r\n    DOT: 0,\r\n    LTC: 0,\r\n    BIT: 0,\r\n    MANA: 0,\r\n    BTC: 0,\r\n    ETH: 0,\r\n    EOS: 0,\r\n    XRP: 0,\r\n    SOL: 0,\r\n    ADA: 0\r\n  }\r\n}\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/15160/comments",
    "author": "danieltorscho",
    "comments": [
      {
        "user": "carlosmiei",
        "created_at": "2022-10-01T13:06:06Z",
        "body": "Hello @danieltorscho,\r\nBybit is one of the only exchanges loading derivative features (markets, balances, etc) by default. I suspect that your funds are under the spot wallet, so I'd suggest instantiating bybit like this:\r\n\r\n```Python\r\nexchange = ccxt.bybit({\r\n    'apiKey': 'YOUR_API_KEY',\r\n    'secret': 'YOUR_SECRET_KEY',\r\n    'options': {\r\n       'defaultType': 'spot', # very important set spot as default type\r\n    }\r\n})\r\nbalances = await exchange.fetch_balance()\r\n```\r\n```\r\n\r\n\r\n"
      },
      {
        "user": "danieltorscho",
        "created_at": "2022-10-01T14:04:20Z",
        "body": ">     'options': {\r\n>        'defaultType': 'spot', # very important set spot as default type\r\n>     }\r\n\r\n@carlosmiei thank you, it works now !"
      }
    ],
    "satisfaction_conditions": [
      "Solution must address correct account type configuration for Bybit API access",
      "Answer must explain how to properly configure wallet type for balance retrieval",
      "Solution should resolve discrepancy between actual balance and API response"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:04:24"
    }
  },
  {
    "number": 14890,
    "title": "bibox fetch_withdrawals has error",
    "created_at": "2022-09-06T16:46:01Z",
    "closed_at": "2022-09-16T22:03:47Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/14890",
    "body": "hi\r\nsince = None\r\nlimit = 200\r\nend_time = connection.milliseconds()\r\nparams = {\r\n     'end_time': int(end_time / 1000),\r\n}\r\nwithdrawals = connection.fetch_withdrawals(\"TRX\", since, limit, params)\r\n\r\nerror :\r\nbibox {\"error\":{\"code\":\"3000\",\"msg\":\"\u8bf7\u6c42\u53c2\u6570\u9519\u8bef\"},\"cmd\":\"transfer/transferInList\"}",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/14890/comments",
    "author": "hosseinab",
    "comments": [
      {
        "user": "kubeat",
        "created_at": "2022-09-07T09:55:41Z",
        "body": "i try to debug your code.the param 'limit' too big\uff0cyou can try change 'limit ' to 100 \u3002bibox Api have update to v3 ,v4,the ccxt is v1"
      },
      {
        "user": "hosseinab",
        "created_at": "2022-09-08T14:39:29Z",
        "body": "@kubeat \r\nThanks for your guidance . My problem is solved. Is there a library for version 3?"
      }
    ],
    "satisfaction_conditions": [
      "Handles API parameter constraints for Bibox withdrawals endpoint",
      "Compatibility with Bibox API version requirements"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:04:49"
    }
  },
  {
    "number": 9371,
    "title": "help authenticating to KuCoin Exchange using ccxtPro",
    "created_at": "2021-06-13T07:52:53Z",
    "closed_at": "2021-06-13T18:19:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9371",
    "body": "Hello Guys, \r\n\r\ni tried to authenticate to Kucoin using ccxtPro but it doesn't work, can someone please correct what i'm doing wrong here ?\r\n\r\nhere is my code:\r\n\r\n```\r\nexchange_kucoin = ccxtpro.kucoin({\r\n    'apiKey': const.API_KEY,\r\n    'secret': const.API_SECRET,\r\n    'password': const.API_PASSPHRASE,\r\n    'enableRateLimit': True,\r\n    'headers': {\r\n        'KC-API-KEY': const.API_KEY,\r\n    }\r\n})\r\n```\r\ni have also tried this without the \"header\" but still the same issue\r\n\r\nbut when i try to run a function to get some informations about my account, i get this error: \r\n\r\n`kucoin KC-API-KEY not exists`\r\n\r\n\r\nthe ccxtpro version i'm using is: print(ccxtpro.__version__) ==> 0.7.19",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9371/comments",
    "author": "korchix",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-06-13T12:46:20Z",
        "body": "@korchix have you tried recreating your API Key? If not, please, try with a fresh new keypair and let us know if that does not help."
      },
      {
        "user": "korchix",
        "created_at": "2021-06-13T18:19:16Z",
        "body": "@kroitor it works now with the new key, thank you for the hint."
      }
    ],
    "satisfaction_conditions": [
      "Ensures API key validity and proper authentication setup",
      "Addresses KC-API-KEY existence error specifically",
      "Works with ccxtPro's authentication requirements for KuCoin"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:08:42"
    }
  },
  {
    "number": 9207,
    "title": "FTX: Can't cancel opened Order / Can't get Order ID's of open Orders (PHP)",
    "created_at": "2021-05-18T20:15:36Z",
    "closed_at": "2021-05-18T20:33:44Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9207",
    "body": "i can successfully create orders with :\r\n\r\n`$exchange->create_order($symbol, $type, $side, $amount, $price, $params);`\r\n```\r\nArray\r\n(\r\n    [info] => Array\r\n        (\r\n            [id] => 44022042\r\n            [market] => BTC-PERP\r\n            [future] => BTC-PERP\r\n            [side] => sell\r\n            [type] => take_profit\r\n            [orderPrice] => 48100.0\r\n            [triggerPrice] => 47000.0\r\n            [size] => 0.001\r\n            [status] => open\r\n            [createdAt] => 2021-05-18T20:09:03.654365+00:00\r\n            [triggeredAt] => \r\n            [orderId] => \r\n            [error] => \r\n            [reduceOnly] => \r\n            [trailValue] => \r\n            [trailStart] => \r\n            [cancelledAt] => \r\n            [cancelReason] => \r\n            [retryUntilFilled] => \r\n            [orderType] => limit\r\n        )\r\n\r\n    [id] => 44022042\r\n    [clientOrderId] => \r\n    [timestamp] => 1621368543654\r\n    [datetime] => 2021-05-18T20:09:03.654Z\r\n    [lastTradeTimestamp] => \r\n    [symbol] => BTC-PERP\r\n    [type] => take_profit\r\n    [timeInForce] => \r\n    [postOnly] => \r\n    [side] => sell\r\n    [price] => 47000\r\n    [stopPrice] => 47000\r\n    [amount] => 0.001\r\n    [cost] => \r\n    [average] => \r\n    [filled] => \r\n    [remaining] => \r\n    [status] => open\r\n    [fee] => \r\n    [trades] => \r\n)\r\n\r\n```\r\n\r\nbut if i want to close this order with\r\n`$exchange->cancel_order(44022042)`\r\n\r\n\r\ni get an error\r\n\r\n`ccxt\\OrderNotFound: ftx {\"success\":false,\"error\":\"Order not found\"}`\r\n\r\n\r\n\r\nalso \r\n\r\n`$exchange->fetch_open_orders() `returns an empty array even though i have open orders\r\n\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9207/comments",
    "author": "hm291195",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-05-18T20:33:44Z",
        "body": "@hm291195 if you're canceling a conditional take_profit order, you have to add a `type` param override, otherwise it will attempt to cancel a regular order with that id instead of the conditional order:\r\n\r\n```PHP\r\n$exchange->cancel_order(44022042, null, array('type'=>'takeProfit'));\r\n```\r\n\r\nLet us know if that does not answer your question."
      },
      {
        "user": "hm291195",
        "created_at": "2021-05-18T20:39:51Z",
        "body": "ok this works.\r\n\r\nAnd regarding the second part - why does `$exchange->fetch_open_orders() `return an empty array even though i have open orders ? Is there also a param override neccessary ?\r\n\r\n\r\nLast but not least i just figured out another ambiguity:\r\n\r\nif i fetch my open positions with `$exchange->fetch_positions() `why does the array contain positions that are already closed ? Am i right, that the only way to find out my open positions is to check each key of the array if there is \"openSize\" which is then > 0 to find out if the position is still open or already closed ?"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-19T11:05:27Z",
        "body": "@hm291195 \r\n\r\n> And regarding the second part - why does $exchange->fetch_open_orders() return an empty array even though i have open orders ? Is there also a param override neccessary ?\r\n\r\nYes, you have to add a param override for conditionals: \r\n\r\n```PHP\r\n$since = null;\r\n$limit = null;\r\n$params = array('type'=>'takeProfit');\r\n$orders = $exchange->fetch_open_orders($symbol, $since, $limit, $params);\r\n```\r\n\r\n> Am i right, that the only way to find out my open positions is to check each key of the array if there is \"openSize\" which is then > 0 to find out if the position is still open or already closed ?\r\n\r\nYes, that is correct."
      },
      {
        "user": "hm291195",
        "created_at": "2021-05-19T12:25:06Z",
        "body": "sorry for the duplicate post, i thought my answer here might not show up since the question was closed yesterday after your answer!\r\n\r\nthanks for clarifying.\r\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of required parameter overrides for conditional order types",
      "Clarification on filtering mechanisms for order/position status checks",
      "Documentation of API endpoint-specific requirements",
      "Consistent pattern for handling order type variations"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:09:02"
    }
  },
  {
    "number": 9046,
    "title": "Stale Price Feed from Binance USDT Futures & FTX",
    "created_at": "2021-04-22T08:03:42Z",
    "closed_at": "2021-05-04T23:30:02Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/9046",
    "body": "Hi Kroitor,\r\n\r\nI think I'm getting a stale/delayed price feed from Binance USDT Futures and FTX. I only need the Best Bid & Offer from each of the exchanges pushed in real-time (I don't need orderbooks). Sometimes the FTX price or the Binance price just stops updating. Is there anything in the code you can see that would be causing this?\r\n\r\nimport threading\r\nimport asyncio\r\nimport ccxtpro\r\nimport loggin_util\r\nfrom definitions.exchanges import Exchanges\r\nfrom definitions.trading_util import ConnectionState\r\nimport ccxtpro_exchanges\r\nimport definitions.app_values as apv\r\n\r\n\r\n# from principal import Principal\r\n\r\n\r\nclass DataFeedManager(threading.Thread):\r\n    def __init__(self, exchange: Exchanges, symbol_name: str, data_coin_command, print_info: bool,\r\n                 entry_delta: float, exit_delta: float, entry_size: float, _data_feed_stopped,\r\n                 _executing_methods_event, assigned_pair_id):\r\n        threading.Thread.__init__(self)\r\n        self.exchange = exchange\r\n        self.symbol_name = symbol_name\r\n        self.print_info = print_info\r\n        self.print_info = False  # for testing\r\n        self.bid = 0.0\r\n        self.ask = 0.0\r\n        self.entry_delta = entry_delta\r\n        self.exit_delta = exit_delta\r\n        self.entry_size = entry_size\r\n        self.logger = loggin_util.create_logger(__name__ + '_' + self.exchange.name + '_' +\r\n                                                self.symbol_name.replace('/', ''))\r\n        self.conn_state = ConnectionState.DISCONNECTED\r\n        self.data_coin_command = data_coin_command\r\n        self.data_feed_enabled = True\r\n        self.data_feed_stopped = _data_feed_stopped\r\n        self.executing_methods_event = _executing_methods_event\r\n        self.binance_pro = ccxtpro.binance({'enableRateLimit': True,\r\n                                            'options': {\r\n                                                'defaultType': 'future',\r\n                                            }})\r\n        self.ftx_pro = ccxtpro.ftx({'enableRateLimit': True})\r\n        self.assigned_pair_id = assigned_pair_id\r\n\r\n        # print(self.symbol_id.replace('/', ''))\r\n\r\n    async def get_tick(self):\r\n        exchange_switcher = {\r\n            Exchanges.binance: ccxtpro.binance({'enableRateLimit': True,\r\n                                                'apiKey': apv.binance_api_key,\r\n                                                'secret': apv.binance_secret_key,\r\n                                                'options': {\r\n                                                    'defaultType': 'future',\r\n                                                    'watchTicker': {\r\n                                                        'name': 'bookTicker'\r\n                                                    }\r\n                                                }}),\r\n            Exchanges.ftx: ccxtpro.ftx({'enableRateLimit': True}),\r\n        }\r\n        exchange = exchange_switcher.get(self.exchange)\r\n        while self.data_feed_stopped.wait():\r\n\r\n            if not self.data_feed_enabled:\r\n                print(\"Stopping Data Feed\")\r\n                self.data_feed_stopped.clear()\r\n                print(\"Data Feed Stopped? %s\" % self.data_feed_stopped)\r\n                break\r\n\r\n            if self.print_info: print(\"----------------------\")\r\n            if self.print_info: print(\"data_feed_enabled: %s\" % self.data_feed_enabled)\r\n            if self.print_info: print(exchange.id)\r\n            if self.print_info: print(\"Symbol: \", self.symbol_name)\r\n\r\n            try:\r\n                # order_book = await exchange.watch_order_book(self.symbol_name)\r\n                order_book = await exchange.watch_ticker(self.symbol_name)\r\n            except Exception as e:\r\n                self.conn_state = ConnectionState.DISCONNECTED\r\n                self.logger.error('Disconnected')\r\n                print(\"Exception: \", e)\r\n                continue\r\n            if self.conn_state == ConnectionState.DISCONNECTED:\r\n                self.logger.info('Connected')\r\n                self.conn_state = ConnectionState.CONNECTED\r\n\r\n            # self.bid = order_book['bids'][0][0] if len(order_book['bids']) > 0 else None\r\n            # self.ask = order_book['asks'][0][0] if len(order_book['asks']) > 0 else None\r\n            self.bid = order_book['bid'] if order_book['bid'] is not None else self.bid\r\n            self.ask = order_book['ask'] if order_book['ask'] is not None else self.ask\r\n            spread = (self.ask - self.bid) if (self.bid and self.ask) else None\r\n            mid = (self.bid + self.ask) / 2 if (self.bid and self.ask) else None\r\n            if self.print_info: print(\"bid: \", self.bid)\r\n            if self.print_info: print(\"ask: \", self.ask)\r\n            if self.print_info: print(\"spread: \", spread)\r\n            if self.print_info: print(\"mid: \", mid)\r\n            self.data_coin_command(self.symbol_name,\r\n                                   self.bid,\r\n                                   self.ask,\r\n                                   self.entry_delta,\r\n                                   self.exit_delta,\r\n                                   self.entry_size,\r\n                                   self.executing_methods_event,\r\n                                   self.assigned_pair_id)\r\n\r\n    def run(self):\r\n        asyncio.run(self.get_tick())",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/9046/comments",
    "author": "deceneucapital",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2021-04-22T08:17:36Z",
        "body": "Hi @deceneucapital !\r\n\r\nDo you have this issue with the most recent version of CCXT Pro + the following script:\r\n\r\n```Python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport ccxtpro\r\nfrom asyncio import gather, get_event_loop\r\n\r\n\r\nasync def exchange_symbol_loop(exchange, symbol):\r\n    print('Starting the', exchange.id, 'symbol loop with', symbol)\r\n    while True:\r\n        try:\r\n            ticker = await exchange.watch_ticker(symbol)\r\n            now = exchange.milliseconds()\r\n            print(exchange.iso8601(now), exchange.id, symbol, ticker['bid'], ticker['ask'])\r\n        except Exception as e:\r\n            print(str(e))\r\n            # raise e  # uncomment to break all loops in case of an error in any one of them\r\n            break  # you can break just this one loop if it fails\r\n\r\n\r\nasync def exchange_loop(asyncio_loop, exchange_id, symbols):\r\n    print('Starting the', exchange_id, 'exchange loop with', symbols)\r\n    exchange = getattr(ccxtpro, exchange_id)({\r\n        'enableRateLimit': True,\r\n        'asyncio_loop': asyncio_loop,\r\n        'options': {\r\n            'defaultType': 'future',\r\n            'watchTicker': {\r\n                'name': 'bookTicker',\r\n            },\r\n        },\r\n    })\r\n    loops = [exchange_symbol_loop(exchange, symbol) for symbol in symbols]\r\n    await gather(*loops)\r\n    await exchange.close()\r\n\r\n\r\nasync def main(asyncio_loop):\r\n    exchanges = {\r\n        'ftx': ['BTC/USDT', 'ETH/BTC'],\r\n        'binance': ['BTC/USDT', 'ETH/BTC'],\r\n    }\r\n    loops = [exchange_loop(asyncio_loop, exchange_id, symbols) for exchange_id, symbols in exchanges.items()]\r\n    await gather(*loops)\r\n\r\n\r\nif __name__ == '__main__':\r\n    asyncio_loop = get_event_loop()\r\n    asyncio_loop.run_until_complete(main(asyncio_loop))\r\n```\r\n\r\nDoes it get stale?\r\n"
      },
      {
        "user": "deceneucapital",
        "created_at": "2021-05-04T23:30:02Z",
        "body": "Will check and come back to you - thanks!\n\n---\n\nThat fixed it, thanks!"
      },
      {
        "user": "kroitor",
        "created_at": "2021-05-04T23:39:16Z",
        "body": "@deceneucapital thank you for your feedback! We appreciate it!"
      }
    ],
    "satisfaction_conditions": [
      "Ensures continuous real-time updates of Best Bid/Offer prices without interruptions",
      "Handles exchange API disconnections/reconnections automatically",
      "Maintains stable websocket connections to Binance Futures and FTX",
      "Uses correct API configuration for exchange-specific requirements",
      "Implements proper async/await patterns for concurrent data streams"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:09:26"
    }
  },
  {
    "number": 8921,
    "title": "Coinbasepro watch_orders() fails with TypeError: 'Unicode-objects must be encoded before hashing'",
    "created_at": "2021-04-10T05:03:12Z",
    "closed_at": "2021-04-10T08:26:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/8921",
    "body": "I'm having this problem only with coinbasepro and only in watch_orders(). It works with ftx, and both watch_orderbook and watch_orders work with coinbasepro. My keys and passphrase are stored as strings, and they are being converted to bytes at some point before reaching hmac()\r\n\r\n \r\n- OS: macOS Catalina\r\n- Programming Language version: Python 3.8.6\r\n- CCXT version :ccxt==1.45.74, ccxtpro==0.6.33\r\n-\r\n\r\n```\r\ndef listen(self, callback=(lambda x: None)):\r\n        loop = asyncio.get_event_loop()\r\n        loop.create_task(self.watch_orderbook(callback))\r\n        loop.create_task(self.watch_orders(callback))\r\n        loop.create_task(self.slowly_watch_balance())\r\n\r\n```\r\nI also modified the hmac method for some debugging output, which indicates the string and request are bytes\r\n```\r\n@staticmethod\r\n    def hmac(request, secret, algorithm=hashlib.sha256, digest='hex'):\r\n        print('SECRET IS ' + str(secret))\r\n        print('REQUEST IS ' + str(request))\r\n        print('ALGORITHM IS ' + str(algorithm))\r\n        h = hmac.new(secret, request, algorithm)\r\n        binary = h.digest()\r\n        if digest == 'hex':\r\n            return Exchange.binary_to_base16(binary)\r\n        elif digest == 'base64':\r\n            return Exchange.binary_to_base64(binary)\r\n        return binary\r\n```\r\n\r\n```\r\nSECRET IS b'\\xd3\\xe1!...omitted...x9a'\r\nREQUEST IS b'16...omitted...86GET/accounts'\r\nALGORITHM IS <built-in function openssl_sha256>\r\n```\r\n\r\nThe traceback for the error is:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/nnsk/Desktop/scrypto/addthistowrappers.py\", line 130, in watch_orders\r\n    self.orders = await self.client.watch_orders(symbol=self.symbol, limit=200)\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxtpro/coinbasepro.py\", line 101, in watch_orders\r\n    authentication = self.authenticate()\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxtpro/coinbasepro.py\", line 46, in authenticate\r\n    signature = self.hmac(payload, self.base64_to_binary(self.secret), hashlib.sha256, 'base64')\r\n  File \"/usr/local/lib/python3.8/site-packages/ccxt/base/exchange.py\", line 1112, in hmac\r\n    h = hmac.new(secret, request, algorithm)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 153, in new\r\n    return HMAC(key, msg, digestmod)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 88, in __init__\r\n    self.update(msg)\r\n  File \"/usr/local/Cellar/python@3.8/3.8.6/Frameworks/Python.framework/Versions/3.8/lib/python3.8/hmac.py\", line 96, in update\r\n    self.inner.update(msg)\r\nTypeError: Unicode-objects must be encoded before hashing\r\n```\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/8921/comments",
    "author": "nanaknihal",
    "comments": [
      {
        "user": "frosty00",
        "created_at": "2021-04-10T06:44:08Z",
        "body": "you need to update to the latest version of ccxtpro, this error has already been fixed\n\n---\n\nmy current version is `0.6.47`"
      },
      {
        "user": "kroitor",
        "created_at": "2021-04-10T08:26:42Z",
        "body": "@nanaknihal please, let us know if you have the same issue with the most recent version of CCXT + CCXT Pro. Feel free to reopen it or just ask further questions if any."
      },
      {
        "user": "nanaknihal",
        "created_at": "2021-04-10T20:47:50Z",
        "body": "Thanks, it worked after updating"
      },
      {
        "user": "kroitor",
        "created_at": "2021-04-10T20:49:34Z",
        "body": "@nanaknihal thx for reporting back!"
      }
    ],
    "satisfaction_conditions": [
      "Solution resolves Unicode encoding conflict in HMAC authentication for watch_orders()",
      "Compatibility with CoinbasePro's authentication requirements",
      "Validation through updated library version confirmation"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:09:36"
    }
  },
  {
    "number": 7116,
    "title": "Kucoin fetchBalance method returning empty data",
    "created_at": "2020-06-14T01:34:20Z",
    "closed_at": "2020-06-14T01:40:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/7116",
    "body": "Hello,\r\nI have 2 accounts at Kucoin, when trying to call the fetchBalance method in one of them, the API returns the balance to me normally, but when calling this same method in another account, it returns me a json with empty data, why does this happen? I checked the Key / Secret / Phrase API and it is correct, because I am getting the status 200000\r\n\r\n- OS: CentOS 7\r\n- Programming Language version: JavaScript\r\n- CCXT version: 1.28.95\r\n\r\n```\r\nasync getBalance() {\r\n        let balance = []\r\n        try {\r\n            balance = await this.kucoin.fetchBalance()\r\n        } catch (e) {\r\n            let error = {\r\n                error: this.extractErrorMessage(e.message)\r\n            }\r\n            return error\r\n        }\r\n        return balance\r\n    }\r\n```\r\n\r\n```\r\n{ info: { code: '200000', data: [] },\r\n  free: {},\r\n  used: {},\r\n  total: {} }\r\n```\r\n\r\n\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/7116/comments",
    "author": "viniciussvl",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-06-14T01:35:30Z",
        "body": "Hi! Have you deposited to the \"empty\" account?"
      },
      {
        "user": "viniciussvl",
        "created_at": "2020-06-14T01:39:48Z",
        "body": "Wonderful, that was it! What a silly mistake, I apologize. You can close this issue, if someone \"gets it wrong\" like me, you will find this topic haha"
      }
    ],
    "satisfaction_conditions": [
      "Identifies that empty balance data can occur even with valid API credentials",
      "Addresses account-specific factors rather than code implementation",
      "Explains non-technical causes for empty balance responses"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:12:21"
    }
  },
  {
    "number": 6982,
    "title": "[hitbtc] trade fee missing currency",
    "created_at": "2020-05-20T09:50:17Z",
    "closed_at": "2020-05-20T10:14:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6982",
    "body": "        {\r\n            \"info\": {\"id\": 849899156, \"clientOrderId\": \"c6349c2ef7734447a106cd3ac982c23b\", \"orderId\": 245637799183, \"symbol\": \"IOSTBTC\", \"side\": \"sell\", \"quantity\": \"6920\", \"price\": \"0.0000003764\", \"fee\": \"0.000001823282\", \"timestamp\": \"2020-05-20T02:21:55.024Z\"},\r\n            \"id\": \"849899156\",\r\n            \"order\": \"c6349c2ef7734447a106cd3ac982c23b\",\r\n            \"timestamp\": 1589941315024,\r\n            \"datetime\": \"2020-05-20T02:21:55.024Z\",\r\n            \"symbol\": \"IOST/BTC\",\r\n            \"side\": \"sell\",\r\n            \"price\": 3.764e-7,\r\n            \"amount\": 6920,\r\n            \"cost\": 0.002604688,\r\n            \"fee\": {\"cost\": 0.000001823282}\r\n        }",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6982/comments",
    "author": "npomfret",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-05-20T10:03:03Z",
        "body": "Do you have CCXT updated? Because I'm seeing this from parseTrade (i've added the edits to HitBTC for the feeCurrency specified in markets upon merging your PR).\r\n\r\nWith your trade posted above:\r\n\r\n```\r\nmbp:ccxt igorkroitor$ node examples/js/cli hitbtc fetchMyTrades --details\r\nhitbtc.fetchMyTrades ()\r\n-------------------------------------------\r\n{         info: {            id:  849899156,\r\n                  clientOrderId: \"c6349c2ef7734447a106cd3ac982c23b\",\r\n                        orderId:  245637799183,\r\n                         symbol: \"IOSTBTC\",\r\n                           side: \"sell\",\r\n                       quantity: \"6920\",\r\n                          price: \"0.0000003764\",\r\n                            fee: \"0.000001823282\",\r\n                      timestamp: \"2020-05-20T02:21:55.024Z\"          },\r\n            id:   \"849899156\",\r\n         order:   \"c6349c2ef7734447a106cd3ac982c23b\",\r\n     timestamp:    1589941315024,\r\n      datetime:   \"2020-05-20T02:21:55.024Z\",\r\n        symbol:   \"IOST/BTC\",\r\n          type:    undefined,\r\n          side:   \"sell\",\r\n  takerOrMaker:    undefined,\r\n         price:    3.764e-7,\r\n        amount:    6920,\r\n          cost:    0.002604688,\r\n           fee: { cost: 0.000001823282, currency: \"BTC\" }               }\r\n```\r\n\r\n\u2191 The fee currency is there in the most recent version of CCXT. You may have an outdated HitBTC file."
      },
      {
        "user": "npomfret",
        "created_at": "2020-05-20T10:14:13Z",
        "body": "Maybe thanks."
      }
    ],
    "satisfaction_conditions": [
      "Fee currency information must be present in trade data",
      "Solution must work with the latest API/exchange integration version",
      "Fee data structure must match expected API response format"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:13:19"
    }
  },
  {
    "number": 6546,
    "title": "Limited L2 orderbook does not produce consistent amount of results - CCXT PRO",
    "created_at": "2020-03-01T14:39:07Z",
    "closed_at": "2020-03-01T14:59:12Z",
    "labels": [
      "question",
      "ws"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/6546",
    "body": "- OS: Win10\r\n- Programming Language version: Python 3.8\r\n- CCXT version: 0.0.47\r\n- Exchange: Binance, WS\r\n\r\n```\r\nimport ccxtpro\r\nimport asyncio\r\n\r\nasync def main():\r\n    exchange = ccxtpro.binance({'enableRateLimit': True})\r\n    while True:\r\n        orderbook = await exchange.watch_order_book('ETH/BTC', 10) #INCONSISTENT, see below\r\n        print(len(orderbook['asks']), len(orderbook['bids']))\r\n\r\nasyncio.get_event_loop().run_until_complete(main())\r\n\r\n```\r\n\r\nResults:\r\n\r\n```\r\n10 10\r\n10 10\r\n10 9\r\n9 10\r\n10 10\r\n10 10\r\n10 10\r\n10 9\r\n10 10\r\n```\r\n\r\nand:\r\n```\r\n        orderbook = await exchange.watch_order_book('ETH/BTC', 1)\r\n        print(orderbook['asks'][0]), (orderbook['bids'][0])\r\n```\r\nProduces (after some correct results):\r\n```\r\n    print(orderbook['asks'][0]), (orderbook['bids'][0])\r\nIndexError: list index out of range\r\n```",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/6546/comments",
    "author": "1key",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2020-03-01T14:49:38Z",
        "body": "Technically, this is not fully a bug. What happens is that when you limit the orders in real-time mode by supplying the `limit` argument CCXT will only store up to `limit` orders. In some cases an order may be deleted from the book (when matched), so the exchange sends a zero delta and it is removed from the orderbook leaving just the 9 orders of 10 (until another one fills the gap). The responsibility of CCXT Pro in this case is to return immediately after receiving a \"delete\" command from the exchange (or any of \"delete\", \"update\", \"insert\" deltas).\r\n\r\nSo, from here, you have two options:\r\n\r\n- either expect the number of bids/asks to be less than or equal to `limit` in the result \r\n- or don't send `limit` (CCXT will keep the entire orderbook in memory) and just use python's array slicing like `[0:5]`\r\n\r\nAlso, Binance does support limited WS feeds for 5, 10 or 20 bidasks, however, when `limit` is sent to the exchange \u2013 it will rate-limit the feed by 100ms or 1000ms which is not good for real-time apps, therefore the `limit` is not sent to Binance in particular at this time, and all the limiting is done on the client-side in memory.\r\n\r\nWe will add this to the documentation shortly to avoid confusion.\r\n\r\nLet me know if that does not answer the question."
      },
      {
        "user": "1key",
        "created_at": "2020-03-01T14:56:23Z",
        "body": "Clear and fast answer!\r\nWill work around it then."
      },
      {
        "user": "kroitor",
        "created_at": "2020-03-01T14:59:12Z",
        "body": "@1key we will look into adding an option that would still store the entire orderbook and would always serve a number of bidasks as close as possible to `limit` , but in the general case an exchange orderbook may have less than any number of bid/asks (just like with fetchOrderBook over REST). So if the exchange is inactive, there may be very few or even zero orders on either side of the book. \r\n\r\nFeel free to reopen this if anything or just ask further questions if you have more. Thanks for the feedback!"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why orderbook limits may return fewer entries than specified",
      "Strategy to handle variable orderbook entry counts",
      "Clarification of exchange vs client-side limitations",
      "Documentation of orderbook update behavior"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:14:13"
    }
  },
  {
    "number": 4684,
    "title": "Add fetchBalance on trade account Kucoin2",
    "created_at": "2019-02-18T15:29:43Z",
    "closed_at": "2019-02-18T15:52:36Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/4684",
    "body": "At the moment fetchBalance() on Kucoin2 (newly released platform) returns balance from main account with no option to get balance from the trade account. Could this be added please?",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/4684/comments",
    "author": "charlie-eth",
    "comments": [
      {
        "user": "MarcelBeining",
        "created_at": "2019-02-18T15:45:52Z",
        "body": "+1"
      },
      {
        "user": "kroitor",
        "created_at": "2019-02-18T15:53:57Z",
        "body": "@calbertuk you can choose whatever it is:\r\n\r\n```JavaScript\r\nfetchBalance ({'type': 'trade'}) // this is the default as of version 1.18.248\r\n```\r\n\r\nor\r\n\r\n```JavaScript\r\nfetchBalance ({'type': 'main'}) // this is the default prior to version 1.18.248\r\n```\r\n\r\nLet us know if that does not help."
      },
      {
        "user": "charlie-eth",
        "created_at": "2019-02-18T15:55:10Z",
        "body": "That's perfect, thanks."
      },
      {
        "user": "MarcelBeining",
        "created_at": "2019-02-18T16:31:08Z",
        "body": "Oh, no wonder, on pip, latest version is 1.18.247 ^^"
      }
    ],
    "satisfaction_conditions": [
      "Support for specifying account type (trade/main) when fetching balances",
      "Clear documentation/interface for account type selection",
      "Backward compatibility with previous version behavior"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:16:04"
    }
  },
  {
    "number": 2896,
    "title": "huobipro withdraw return api-signature-not-valid error",
    "created_at": "2018-05-19T18:43:10Z",
    "closed_at": "2018-05-20T04:03:55Z",
    "labels": [
      "duplicate",
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/2896",
    "body": "- OS: Win10\r\n- Programming Language version: Python 3.5.4\r\n- CCXT version: 1.14.25\r\n- Exchange: huobipro\r\n- Method: withdraw\r\n\r\nWhen I tested huobipro withdraw, I got 'signature not valid' response as below:\r\n\r\n> ccxt.base.errors.ExchangeError: huobipro {\"err-msg\":\"Signature not valid: \\u6821\\u9a8c\\u5931\\u8d25\",\"status\":\"error\",\"data\":null,\"err-code\":\"api-signature-not-valid\"}\r\n\r\nMeanwhile, huobipro fetch_balance worked fine. So I think it is not a key pair issue. And I also tested withdraw same target address by other market, it also worked fine. So the address should be good.\r\n\r\nAttach my testing code below, hope it will help:\r\n\r\n    f_m = \"huobipro\"\r\n    t_m = \"okex\" \r\n    currency = \"ZEC\"\r\n\r\n    exchange = getattr(ccxt, f_m)({'apiKey': apiconfig['key'], 'secret': apiconfig['secret'], 'nonce': ccxt.Exchange.milliseconds})\r\n    addresses = get_market_addresses(t_m) #get addresses map\r\n    exchange.load_markets()\r\n    response = exchange.fetch_balance()\r\n    print(response) #fetch balance, worked\r\n    response = exchange.withdraw(currency, 1, addresses[currency]['address'], 'Test withdraw', {})\r\n    print(response) #withdraw, failed\r\n\r\nAttach traceback:\r\n\r\n> Traceback (most recent call last):\r\n  File \"testing2.py\", line 36, in <module>\r\n    withdraw_test()\r\n  File \"testing2.py\", line 33, in withdraw_test\r\n    response = exchange.withdraw(currency, 1, addresses[currency]['address'], 'Test withdraw', {})\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\huobipro.py\", line 661, in withdraw\r\n    response = self.privatePostDwWithdrawApiCreate(self.extend(request, params))\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 306, in request\r\n    return self.fetch2(path, api, method, params, headers, body)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 303, in fetch2\r\n    return self.fetch(request['url'], request['method'], request['headers'], request['body'])\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\base\\exchange.py\", line 383, in fetch\r\n    self.handle_errors(response.status_code, response.reason, url, method, None, self.last_http_response)\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\ccxt\\huobipro.py\", line 727, in handle_errors\r\n    raise ExchangeError(feedback)\r\nccxt.base.errors.ExchangeError: huobipro {\"err-msg\":\"Signature not valid: \\u6821\\u9a8c\\u5931\\u8d25\",\"data\":null,\"err-code\":\"api-signature-not-valid\",\"status\":\"error\"}\r\n",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/2896/comments",
    "author": "radarxc",
    "comments": [
      {
        "user": "radarxc",
        "created_at": "2018-05-20T01:48:11Z",
        "body": "I find when I change withdraw's 'tag' parameter as None, this issue is fixed. I am not sure what happen, but it works fine on other market with tag parameter."
      },
      {
        "user": "kroitor",
        "created_at": "2018-05-20T04:03:55Z",
        "body": "@radarxc you're not using the withdraw method properly. The `tag` is not an arbitrary user string, it is a wallet identifier which should only be set if you're withdrawing a currency that requires the tag for addressing. Let us know if it does not answer your question."
      },
      {
        "user": "radarxc",
        "created_at": "2018-05-20T04:09:40Z",
        "body": "@kroitor \r\ngot you. Thank you very much. I should read document more carefully."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why the 'tag' parameter causes a signature error in HuobiPro withdrawals",
      "Clarification of exchange-specific requirements for withdrawal parameters",
      "Guidance on determining when to include/exclude parameters in API requests",
      "Documentation reference for currency-specific withdrawal requirements"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:17:42"
    }
  },
  {
    "number": 893,
    "title": "bitstamp createOrder type limit throws \"under 5$ Order\" exception",
    "created_at": "2017-12-18T21:39:45Z",
    "closed_at": "2017-12-18T22:09:03Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ccxt/ccxt/issues/893",
    "body": "createLimitBuyOrder is also broken on bitstamp.\r\n\r\n- exchange.createOrder ('BTC/USD', 'limit', 'buy', '0.001', '20.00') -> doesn't work\r\n- exchange.createOrder ('BTC/USD', 'market', 'buy', '0.001') -> works fine\r\n\r\ni don't know how to fix it myself, sorry.",
    "comments_url": "https://api.github.com/repos/ccxt/ccxt/issues/893/comments",
    "author": "jom1337",
    "comments": [
      {
        "user": "kroitor",
        "created_at": "2017-12-18T21:50:30Z",
        "body": "Let's see... you're buying BTC 0.001 for a price of $20 per BTC, that is:\r\n\r\n`$20 * 0.001 = $0.020` \r\n\r\nwhich is obviously less that $5. Pure arithmetics...\r\n\r\nYour BTC/USD order should be worth more than $5 in total. \r\n\r\n> i don't know how to fix it myself, sorry.\r\n\r\nOne solution I would propose is to not submit orders that are too small, because most exchanges will forbid *dust trade* (orders of very tiny amounts)."
      },
      {
        "user": "jom1337",
        "created_at": "2017-12-18T22:09:03Z",
        "body": "oh, i totally misunderstood this function.\r\nthanks a lot."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of exchange-specific minimum order value requirements",
      "Clarification of how order parameters affect total order value calculation",
      "Guidance on avoiding dust trade restrictions"
    ],
    "_classification": {
      "category": "Requires build environment but hard to be dockerized",
      "timestamp": "2025-04-05 01:21:51"
    }
  }
]