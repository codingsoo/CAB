[
  {
    "number": 2819,
    "title": "overwrite watch config from CLI",
    "created_at": "2016-07-29T20:42:41Z",
    "closed_at": "2016-08-01T08:19:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2819",
    "body": "I have a webpack.config.js with watch:true and I would like to overwrite that setting when I call \"webpack\" from the CLI in a certain environment. Is this possible? Like `webpack --watch=false` would be nice\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2819/comments",
    "author": "flyon",
    "comments": [
      {
        "user": "rafde",
        "created_at": "2016-08-01T05:56:28Z",
        "body": "why does it need to be in your config? why not use `--watch` through a separate script?\n"
      },
      {
        "user": "flyon",
        "created_at": "2016-08-01T06:25:12Z",
        "body": "Because we already have three scripts for dev/staging/deployment and I now\nwant to create nonminified bundles for staging and deployment too, so I was\nhoping to re-use the dev script for that, but it has watch:true for local\ndevelopment. Its totally possible to create another script, was just\nlooking for other options\n"
      },
      {
        "user": "rafde",
        "created_at": "2016-08-01T07:40:27Z",
        "body": "You could provide your own argument that is read in your dev config like --no-watch and process.argv.indexOf(\"--no-watch\") >= 0 that's read from inside the config file\n"
      },
      {
        "user": "flyon",
        "created_at": "2016-08-01T08:19:42Z",
        "body": "ah, that's how that works! thanks, thats perfect!\n"
      }
    ],
    "satisfaction_conditions": [
      "Ability to override the watch configuration setting via CLI arguments",
      "Solution must work with existing environment-specific scripts (dev/staging/deployment)",
      "Configuration should dynamically adapt to runtime parameters",
      "No hardcoded values in configuration files"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:43:05"
    }
  },
  {
    "number": 2608,
    "title": "re-bundle css + js which split by System.import",
    "created_at": "2016-06-06T13:18:53Z",
    "closed_at": "2016-06-07T14:04:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2608",
    "body": "``` js\nSystem.import('1.js')\nSystem.import('2.js')\n\n// After `ExtractTextPlugin.extract('style')` , output:\n// 1.js, 1.css, 2.js, 2.css\n```\n\nHow to inline the css, get a new full-bundle like:\n\n `1.js` = `1.js` + `1.css`\n\nIt's useful for reduce http request\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2608/comments",
    "author": "leecade",
    "comments": [
      {
        "user": "sethkinast",
        "created_at": "2016-06-06T17:07:59Z",
        "body": "Why are you using ExtractTextPlugin if you want to inline the CSS as part of your JS module?\n"
      },
      {
        "user": "leecade",
        "created_at": "2016-06-06T17:58:25Z",
        "body": "@sethkinast\nI use `System.import` to split files and there is a big entry js, extract `entry.css` is a better way, not sure maybe I can ignore extract css from chunk files\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-06-07T06:23:12Z",
        "body": "> not sure maybe I can ignore extract css from chunk files\n\nThere is an option in the ExtractTextPlugin: `allChunks`, it defaults to `false`. So by default it should ignore css in chunks.\n"
      },
      {
        "user": "leecade",
        "created_at": "2016-06-07T14:04:14Z",
        "body": "Great @sokra thank you\n"
      },
      {
        "user": "monkindey",
        "created_at": "2017-03-20T08:09:46Z",
        "body": "hi , @leecade , I suffering the react-router code splitting. When I switch different route and just download this route's static file, the js is OK, but the css not work. Can you provide your webpack.config.js or any suggestion to make it ?"
      }
    ],
    "satisfaction_conditions": [
      "CSS must be inlined into corresponding JS chunks rather than extracted as separate files",
      "Solution must work with code-splitting via System.import/dynamic imports",
      "CSS must remain functional when chunks are dynamically loaded"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:43:20"
    }
  },
  {
    "number": 2587,
    "title": "specified loader not loaded",
    "created_at": "2016-06-02T06:54:44Z",
    "closed_at": "2016-06-03T06:19:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2587",
    "body": "I specify `babel-loader` to handle files `/\\.jsx?$/`, but when load `xx.js`,  `babel-loader` do nothing.\n\nI means `xx.js` file (written in ES6) is saved to dest with original source. Then I inject `console.log` to `babel-loader`'s entry function, and find the `babel-loader` even not loaded.\n\nMy config:\n\n``` js\n  {\n        test: /\\.jsx?$/,\n        loader: 'babel',\n        include: [APP_PATH],\n        exclude: /(node_modules|bower_components)/,\n        query: {\n            presets: ['es2015', 'stage-0', 'react']\n        }\n    }\n```\n\nCompiled `xx.js`:\n\n``` js\nwebpackJsonp([1],[\n/* 0 */\n/***/ function(module, exports) {\n\n    import React from 'react';\n        ...\n        ...\n/***/ }\n]);\n```\n\nwebpack version:\n\n``` bash\n    \"babel-core\": \"^6.8.0\",\n    \"babel-loader\": \"^6.2.4\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"webpack\": \"^1.13.0\"\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2587/comments",
    "author": "creeperyang",
    "comments": [
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T03:06:13Z",
        "body": "And is there a way to know which loaders are used to handle one file really?\n\nWe specify loaders by `test`, and then do these loaders really handle the file when running?\n\n\n---\n\n@bebraw I wrote a plugin to log out some info, maybe it will help to solve the problem.\n\n``` bash\n# compilation.plugin('normal-module-loader'...)   log format: console.log('nml', module.debugId, module.request)\n\n# default will run into success\nnml 1001 /MyProj/node_modules/html-webpack-plugin/lib/loader.js!/MyProj/front/viewer/index.html\nnml 1002 /MyProj/node_modules/react-dom/index.js\nnml 1003 /MyProj/node_modules/react/react.js\nnml 1004 /MyProj/node_modules/react-router/lib/index.js\nnml 1005 /MyProj/node_modules/babel-loader/index.js?{\"presets\":[\"/MyProj/node_modules/babel-preset-es2015/index.js\",\"/MyProj/node_modules/babel-preset-react/index.js\",\"/MyProj/node_modules/babel-preset-stage-0/index.js\"]}!/MyProj/front/viewer/app.js\nbabel-loader loaded------------------- # babel-loader loaded (inject console.log into babel-loader lib)\nnml 1006 /MyProj/node_modules/html-webpack-plugin/node_modules/lodash/lodash.js\nnml 1007 /MyProj/node_modules/react/lib/ReactDOM.js\n...\n\n# Then I move /MyProj/front/viewer --> /tmp/xxx/viewer\n# sad, babel-loader even not loaded\nnml 1001 /MyProj/node_modules/html-webpack-plugin/lib/loader.js!/private/tmp/xxx/viewer/index.html\nnml 1002 /private/tmp/xxx/viewer/app.js # why js file not processed by babel-loader?\nnml 1003 /MyProj/node_modules/react-dom/index.js\nnml 1004 /MyProj/node_modules/react/react.js\nnml 1005 /MyProj/node_modules/react-router/lib/index.js\nnml 1006 /MyProj/node_modules/react/lib/ReactDOM.js\nnml 1007 /MyProj/node_modules/html-webpack-plugin/node_modules/lodash/lodash.js\nnml 1008 /MyProj/node_modules/react/lib/React.js\n...\n```\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T04:58:10Z",
        "body": "It might be that move causing the issues. Try changing `include: [APP_PATH],` to form `include: [APP_PATH, TMP_PATH],` where `TMP_PATH` points to `/private/tmp/xxx/`.\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T05:24:32Z",
        "body": "~~I tried but it does not work.~~\n\nIt makes sense.\n\nSeems I should write **`/private/tmp` rather than `/tmp`**. Um, maybe it's better to point out the problem about symbol link in document.\n\nThanks very much.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T05:39:43Z",
        "body": "> Seems I should write /private/tmp rather than /tmp. Um, maybe it's better to point out the problem about symbol link in document.\n\nI don't know how it goes with symlinks. Did you get it to work?\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T06:17:46Z",
        "body": "Yes, `babel-loader` is loaded to handle js files.\n\nI should specify `include: ['/private/tmp/xxx/viewer']` instead of  `include: ['/tmp/xxx/viewer']`.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2016-06-03T06:18:35Z",
        "body": "Ok. Safe to close?\n"
      },
      {
        "user": "creeperyang",
        "created_at": "2016-06-03T06:19:28Z",
        "body": "Yep. Thanks.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how webpack's `include`/`exclude` paths resolve when files are moved or symlinked",
      "Clear method to verify which loaders are actually applied to specific files",
      "Guidance on absolute path handling in webpack configuration",
      "Documentation of path resolution edge cases when files reside outside original project structure"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:43:33"
    }
  },
  {
    "number": 2557,
    "title": "webpack2 : remove comments with LoaderOptionsPlugin",
    "created_at": "2016-05-27T06:46:32Z",
    "closed_at": "2016-05-28T08:19:05Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2557",
    "body": "Hi there,\n\nBefore with the UglifyPlugin, I could pass { comments: false } as options, how to do the same with LoaderOptionsPlugin ?\n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2557/comments",
    "author": "Makio64",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-27T12:13:34Z",
        "body": "The UglifyPlugin is not affected by the change. LoaderOptionsPlugin is only relevant for loaders that has minimizer includes (i. e. css, html).\n"
      },
      {
        "user": "Makio64",
        "created_at": "2016-05-28T08:19:05Z",
        "body": "Ok, I was thinking LoaderOptionsPlugin replace the UglifyPlugin.\nThanks to clarify.\n"
      },
      {
        "user": "aegyed91",
        "created_at": "2016-07-24T12:31:04Z",
        "body": "@sokra is there anything else that tells the affected loaders to use the minimizer option?\n\nfor example `NODE_ENV=production` or the `-p` flag\n"
      }
    ],
    "satisfaction_conditions": [
      "Clarify the distinct purposes of LoaderOptionsPlugin vs. UglifyPlugin",
      "Identify valid methods to configure comment removal for JS minification",
      "Explain how environment variables/flags affect minimizer options",
      "Differentiate between loader-specific options and general minification settings"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:43:45"
    }
  },
  {
    "number": 2530,
    "title": "Webpack watch doesn't output the new build",
    "created_at": "2016-05-21T11:27:37Z",
    "closed_at": "2016-05-24T04:49:14Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2530",
    "body": "Watch recognizes a change in the file and the command line shows it works on a new build, but the file on the file system never gets updated. As soon as I quit the watching process and start it again the correct output is produced. Also running it manually with the following command doesn't give any more insight nor output:\n\n```\nwebpack --progress --colors --watch --display-error-details --display-chunks --profile\n```\n## webpack.config.js\n\n``` js\nvar path = require('path');\nmodule.exports = {\n    devtool : 'source-map',\n    watch: true,\n    context: __dirname + '/App',\n    entry: './index',\n    output: {\n        path: path.join(__dirname, 'wwwroot/dist'),\n        filename: '[name]-bundle.js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.ts', '.tsx', '.css'],        \n    },\n    module: {\n        loaders: [\n            { test: /\\.tsx?$/, loaders: ['ts-loader']},\n            { test: /\\.css$/, loader: 'style-loader'}\n        ]\n    },\n    plugins: []\n}\n```\n\nThe file in question is quite simple and I'm only changing text in the paragraph for testing:\n## index.tsx\n\n```\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nclass Dashboard extends React.Component<{}, {}> {\n    render(){\n        return(\n            <p>Hello!</p>\n        );\n    }\n}\n\nReactDOM.render(<Dashboard />, document.getElementById('app'));\n```\n## Output\n\n```\nwebpack --progress --colors --watch --display-error-details --display-chunks --profile\n 10% 0/1 build modulests-loader: Using typescript@1.8.10 and c:\\Development\\Enterprise Net2 Manager\\Portal\\tsconfig.json\n1481ms build modules\n8ms seal\n8ms optimize\n10ms hashing\n20ms create chunk assets\n2ms additional chunk assets\n354ms optimize chunk assets\n 90% optimize assetsemiting\n450ms optimize assets\n41ms emit\nHash: 80d04fe372c49da68b8f\nVersion: webpack 1.13.0\nTime: 2404ms\n             Asset    Size  Chunks             Chunk Names\n    main-bundle.js  693 kB       0  [emitted]  main\nmain-bundle.js.map  810 kB       0  [emitted]  main\nchunk    {0} main-bundle.js, main-bundle.js.map (main) 655 kB [rendered]\n     + 168 hidden modules\n204ms build modules\n3ms seal\n10ms optimize\n4ms hashing\n9ms create chunk assets\n2ms additional chunk assets\n382ms optimize chunk assets\n 90% optimize assetsemiting\n372ms optimize assets\n39ms emit\nHash: 93b94d46db379ef92759\nVersion: webpack 1.13.0\nTime: 1028ms\n             Asset    Size  Chunks             Chunk Names\n    main-bundle.js  693 kB       0  [emitted]  main\nmain-bundle.js.map  810 kB       0  [emitted]  main\nchunk    {0} main-bundle.js, main-bundle.js.map (main) 655 kB [rendered]\n     + 168 hidden modules\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2530/comments",
    "author": "janpieterz",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-05-22T19:18:00Z",
        "body": "Does this only apply to typescript files or does the same happen with normal js files?\n"
      },
      {
        "user": "janpieterz",
        "created_at": "2016-05-23T04:17:07Z",
        "body": "I tried, same behavior. Then I removed the '/App' from the context and specified the entry with /App and it started working (both JS and TS(x)).\n\nSince the output did pick up the change but never the file, should this be a bug? Below my (now working) config:\n\n``` js\nvar path = require('path');\nmodule.exports = {\n    devtool : 'source-map',\n    watch: true,\n    context: __dirname,\n    entry: './App/index',\n    output: {\n        path: path.join(__dirname, 'wwwroot/dist'),\n        filename: '[name]-bundle.js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.ts', '.tsx', '.css'],        \n    },\n    module: {\n        loaders: [\n            { test: /\\.tsx?$/, loaders: ['ts-loader']},\n            { test: /\\.css$/, loader: 'style-loader'}\n        ]\n    },\n    plugins: []\n}\n```\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-05-23T16:46:02Z",
        "body": "Just spotted that you are using windows. This means `__dirname + \"/App\"` is an invalid path as windows uses `\\` as separator. Better use `path.resolve(__dirname, \"App\")`.\n"
      }
    ],
    "satisfaction_conditions": [
      "Identifies why Webpack watch mode fails to update filesystem output despite detecting changes",
      "Explains Windows-specific path handling requirements in Webpack configuration",
      "Addresses proper context/entry path configuration relationships",
      "Validates solution works for both TypeScript and JavaScript files",
      "Explains why manual rebuilds work while watch mode doesn't"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:44:24"
    }
  },
  {
    "number": 2513,
    "title": "webpack: how to ordering dependencies between entries",
    "created_at": "2016-05-18T18:16:38Z",
    "closed_at": "2016-05-26T01:26:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2513",
    "body": "in my webpack config file I have two multy entries:\n\n```\nmodule.exports = {\n      entry:{\n             lib:[\"./scripts/file1.js\",\"./scripts/fil2.ts\"],\n             app:[\"./scripts/login.js\",\"./public/HSplitLayout.js\"]\n      },\n      output: {\n        path: 'builds',\n        filename: '[name].js',\n        publicPath: 'builds/',\n        libraryTarget: \"var\"\n    }\n}\n```\n\nI want to ensure that the lib.js file is completely loaded before app.js is loaded.\n\nThank you for your help\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2513/comments",
    "author": "Trispa",
    "comments": [
      {
        "user": "megakoresh",
        "created_at": "2016-05-25T09:38:11Z",
        "body": "Just put `<script src=\"lib.js\"/>` before `<script src=\"app.js\" />` in your page...\nBrowser loads scripts in order synchronously. \nIt is more complicated when you bundle multiple entries in one file, I noticed it sometimes does mangle the order. The best solution in this case is to just have your main application as an entry, and from there just `require` or `import` your library.\n"
      },
      {
        "user": "Trispa",
        "created_at": "2016-05-26T01:26:24Z",
        "body": "thanks @megakoresh  i did that and it work well now \n"
      }
    ],
    "satisfaction_conditions": [
      "Ensures lib.js loads before app.js in execution order",
      "Maintains separate entry points for library and application code"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:44:34"
    }
  },
  {
    "number": 2346,
    "title": "Under devServer key in webpack.config.js, I set hot: true option, but it dosen't work ",
    "created_at": "2016-04-16T08:22:17Z",
    "closed_at": "2016-04-17T07:39:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2346",
    "body": "CLI: webpack-dev-server --hot works, \nbut\n\n``` js\ndevServer:{\n    hot: true\n}\n```\n\nit throws Uncaught Error: [HMR] Hot Module Replacement is disabled.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2346/comments",
    "author": "Authorlove",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2016-04-16T08:30:25Z",
        "body": "If you use `hot: true` that way, I think you need to set\n\n``` javascript\nplugins: [\n  new webpack.HotModuleReplacementPlugin()\n]\n```\n\nA little confusing, yeah.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why the CLI flag works while the config-based approach fails",
      "Clarification of required plugin dependencies for HMR functionality",
      "Differentiation between devServer configuration and plugin requirements",
      "Explanation of implicit vs explicit plugin loading mechanisms"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:44:55"
    }
  },
  {
    "number": 2295,
    "title": "[Question]: when will `module` be undefined in UMD webpackBootstrap.",
    "created_at": "2016-04-07T22:45:26Z",
    "closed_at": "2016-04-08T15:06:46Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2295",
    "body": "In webpack UMD wrap, the 2nd **else** is detecting the `exports` ONLY here,  when would the `module` be empty and we have chance to attach it to the `exports`?  I saw when we call with any module, we always passing it as `modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);`\n\nDoes it related with nodejs `module.exports=exports={};`?\n\n``` js\n(function webpackUniversalModuleDefinition(root, factory) {\n    if(typeof exports === 'object' && typeof module === 'object')\n        module.exports = factory();\n    else if(typeof define === 'function' && define.amd)\n        define([], factory);\n    else {\n        var a = factory();\n        for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n    }\n})(this, function() {\n});\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2295/comments",
    "author": "pwang2",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-04-08T14:39:59Z",
        "body": "CommonJs 1.0 only specifies the `exports` object. node.js added `module` (CommonJs 1.1.1).\n"
      },
      {
        "user": "pwang2",
        "created_at": "2016-04-08T15:06:46Z",
        "body": "Gotcha, I am still too new to the awesomeness.  Thank you.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of CommonJS module system variations and their impact on `module` availability",
      "Clarification of environments where UMD wrapper's second else branch would execute",
      "Differentiation between CommonJS specification and Node.js implementation details"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:45:06"
    }
  },
  {
    "number": 2247,
    "title": "using commonChunk",
    "created_at": "2016-03-29T07:11:39Z",
    "closed_at": "2016-04-05T14:00:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2247",
    "body": "It says unexpect token,but I don't know how to solve it,thanks for reply.\n\n```\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n  entry: {\n    app:[\n    'webpack-hot-middleware/client',\n    './client/client.js'\n  ],\n    \"vendor\":['react','react-dom']\n},\n\nresolve: {\n        alias: {\n            'react':require('react'),\n            'react-dom':require('react-dom')\n\n        }\n    },\n  output: {\n    path: require(\"path\").resolve(\"./dist\"),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  plugins: [\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n    new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.js\",Infinity)\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'react-hot',\n        loader:'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          presets: ['react', 'es2015', 'react-hmre']\n        }\n      }\n    ]\n  }\n}\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2247/comments",
    "author": "EasonWang01",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-03-30T17:36:31Z",
        "body": "`'react':require('react'),` -> `'react':require.resolve('react'),`\n"
      },
      {
        "user": "EasonWang01",
        "created_at": "2016-04-05T14:00:14Z",
        "body": "Thanks for reply!  the config below works good\n\n```\nvar webpack = require('webpack');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n  entry: {\n    app:[\n    'webpack-hot-middleware/client',\n    './client/client.js'\n  ],\n  vendor:['react','react-dom']\n},\n\n  output: {\n    path: require(\"path\").resolve(\"./dist\"),\n    filename: 'bundle.js',\n    publicPath: '/'\n  },\n  plugins: [\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n     new webpack.optimize.CommonsChunkPlugin(\"vendor\", \"vendor.bundle.js\"),\n  ],\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          presets: ['react', 'es2015','stage-0', 'react-hmre']\n        }\n      }\n    ]\n  }\n}\n\n\n```\n"
      }
    ],
    "satisfaction_conditions": [
      "Correct resolution of module aliases in Webpack configuration",
      "Proper configuration of CommonsChunkPlugin parameters",
      "Valid loader configuration without conflicting definitions",
      "Inclusion of necessary Babel presets for React/ES2015 transpilation"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:45:13"
    }
  },
  {
    "number": 2192,
    "title": "Force re-compile of file from loader",
    "created_at": "2016-03-16T11:55:22Z",
    "closed_at": "2016-03-24T20:08:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2192",
    "body": "I have file A that requires a file B. When compiling file A I either know about B in advance or I know there might possibly exists file B in future (without knowing its path so I can't use dependency system). When A doesn't know B, it emits error. When I come across valid file B (in loader), I need to recompile A to reflect dependency on discovered B.\n\nIs there a way to force re-compile of A when I discover file B without setting anything in advance? It can even be some internal API that Watcher uses to emit changes. I did go through source code, but wasn't able to find my answer.\n\nFyi, I'm finishing goog-loader for Google Closure Library with advanced compilation for production. I have a good enough version, but recovery of invalid dependency without editing file A would be nice.\n\nThank you.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2192/comments",
    "author": "aleskafka",
    "comments": [
      {
        "user": "aleskafka",
        "created_at": "2016-03-17T11:08:05Z",
        "body": "Allow me one more question with possible solution. I just need to know some edgy implementation details I could take advantage of.\n\nHow does async callback and emitWarning/emitError works? Does emitted warning cancel pending callback or not? Documentation provides no clue about this behaviour.\n\nWhen I find that A is missing required file B, can I emitWarning and store pending callback for latter when I discover file B?\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-03-21T20:43:54Z",
        "body": "You could add a context dependency, which is a dependency to a whole directory. Is this enough for your use case?\n\nIf not you can flag the file as not cacheable and call `invalidate` on the watcher.\n\n> When I find that A is missing required file B, can I emitWarning and store pending callback for latter when I discover file B?\n\nno. compilation will not finish until callback is invoked.\n"
      },
      {
        "user": "aleskafka",
        "created_at": "2016-03-21T22:06:52Z",
        "body": "Thank you. Yes, context dependency could be solution. I'd imagine it could expect glob pattern as argument, but even dirname is fine. I did notice this method exists, but not that it works with directories.\n\nAllow me two follow-up questions.\n\nHow does file dependency works? Say I have file A dependent on B and file B dependent on C. Only file C is changed. Which files are recompiled?\n\nHow much overhead is there when I addContextDependency for all application files, but in 99% cases callback is provided with cached source from previous compilation (because there wasn't change that would force re-compilation of those files). Is webpack internally optimized when same source is provided to callback? Or is overhead minimum?\n\nThank you for your time.\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-03-24T18:10:39Z",
        "body": "> Say I have file A dependent on B and file B dependent on C. Only file C is changed.\n\nIt really A' depends on A and B, B' depends on B and C. Where A' and B' are the generated files from A and B. So when C changes only B' is recomplied.\n\n> Is webpack internally optimized when same source is provided to callback?\n\nyes, if it results in the same hash it is not threaded as changed module.\n"
      },
      {
        "user": "aleskafka",
        "created_at": "2016-03-24T20:08:16Z",
        "body": "Thank you for your support. I can finalize goog-loader now, thanks to your input. If it stops acting weird on wrong namespace detection (with automatic revival of all files), I will release it for community.\n"
      }
    ],
    "satisfaction_conditions": [
      "Supports dynamic addition of dependencies discovered after initial compilation",
      "Provides mechanism to invalidate compilation cache for dependent files",
      "Handles dependencies without requiring full path knowledge upfront",
      "Maintains compilation efficiency with frequently unchanged dependencies",
      "Allows dependency relationships to propagate through the compilation chain"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:45:23"
    }
  },
  {
    "number": 2010,
    "title": "I have a question __dirname setting of node config",
    "created_at": "2016-02-06T08:41:52Z",
    "closed_at": "2016-02-09T01:39:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/2010",
    "body": "Hi there.\n\nI'm using express with webpack.\nI found __dirname needs set for node and i set like below\n\n```\nnode: {\n  __dirname: false\n}\n```\n\nDocs comment `__dirname: true` is real __dirname, but Above works. Not `true` (true output '')\nIs Docs correct, or not ?\n\nthanks about greate tool!\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/2010/comments",
    "author": "blackpost38",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-02-08T08:40:18Z",
        "body": "`__dirname: false` disables webpack processing of `__dirname`. If you run the bundle in node.js it falls back to the __dirname of node.js (which makes sense for target: node).\n`__dirname: true` let webpack replace `__dirname` with the path relative to you `context`. Makes sense for target: web if you need the path.\n"
      },
      {
        "user": "krzkaczor",
        "created_at": "2016-02-09T00:02:14Z",
        "body": "I just have the same problem. I think that documentation is very unclear about what it will do:\n\n```\n__dirname: true (real dirname), \"mock\" (\"/\") or false\n```\n"
      },
      {
        "user": "blackpost38",
        "created_at": "2016-02-09T01:39:56Z",
        "body": "Great answer thanks!\nI wish to apply that comment to docs :)\n"
      },
      {
        "user": "jmlane",
        "created_at": "2016-03-23T19:55:19Z",
        "body": "Yeah, this is confusing. The documentation reads as if the boolean values should have the opposite effect in the resulting bundle.\n"
      },
      {
        "user": "tejohnso",
        "created_at": "2018-01-30T21:10:15Z",
        "body": "> __dirname: false disables webpack processing of __dirname. If you run the bundle in node.js it falls back to the __dirname of node.js (**which makes sense for target: node**).\r\n\r\n@sokra given what you said above re what makes sense, why is webpack unexpectedly breaking node's behaviour? Shouldn't the node options all be *false* automatically if target is *node*? The mangling of __dirname is counter intuitive and without warning. And in most cases, the output built for node will operate incorrectly rather than failing."
      }
    ],
    "satisfaction_conditions": [
      "Clarify the relationship between webpack's __dirname configuration and Node.js runtime behavior",
      "Explain how target environment (node vs web) affects __dirname behavior",
      "Resolve documentation ambiguity about boolean values for __dirname configuration"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:45:33"
    }
  },
  {
    "number": 1945,
    "title": "Any Way to Reverse the Order of Require.Context?",
    "created_at": "2016-01-28T16:30:44Z",
    "closed_at": "2016-01-30T11:23:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1945",
    "body": "In my particular use case, I have a folder structure like this:\n- angular\n  - directives\n    - date-range\n      - index.js\n    - module.js\n- module.js\n\nAnd id like to simply do\n\n``` javascript\nrequire.context('./angular');\n```\n\nRight now it seems to include files in the bundle in child first order. So my directives are getting put in the file before the module definitions. Essentially Id like files higher up in the hierarchy to appear before files deeper in the hierarchy.\n\nIs there anyway to do this with require.context?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1945/comments",
    "author": "pixelshaded",
    "comments": [
      {
        "user": "agundermann",
        "created_at": "2016-01-28T18:46:29Z",
        "body": "I don't think the order in which they are included in the bundle should really make a difference, should it? I'm guessing you're concerned about the order in which they are executed if you have implicit dependencies like\n\n``` js\n// a.js\nwindow.ModuleA = ...;\n\n// b.js\nwindow.ModuleB = /* using window.ModuleA */;\n```\n\nIn that case, I think you can achieve it like this:\n\n``` js\nvar context = require.context('./angular');\nvar modules = context.keys();\n\n// sort them\nvar sortedModules = modules.slice().sort(function(a, b) {\n  // by directory depth\n  var diff = a.match(/\\//g).length - b.match(/\\//g).length;\n  if ( diff !== 0) return diff;\n\n  // if depth is the same, sort alphabetically to make it stable\n  return a < b ? -1 : (a > b ? 1 : 0);\n});\n\n// execute them\nsortedModules.forEach(function(key) {\n  context(key);\n});\n```\n"
      },
      {
        "user": "pixelshaded",
        "created_at": "2016-01-29T12:57:22Z",
        "body": "For this use case, the module files create the modules. The directive files then add directives to those modules. If those modules aren't run and exist before the directive code is run, things won't work right. These aren't commonjs at the moment. I'm really just using webpack process (es6 babel etc) and concat all the files together.\n\nSo I started comparing the output for better understanding, and it seems I totally misunderstood what's going on. I haven't gotten to the point yet of testing the bundle on a page and had assumed that the order in which the modules appeared in output was the order they would be executed (aka a pure concat). WRONG. I didn't realize an array of module functions was being passed to the bootstrapper. This is commonjs for front end. Nothing is run until you require a module. All require.context was doing was setting up the modules. So yes, the order of modules passed to the bootstrapper doesn't matter. The order in which you require those modules does, hence your example of re-ordering the keys based on directory depth and then executing them in that new order.\n\nThanks for taking the time to answer my question.\n"
      }
    ],
    "satisfaction_conditions": [
      "Solution must ensure parent directory modules execute before child directory modules",
      "Must work with require.context's module registration pattern",
      "Should sort modules by directory depth without assuming CommonJS exports"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:45:42"
    }
  },
  {
    "number": 1938,
    "title": "[Plugin] Injecting dependencies based on contents of module",
    "created_at": "2016-01-26T19:05:45Z",
    "closed_at": "2016-01-27T16:38:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1938",
    "body": "I'm currently struggling to find a way to inject dependencies based on the contents of my module.\n\nI'm using `compiler.parser.plugin` to determine which modules I need to inject dependencies into, but it seems to be too late to inject `require` statements into the source. If I do they're not parsed and converted to the `__webpack_require__` I'm used to seeing.\n\nWhat is the recommended workflow here?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1938/comments",
    "author": "rbhalla",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-27T07:01:59Z",
        "body": "write a loader instead.\n"
      }
    ],
    "satisfaction_conditions": [
      "Solution must enable dependency injection at a stage where Webpack can process the added requires",
      "Mechanism must integrate with Webpack's module analysis pipeline",
      "Approach should allow dynamic injection based on module content analysis",
      "Must follow Webpack's recommended extension patterns"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:45:52"
    }
  },
  {
    "number": 1929,
    "title": "Should webpack build exit error code when a loader fail?",
    "created_at": "2016-01-25T10:12:04Z",
    "closed_at": "2016-01-26T19:31:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1929",
    "body": "I wrote a very simple async loader, following the documentation step by step, and calling the callback with error when some, **but** webpack just log the error in console and continue, exiting 0 as everything went fine.\n\nIs this an issue or am I missing something?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1929/comments",
    "author": "JSteunou",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2016-01-26T18:32:54Z",
        "body": "This changes with webpack 2 to a non-zero exit code. webpack 1 stays for backward compatiblitity.\n"
      },
      {
        "user": "JSteunou",
        "created_at": "2016-01-26T19:31:50Z",
        "body": "Nice, thank you @sokra looking forward for v2 then ;)\n"
      },
      {
        "user": "gmfun",
        "created_at": "2016-12-17T16:55:29Z",
        "body": "With webpack 2, when I deploy to heroku the builds fails and deploy gets rejected because of exit code 2. @sokra is there any way to disable this new feature or force webpack to exit with code 0"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how Webpack handles exit codes when loaders fail in different versions",
      "Mechanism to control Webpack's exit code behavior on loader failures",
      "Clear version compatibility guidance for exit code behavior"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:45:59"
    }
  },
  {
    "number": 1886,
    "title": "[Plugin] No events on begin/end of compiling entry points",
    "created_at": "2016-01-14T09:18:04Z",
    "closed_at": "2016-01-14T22:44:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1886",
    "body": "Hi, \n\nI'm creating a custom plugin and I need to know the begin/end event of every entry point as I should change the plugin's configuration depending on a specific entry point.\n\nReading through the docs, I can't find that event.\n\nThanks,\nJakob\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1886/comments",
    "author": "jakob101",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2016-01-14T10:27:45Z",
        "body": "Can you go a bit into detail?\n\nAs in, as far as I understand, you want to change your plugin\u2019s config per-entrypoint, right? If so, then the this-compilation event is what you need. That is used per entry.\n"
      },
      {
        "user": "jakob101",
        "created_at": "2016-01-14T10:43:00Z",
        "body": "Thank you, yeah, that's exactly what I need. Let me try that and get back to you.\n\n\n---\n\nI'm listening on this-compilation. It's getting called once, but I have 2 entrypoints. This is my code:\n\n<pre><code>entry: {\n   textX: legacyStylesShared.concat(styles),\n   textY: styles,\n },\n</code></pre>\n\nPlugin config:\n\n<pre><code>compiler.plugin(\"this-compilation\", function(compilation) {\n       console.log(\"xxx\");\n       compilation.plugin(\"normal-module-loader\", function(loaderContext, module) {\n           console.log(\"yyy\");\n       });\n   });\n</code></pre>\n"
      },
      {
        "user": "sokra",
        "created_at": "2016-01-14T20:50:13Z",
        "body": "I don't know what you try to do, but I'm pretty sure it doesn't work that way.\n\nInstead you should use multiple compilation:\n\n``` js\n[\n  { entry: \"a\", plugins: [ new YourPlugin(\"a\") ] },\n  { entry: \"b\", plugins: [ new YourPlugin(\"b\") ] }\n]\n```\n"
      },
      {
        "user": "jakob101",
        "created_at": "2016-01-14T22:44:17Z",
        "body": "I had only 1 compilation object. This will be helpful. Thank you for your help!\n"
      }
    ],
    "satisfaction_conditions": [
      "Supports per-entry-point configuration adjustments",
      "Enables isolated handling of entry points without shared compilation context"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:46:04"
    }
  },
  {
    "number": 1798,
    "title": "How does webpack search path?",
    "created_at": "2015-12-24T11:21:32Z",
    "closed_at": "2015-12-24T11:54:41Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1798",
    "body": "//webpack.config.js\nalias: {\n     header: \"./static/js/app/src/common/header.js\"\n  }\n\n//entry.js\nrequire(\"header\");\n\nModule not found: Error: Cannot resolve 'file' or 'directory' ./static/js/app/src/common/header.js in c:\\demo\\static\\js\\app\\src\\price\n\nSo,how import header.js correctly? \n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1798/comments",
    "author": "ibufu",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-12-24T11:30:26Z",
        "body": "@ibufu Can you try `path.join(__dirname, \"./static/js/app/src/common/header.js\")`? Just a hunch.\n"
      }
    ],
    "satisfaction_conditions": [
      "Clarifies how webpack resolves aliases relative to configuration file vs requiring module",
      "Explains path resolution rules for webpack aliases",
      "Provides guidance on absolute vs relative path handling in aliases",
      "Ensures module resolution works across different directory structures"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:46:11"
    }
  },
  {
    "number": 1688,
    "title": "Use CommonsChunkPlugin twice on one page",
    "created_at": "2015-11-30T19:56:25Z",
    "closed_at": "2015-12-07T22:01:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1688",
    "body": "As part of our caching strategy, I have set up a configuration where we have two instances of CommonsChunkPlugin: one for vendor scripts; one for common app code. Now we want to include both on every page. But the generated `vendor.js` and `commons.js` each include the webpack runtime, which doesn't work.\n\nIs there a way to remove the runtime from one of those bundles, or is there a different correct way to do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1688/comments",
    "author": "andrewbranch",
    "comments": [
      {
        "user": "fredericgrati",
        "created_at": "2015-12-02T10:09:12Z",
        "body": "I have two instances of CommonsChunkPlugin : vendor and common.\nwebpack.conf:\n\n```\nvar entry = {\n        profile: [ './app/frontend/javascripts/profile/main.es6'],\n        projects: [ './app/frontend/javascripts/projects/main.es6'],\n        // the vendor entry point\n        vendor: ['babel-polyfill', 'lodash', 'jquery']\n    };\n```\n\n```\n    var plugins = [\n        new webpack.optimize.CommonsChunkPlugin(\"common\", 'common' + (options.longTermCaching ? '-[chunkhash].js' : '.js'), ['projects', 'profile']),\n        new webpack.optimize.CommonsChunkPlugin(\"vendor\", 'vendor' + (options.longTermCaching ? '-[chunkhash].js' : '.js' ), ['common', 'vendor'], Infinity)\n    ];\n```\n\nThe webpack runtime is only present into the vendor bundle and I can use them like this :\n\n```\n  <script src=\"[...]/assets/vendor.js\"></script>\n  <script src=\"[...]/assets/common.js\"></script>\n  <script src=\"[...]/assets/profile.js\"></script>\n```\n\nI hope this will help you (I don't know if it is the correct way to do it but it seems to work)\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-12-02T17:54:14Z",
        "body": "> Is there a way to remove the runtime from one of those bundles, or is there a different correct way to do this?\n\n@andrewbranch You can do it the way @fredericgrati does it. One of the Plugins should have the name of the other commons chunk in the `chunks` property.\n"
      },
      {
        "user": "andrewbranch",
        "created_at": "2015-12-07T22:01:37Z",
        "body": "I'm a little confused but that seems to work nicely. Thanks!\n"
      }
    ],
    "satisfaction_conditions": [
      "Ensures webpack runtime is only included in one of the generated bundles",
      "Demonstrates proper chunk hierarchy configuration between multiple CommonsChunkPlugin instances",
      "Allows both vendor and common chunks to be included on the same page without conflicts"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:46:21"
    }
  },
  {
    "number": 1662,
    "title": "how to exclude files from loader",
    "created_at": "2015-11-23T14:43:43Z",
    "closed_at": "2015-11-23T17:13:19Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1662",
    "body": "I have the next config for webpack loaders:\n\n``` javascript\n module: {\n    loaders: [{\n      test: /\\.js$/,\n      include: rootDir + '/src',\n      loader: 'babel?presets[]=es2015'\n    }, {\n      test: /\\.css$/,\n      loader: 'style!css!autoprefixer?browsers=last 2 versions'\n    }, {\n      test: /\\.(png|gif|jpg|svg|ttf|eot|woff|woff2)$/,\n      loader: 'file?name=[path][name].[ext]'\n    }]\n  }\n```\n\nI want to exclude some files from autoprefixer loader. How can I do this? If I do like this:\n\n``` javascript\n{\n  test: /\\.css$/,\n  exclude: 'someFile',\n  loader: 'style!css!autoprefixer?browsers=last 2 versions'\n}\n```\n\nsomeFile will be excluded not only from autoprefixer loader, it will be excluded from styles, css and autoprefixer loader, but I need exclude file only from autoprefixer loader. How can I do this?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1662/comments",
    "author": "pavel06081991",
    "comments": [
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:21:37Z",
        "body": "What if you had another rule like\n\n``` javascript\n{\n  test: /\\.css$/,\n  include: 'someFile',\n  loader: 'style!css'\n}\n```\n\nto deal with that requirement?\n"
      },
      {
        "user": "pavel06081991",
        "created_at": "2015-11-23T16:44:21Z",
        "body": "What about second rule which I wrote in the privious post, in this case it will not get someFile anymore? only your rule will get this file?\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:45:25Z",
        "body": "The idea was to write separate rules based on your requirements. You would include/exclude (accepts arrays) based on your exact need.\n"
      },
      {
        "user": "pavel06081991",
        "created_at": "2015-11-23T16:47:35Z",
        "body": "I understood. Thanks, Juho.\n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-23T16:54:13Z",
        "body": "Safe to close?\n"
      }
    ],
    "satisfaction_conditions": [
      "Ability to exclude specific files from only the autoprefixer loader while preserving other CSS processing steps",
      "Solution must allow different processing rules for the same file type (CSS) based on inclusion/exclusion patterns",
      "Maintain Webpack's file matching logic while splitting loader chains",
      "Clear separation of concerns between multiple CSS processing rules"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:46:30"
    }
  },
  {
    "number": 1648,
    "title": "Make TemplatedPathPlugin's replacePathVariables available as a utility.",
    "created_at": "2015-11-19T17:31:34Z",
    "closed_at": "2015-11-20T19:06:01Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1648",
    "body": "I am working on writing a plugin that produces a manifest file when a webpack build completes.\n\nAs options to the plugin, I want to be able to let the user specify filenames/paths using webpack's available values such as `[chunk]`, etc.\n\nRight now, that logic is tied up with the TemplatedPathPlugin.\n\nI would like to break it out so that I can do something like this for my own webpack plugin:\n## Plugin\n\n```\nvar replacePathVariables = require( 'webpack/lib/TemplatedPathHelper' ).replacePathVariables;\n\nfunction manifestPluginFactory( opts ) {\n    return function() {\n        this.plugin( 'done', function( stats ) {\n            var manifestContents = _.chain( stats.compilation.namedChunks )\n                .map( function( chunk ) {\n                    // The key is the canonical way to reference the\n                    // file.\n                    var key = chunk.name;\n                    // Get the root directory\n                    var serverPath = path.join( opts.root, opts.path, opts.fileName );\n                    // Leverage existing webpack replacePathVariables method\n                    stats.chunk = chunk;\n                    serverPath = replacePathVariables( serverPath, stats );\n                    return [ key, serverPath ];\n                } )\n                .object()\n                .value();\n            fs.writeFileSync( opts.manifestDest, JSON.stringify( manifestContents ) );\n        } );\n    }\n}\n```\n## Webpack Config\n\n```\n{ plugins: [\n    manifestPluginFactory( {\n        root: '/webpack/build/',\n        path: '[hash]/mobile/',\n        fileName: '[name].js',\n        manifestDest: 'path.join( process.cwd(), 'webpack/build/manifest.json' )'\n    } )\n] }\n```\n## Output\n\nContents of file written to manifestDest:\n\n```\n{ \"mobile/store-test\": \"/webpack/build/366c982a5175bd728f12/mobile/store-test.js\",\n  \"mobile/store\": \"/webpack/build/366c982a5175bd728f12/mobile/store.js\" }\n```\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1648/comments",
    "author": "lzilioli",
    "comments": [
      {
        "user": "lzilioli",
        "created_at": "2015-11-19T17:35:56Z",
        "body": "Submitted #1649 to address this issue. Feedback welcome, I would love to get this into a release if possible.\n"
      },
      {
        "user": "sokra",
        "created_at": "2015-11-20T07:56:48Z",
        "body": "You can use it in your plugin.\n\n`TemplatedPathPlugin` is not this thing that does the replacement. It's just a plugin that add some replacements. The actual API is the hook `asset-path` that's usable by everything that has a reference to the mainTemplate (which is in the compilation).\n\n``` js\nmainTemplate.applyPluginsWaterfall(\"asset-path\", \"some string [hash]\", {\n    hash: hash,\n    chunk: chunk\n})\n```\n\nIf you want to improve something here, add a `getAssetPath(string, options)` function to the `MainTemplate` that calls the hook and replace all occurences. That would look better.\n\nsee also #427\ncc @diurnalist\n"
      },
      {
        "user": "lzilioli",
        "created_at": "2015-11-20T19:05:59Z",
        "body": "@sokra Thanks a lot for the detailed response. This does, in fact meet my needs.\n"
      }
    ],
    "satisfaction_conditions": [
      "Provides a supported way to replace path variables like [chunk], [hash], and [name] in custom plugins",
      "Works with webpack's existing templating context (chunk, hash, etc.) during build completion",
      "Integrates with webpack's plugin architecture without modifying core files",
      "Allows dynamic path generation using the same variable replacement patterns as webpack's built-in features"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:46:42"
    }
  },
  {
    "number": 1636,
    "title": "is it possible to specify sourceMappingURL?",
    "created_at": "2015-11-16T15:51:38Z",
    "closed_at": "2015-11-16T22:43:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1636",
    "body": "Hi guys.\n\nHelp, please, with the specifying of sourceMappingURL.\nWe have our own dev-server, so we need to specify sourceMappingURL as a static asset URL like **/dist/bundle.js.map**, but the default output of the webpack is \n**# sourceMappingURL=bundle.js.map**.\n\nThanks in advance.\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1636/comments",
    "author": "pkantsedalov",
    "comments": [
      {
        "user": "sokra",
        "created_at": "2015-11-16T19:25:28Z",
        "body": "You can use the `append` option for the SourceMapDevToolPlugin. i. e. `append: \"\\n//# sourceMappingURL=/dist/\"`\n"
      },
      {
        "user": "pkantsedalov",
        "created_at": "2015-11-16T22:13:59Z",
        "body": "Thanx a lot for the response.\n\nThe final result is the next one: \n\n```\nnew webpack.SourceMapDevToolPlugin({\n    filename: '[file].map',\n    append: `\\n//# sourceMappingURL=${path}[url]`\n})\n```\n"
      }
    ],
    "satisfaction_conditions": [
      "Ability to customize the sourceMappingURL path format in webpack output",
      "Solution must work with webpack's source map generation mechanism",
      "Support for dynamic URL construction in source maps"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:46:49"
    }
  },
  {
    "number": 1225,
    "title": "Invalid arguments: 'delay' error",
    "created_at": "2015-07-07T14:20:10Z",
    "closed_at": "2015-11-14T18:06:53Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1225",
    "body": "The current version (1.8.11) is throwing an error in NodeWatchFileSystem,js file (line 29) in the NodeWatchFileSystem.prototype.watch method\n\nif(typeof delay !== \"number\")\n    throw new Error(\"Invalid arguments: 'delay'\");\n\nAccording our research the delay parameter, which is expected as a number, is in fact an object as you can see below: \n{ aggregateTimeout: 200 }\n\nWe used the same version in a previous project and this issues wasn't throwed there so it's posible that some change in the way delay is built introduced this error. \n\nThanks\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1225/comments",
    "author": "amilcar-infante",
    "comments": [
      {
        "user": "gihrig",
        "created_at": "2015-07-09T05:44:16Z",
        "body": "> The current version (1.8.11) is throwing an error in NodeWatchFileSystem,js file (line 29) in the NodeWatchFileSystem.prototype.watch method\n\nLatest as of July-8-2015, is 1.10.1 - solved that error for me :-)\n\n```\n\"webpack\": \"1.10.1\",\u2028\"\n\u2028\"webpack-dev-server\": \"1.10.1\"\n```\n"
      },
      {
        "user": "amilcar-infante",
        "created_at": "2015-07-10T11:56:17Z",
        "body": "Excellent, thanks gihrig!!!\n"
      }
    ],
    "satisfaction_conditions": [
      "Resolves the type mismatch error for the 'delay' parameter",
      "Addresses the root cause of the parameter type change"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:47:15"
    }
  },
  {
    "number": 1202,
    "title": "When will modules in ensure() be loaded to page? ",
    "created_at": "2015-06-27T03:37:43Z",
    "closed_at": "2015-11-16T06:31:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/1202",
    "body": "After reading the docs and examples of Code Split,\nI don't really understand it.\n\n``` js\nvar a = require(\"a\");\nvar b = require(\"b\");\nrequire.ensure([\"c\"], function(require) {\n    require(\"b\").xyz();\n    var d = require(\"d\");\n});\n```\n\nMy question is when will \"c\" be loaded?\nWhen should I use require.ensure()?\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/1202/comments",
    "author": "littlee",
    "comments": [
      {
        "user": "IngwiePhoenix",
        "created_at": "2015-06-27T07:18:40Z",
        "body": "A module that is targeted using require.ensure is loaded asynchronously. That means, it is loaded /after/ the page itself. Imagine you had a jQuery plugin, that you only wanted to load in certain situations, then you would use this. Here is a bit of code that I use to autoload Highlight.JS only when code blocks are there. This allows me to keep the main script\u2019s filesize low, but load additional code on-demand.\n\n```\nif($(\"body\").find(\"pre code\").length > 0) {\n    require.ensure([\n        // Should only load the hljs stuff we need...\n        \"highlight.js\",\n        // Stylesheet.\n        \"highlight.js/styles/hybrid.css\"\n    ], function(hljs){\n        hljs.configure({\n            tabReplace: Array(5).join(\" \")\n        });\n        $(\"body\").find(\"pre code\").each(function(i,v){\n            if($(v).prop(\"class\").match(/language-.+/ig) != null) {\n                // The current block has a language- class.\n                $(v).addClass(\"hascode\");\n                $(v).parent().addClass(\"hascode\");\n                hljs.highlightBlock(v);\n            }\n        });\n    });\n}\n```\n\nwhenever you use require.ensure, that module is put into a separate chunk (aka. another file) which is added to the page once the call occurs. That is also why you have to supply a callback. It will only then be called when the async loading is done and the module is ready to be used.\n\nOn Sa. Juni 27 2015 05:37:48 Littlee wrote:\n\n> After reading the docs and examples of Code Split,\n> I don't really understand it.\n> \n> var a = require(\"a\"\n> );\n> \n> var b = require(\"b\"\n> );\n> \n> require.ensure([\"c\"], function(require\n> ) {\n> \n> require(\"b\"\n> ).xyz();\n> \n> var d = require(\"d\"\n> );\n> });\n> \n> My question is when will \"c\" be loaded?\n> When should I use require.ensure()?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n"
      },
      {
        "user": "littlee",
        "created_at": "2015-06-27T08:27:25Z",
        "body": ":smile: :+1: \n"
      },
      {
        "user": "bebraw",
        "created_at": "2015-11-14T18:12:44Z",
        "body": "@littlee Did you understand the explanation?\n"
      },
      {
        "user": "littlee",
        "created_at": "2015-11-16T03:38:11Z",
        "body": "yes, if what @IngwiePhoenix said is true.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explain the asynchronous loading behavior of modules specified in require.ensure()",
      "Clarify use cases for require.ensure() with real-world scenarios",
      "Address the relationship between callback execution and module availability"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:47:21"
    }
  },
  {
    "number": 799,
    "title": "Question: circular angular dependencies?",
    "created_at": "2015-02-18T11:46:14Z",
    "closed_at": "2015-11-15T10:51:51Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/webpack/webpack/issues/799",
    "body": "Hi, i have two files\n\n``` javascript\n//app.js\n(function(){\n  //initialize myApp\n  var myApp = angular.module('myApp', []);\n  //requiring constans.js to resolve USER_ROLES\n  require('constans.js');\n  //configure\n  myApp.config(function ($routeProvider, USER_ROLES) {\n    //something with USER_ROLES, e.g. call $routeProvider\n    $routeProvider\n        .when('/admin', {\n            templateUrl: 'admin.tpl.html',\n            controller: 'adminController',\n            access: {\n                authorizedRoles: [USER_ROLES.admin]\n            }\n        });\n    //...\n  });\n  module.exports = myApp;\n})();\n```\n\n``` javascript\n//constants.js\n(function(){\n  //Uncaught ReferenceError: myApp is not defined\n  myApp.constant('USER_ROLES', {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n  });\n})();\n```\n\nconstant.js dependent on app.js and vice versa\nhow can I resolve circular dependencies, to prevent **Uncaught ReferenceError: myApp is not defined**, that constant USER_ROLES use myApp.\nCan anyone give me advice? Thx\n",
    "comments_url": "https://api.github.com/repos/webpack/webpack/issues/799/comments",
    "author": "f0def",
    "comments": [
      {
        "user": "jhnns",
        "created_at": "2015-02-19T00:42:33Z",
        "body": "Welcome to Angular.js and its cool module system :grin: \n\nThere are two possibilities:\n\nMake `constant.js` just return an object instead of registering the constants automatically:\n\n``` javascript\n// constants.js\nmodule.exports = {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n};\n\n// app.js\nmyApp.constant('USER_ROLES', require('./constants.js'));\n```\n\nOr inject myApp to `constants.js`\n\n``` javascript\n// constants.js\nmodule.exports = function (myApp) {\n    myApp.constant('USER_ROLES', {\n        'all': '*',\n        'admin': 'ROLE_ADMIN',\n        'user': 'ROLE_USER'\n    });\n};\n\n// app.js\nrequire('./constants.js')(myApp);\n```\n"
      },
      {
        "user": "f0def",
        "created_at": "2015-02-19T11:15:02Z",
        "body": "@jhnns thanks you for possibilities\nAs you think, and this option can be used? Or is it a bad practice?\nsomething like this:\n\n``` javascript\n//app.js\n(function(){\n  var myApp = angular.module('myApp', []);\n  //calling module.exports in the middle of the app.js\n  module.exports = myApp;\n  //requiring constans.js to resolve USER_ROLES\n  require('constans.js');\n  //configure\n})();\n```\n\n``` javascript\n//constants.js\n(function(){\n  //requiring app.js\n  var myApp= require('app');\n  myApp.constant('USER_ROLES', {\n    'all': '*',\n    'admin': 'ROLE_ADMIN',\n    'user': 'ROLE_USER'\n  });\n})();\n```\n\n\n---\n\n@jhnns thx again, I began to use both methods (I do not use the method of last my response)\n"
      }
    ],
    "satisfaction_conditions": [
      "Eliminates circular dependency between app.js and constants.js",
      "Ensures myApp module is available when defining constants",
      "Maintains AngularJS dependency injection pattern",
      "Avoids runtime errors during module initialization",
      "Works with CommonJS module system patterns"
    ],
    "_classification": {
      "category": "Does not need build environment",
      "timestamp": "2025-04-05 00:47:30"
    }
  }
]