{
  "number": 1509,
  "title": "Eslint installation issues",
  "created_at": "2017-07-31T16:07:04Z",
  "closed_at": "2017-07-31T16:10:03Z",
  "labels": [
    "question"
  ],
  "url": "https://github.com/airbnb/javascript/issues/1509",
  "body": "Hi,\r\nI am very new to Eslint but I would like to use your eslint configuration. Therefore I've created a new .eslintrc.json file in the root folder and put \r\n```\r\n{\r\n  \"extends\": \"airbnb\"\r\n}\r\n```\r\ninto it. Then I tried to install your config with `npm install --save eslint-config-airbnb` which threw some errors though:\r\n\r\n> +-- UNMET PEER DEPENDENCY eslint@^3.19.0 || ^4.3.0                                                                                                                             \r\n> +-- eslint-config-airbnb@15.1.0                                                                                                                                                \r\n> | +-- UNMET PEER DEPENDENCY eslint@^3.19.0 || ^4.3.0                                                                                                                           \r\n> | `-- UNMET PEER DEPENDENCY eslint-plugin-import@^2.7.0                                                                                                                        \r\n> +-- UNMET PEER DEPENDENCY eslint-plugin-import@^2.7.0                                                                                                                          \r\n> +-- UNMET PEER DEPENDENCY eslint-plugin-jsx-a11y@^5.1.1                                                                                                                        \r\n> `-- UNMET PEER DEPENDENCY eslint-plugin-react@^7.1.0      \r\n\r\n                                                                                                                     \r\n                                                                                                                                                                               \r\n\r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint@^3.19.0 || ^4.3.0 but none was installed.                                                                       \r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint-plugin-jsx-a11y@^5.1.1 but none was installed.                                                                  \r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint-plugin-import@^2.7.0 but none was installed.                                                                    \r\n> npm WARN eslint-config-airbnb@15.1.0 requires a peer of eslint-plugin-react@^7.1.0 but none was installed.                                                                     \r\n> npm WARN eslint-config-airbnb-base@11.3.1 requires a peer of eslint@^3.19.0 || ^4.3.0 but none was installed.                                                                  \r\n> npm WARN eslint-config-airbnb-base@11.3.1 requires a peer of eslint-plugin-import@^2.7.0 but none was installed.                                                               \r\n> npm WARN brawlstats.io@1.0.0 No description                                                                                                                                    \r\n> npm WARN brawlstats.io@1.0.0 No repository field.                                                                                                                              \r\n> PS C:\\Users\\user\\Documents\\project-express> ^C^C                                                                                                                         \r\n> ESLint!\r\n> Ln 1, Col 1 (27 selected)Spaces: 2UTF-8CRLFJSON master* 0\u2193 2\u219100\r\n> Close\r\n\r\nVSCode shows:\r\n> InfoCannot find module 'eslint-config-airbnb' Referenced from: c:\\Users\\user\\Documents\\project-express\\.eslintrc.json\r\n\r\n\r\nWhat am I doing wrong?",
  "comments_url": "https://api.github.com/repos/airbnb/javascript/issues/1509/comments",
  "author": "weeco",
  "comments": [
    {
      "user": "ljharb",
      "created_at": "2017-07-31T16:10:01Z",
      "body": "You're using the wrong install command: read the readme for eslint-config-airbnb for the proper one. Additionally, `--save` is for production deps, whereas eslint is a dev dep."
    },
    {
      "user": "weeco",
      "created_at": "2017-07-31T17:01:34Z",
      "body": "Thanks @ljharb that worked!\r\n\r\nFor my frontend javascript Eslint is going crazy because I don't use ES6 there and because of jquery ('$' is not defined). Is there a good solution to enable some sort of jquery configuration or do I need to disable all the rules which pop up there?"
    },
    {
      "user": "ljharb",
      "created_at": "2017-07-31T17:05:59Z",
      "body": "1) you should use ES6 + babel there\r\n2) if you don't, you'll have to use a different set of eslint rules for the non-ES6 code - you can use nested .eslintrc files for example, and extend `airbnb-base/legacy`. Separately, you can set `\"env\": { \"jquery\": true }` in your eslint config to enable jquery usage."
    }
  ],
  "satisfaction_conditions": [
    "Explanation of proper installation method for eslint-config-airbnb including peer dependencies",
    "Guidance on configuring ESLint for non-ES6 codebases",
    "Configuration solutions for jQuery environment recognition",
    "Clear instructions for managing multiple ESLint configurations",
    "Validation of IDE integration after configuration"
  ],
  "_classification": {
    "category": "Can be dockerized without any issue",
    "timestamp": "2025-04-04 23:52:58"
  },
  "git_commit_info": {
    "sha": "e8b51b278520142b5d025fd2df993d4e25d46434",
    "date": "2016-09-22T00:17:27Z",
    "message": "[eslint config] [*] [new] set `ecmaVersion` to 2017; enable object rest/spread; update `babel-preset-airbnb`",
    "author": "Jordan Harband"
  },
  "repository_info": {
    "structure_summary": ".\n./.git\n./.git/branches\n./.git/description\n./.git/hooks\n./.git/hooks/applypatch-msg.sample\n./.git/hooks/commit-msg.sample\n./.git/hooks/post-update.sample\n./.git/hooks/pre-applypatch.sample\n./.git/hooks/pre-commit.sample\n./.git/hooks/pre-merge-commit.sample\n./.git/hooks/pre-push.sample\n./.git/hooks/pre-receive.sample\n./.git/hooks/push-to-checkout.sample\n./.git/hooks/update.sample\n./.git/hooks/fsmonitor-watchman.sample\n./.git/hooks/pre-rebase.sample\n./.git/hooks/prepare-commit-msg.sample\n./.git/hooks/sendemail-validate.sample\n./.git/info\n./.git/info/exclude\n./.git/config\n./.git/objects\n./.git/objects/pack\n./.git/objects/pack/pack-4bc68bf05789e334e1b8ec0d1e732478871fe758.pack\n./.git/objects/pack/pack-4bc68bf05789e334e1b8ec0d1e732478871fe758.rev\n./.git/objects/pack/pack-4bc68bf05789e334e1b8ec0d1e732478871fe758.idx\n./.git/objects/info\n./.git/HEAD\n./.git/refs\n./.git/refs/heads\n./.git/refs/heads/master\n./.git/refs/tags\n./.git/refs/remotes\n./.git/refs/remotes/origin\n./.git/refs/remotes/origin/HEAD\n./.git/packed-refs\n./.git/logs\n./.git/logs/refs\n./.git/logs/refs/remotes\n./.git/logs/refs/remotes/origin\n./.git/logs/refs/remotes/origin/HEAD\n./.git/logs/refs/heads\n./.git/logs/refs/heads/master\n./.git/logs/HEAD\n./.git/index\n./css-in-javascript\n./css-in-javascript/README.md\n./linters\n./linters/.eslintrc\n./linters/.jshintrc\n./linters/SublimeLinter\n./linters/SublimeLinter/SublimeLinter.sublime-settings\n./packages\n./packages/eslint-config-airbnb-base\n./packages/eslint-config-airbnb-base/.babelrc\n./packages/eslint-config-airbnb-base/rules\n./packages/eslint-config-airbnb-base/rules/strict.js\n./packages/eslint-config-airbnb-base/rules/best-practices.js\n./packages/eslint-config-airbnb-base/rules/errors.js\n./packages/eslint-config-airbnb-base/rules/es6.js\n./packages/eslint-config-airbnb-base/rules/imports.js\n./packages/eslint-config-airbnb-base/rules/node.js\n./packages/eslint-config-airbnb-base/rules/style.js\n./packages/eslint-config-airbnb-base/rules/variables.js\n./packages/eslint-config-airbnb-base/test\n./packages/eslint-config-airbnb-base/test/.eslintrc\n./packages/eslint-config-airbnb-base/test/test-base.js\n./packages/eslint-config-airbnb-base/.eslintrc\n./packages/eslint-config-airbnb-base/CHANGELOG.md\n./packages/eslint-config-airbnb-base/README.md\n./packages/eslint-config-airbnb-base/index.js\n./packages/eslint-config-airbnb-base/legacy.js\n./packages/eslint-config-airbnb-base/package.json\n./packages/eslint-config-airbnb\n./packages/eslint-config-airbnb/.babelrc\n./packages/eslint-config-airbnb/base.js\n./packages/eslint-config-airbnb/legacy.js\n./packages/eslint-config-airbnb/rules\n./packages/eslint-config-airbnb/rules/react-a11y.js\n./packages/eslint-config-airbnb/rules/react.js\n./packages/eslint-config-airbnb/test\n./packages/eslint-config-airbnb/test/.eslintrc\n./packages/eslint-config-airbnb/test/test-base.js\n./packages/eslint-config-airbnb/test/test-react-order.js\n./packages/eslint-config-airbnb/.eslintrc\n./packages/eslint-config-airbnb/CHANGELOG.md\n./packages/eslint-config-airbnb/README.md\n./packages/eslint-config-airbnb/index.js\n./packages/eslint-config-airbnb/package.json\n./react\n./react/README.md\n./.gitignore\n./.travis.yml\n./README.md\n./package.json\n",
    "readme": "\n--- ./css-in-javascript/README.md ---\n# Airbnb CSS-in-JavaScript Style Guide\n\n*A mostly reasonable approach to CSS-in-JavaScript\n\n## Table of Contents\n\n1. [Naming](#naming)\n1. [Ordering](#ordering)\n1. [Nesting](#nesting)\n1. [Inline](#inline)\n1. [Themes](#themes)\n\n## Naming\n\n  - Use camelCase for object keys (i.e. \"selectors\").\n\n  > Why? We access these keys as properties on the `styles` object in the component, so it is most convenient to use camelCase.\n\n    ```js\n    // bad\n    {\n      'bermuda-triangle': {\n        display: 'none',\n      },\n    }\n\n    // good\n    {\n      bermudaTriangle: {\n        display: 'none',\n      },\n    }\n    ```\n\n  - Use an underscore for modifiers to other styles.\n\n  > Why? Similar to BEM, this naming convention makes it clear that the styles are intended to modify the element preceded by the underscore. Underscores do not need to be quoted, so they are preferred over other characters, such as dashes.\n\n    ```js\n    // bad\n    {\n      bruceBanner: {\n        color: 'pink',\n        transition: 'color 10s',\n      },\n\n      bruceBannerTheHulk: {\n        color: 'green',\n      },\n    }\n\n    // good\n    {\n      bruceBanner: {\n        color: 'pink',\n        transition: 'color 10s',\n      },\n\n      bruceBanner_theHulk: {\n        color: 'green',\n      },\n    }\n    ```\n\n  - Use `selectorName_fallback` for sets of fallback styles.\n\n  > Why? Similar to modifiers, keeping the naming consistent helps reveal the relationship of these styles to the styles that override them in more adequate browsers.\n\n    ```js\n    // bad\n    {\n      muscles: {\n        display: 'flex',\n      },\n\n      muscles_sadBears: {\n        width: '100%',\n      },\n    }\n\n    // good\n    {\n      muscles: {\n        display: 'flex',\n      },\n\n      muscles_fallback: {\n        width: '100%',\n      },\n    }\n    ```\n\n  - Use a separate selector for sets of fallback styles.\n\n  > Why? Keeping fallback styles contained in a separate object clarifies their purpose, which improves readability.\n\n    ```js\n    // bad\n    {\n      muscles: {\n        display: 'flex',\n      },\n\n      left: {\n        flexGrow: 1,\n        display: 'inline-block',\n      },\n\n      right: {\n        display: 'inline-block',\n      },\n    }\n\n    // good\n    {\n      muscles: {\n        display: 'flex',\n      },\n\n      left: {\n        flexGrow: 1,\n      },\n\n      left_fallback: {\n        display: 'inline-block',\n      },\n\n      right_fallback: {\n        display: 'inline-block',\n      },\n    }\n    ```\n\n  - Use device-agnostic names (e.g. \"small\", \"medium\", and \"large\") to name media query breakpoints.\n\n  > Why? Commonly used names like \"phone\", \"tablet\", and \"desktop\" do not match the characteristics of the devices in the real world. Using these names sets the wrong expectations.\n\n    ```js\n    // bad\n    const breakpoints = {\n      mobile: '@media (max-width: 639px)',\n      tablet: '@media (max-width: 1047px)',\n      desktop: '@media (min-width: 1048px)',\n    };\n\n    // good\n    const breakpoints = {\n      small: '@media (max-width: 639px)',\n      medium: '@media (max-width: 1047px)',\n      large: '@media (min-width: 1048px)',\n    };\n    ```\n\n## Ordering\n\n  - Define styles after the component.\n\n  > Why? We use a higher-order component to theme our styles, which is naturally used after the component definition. Passing the styles object directly to this function reduces indirection.\n\n    ```jsx\n    // bad\n    const styles = {\n      container: {\n        display: 'inline-block',\n      },\n    };\n\n    function MyComponent({ styles }) {\n      return (\n        <div {...css(styles.container)}>\n          Never doubt that a small group of thoughtful, committed citizens can\n          change the world. Indeed, it\u2019s the only thing that ever has.\n        </div>\n      );\n    }\n\n    export default withStyles(() => styles)(MyComponent);\n\n\n    // good\n    function MyComponent({ styles }) {\n      return (\n        <div {...css(styles.container)}>\n          Never doubt that a small group of thoughtful, committed citizens can\n          change the world. Indeed, it\u2019s the only thing that ever has.\n        </div>\n      );\n    }\n\n    export default withStyles(() => ({\n      container: {\n        display: 'inline-block',\n      },\n    }))(MyComponent);\n    ```\n\n## Nesting\n\n  - Leave a blank line between adjacent blocks at the same indentation level.\n\n  > Why? The whitespace improves readability and reduces the likelihood of merge conflicts.\n\n    ```js\n    // bad\n    {\n      bigBang: {\n        display: 'inline-block',\n        '::before': {\n          content: \"''\",\n        },\n      },\n      universe: {\n        border: 'none',\n      },\n    }\n\n    // good\n    {\n      bigBang: {\n        display: 'inline-block',\n\n        '::before': {\n          content: \"''\",\n        },\n      },\n\n      universe: {\n        border: 'none',\n      },\n    }\n    ```\n\n## Inline\n\n  - Use inline styles for styles that have a high cardinality (e.g. uses the value of a prop) and not for styles that have a low cardinality.\n\n  > Why? Generating themed stylesheets can be expensive, so they are best for discrete sets of styles.\n\n    ```jsx\n    // bad\n    export default function MyComponent({ spacing }) {\n      return (\n        <div style={{ display: 'table', margin: spacing }} />\n      );\n    }\n\n    // good\n    function MyComponent({ styles, spacing }) {\n      return (\n        <div {...css(styles.periodic, { margin: spacing })} />\n      );\n    }\n    export default withStyles(() => ({\n      periodic: {\n        display: 'table',\n      },\n    }))(MyComponent);\n    ```\n\n## Themes\n\n  - Use an abstraction layer such as [react-with-styles](https://github.com/airbnb/react-with-styles) that enables theming. *react-with-styles gives us things like `withStyles()`, `ThemedStyleSheet`, and `css()` which are used in some of the examples in this document.*\n\n  > Why? It is useful to have a set of shared variables for styling your components. Using an abstraction layer makes this more convenient. Additionally, this can help prevent your components from being tightly coupled to any particular underlying implementation, which gives you more freedom.\n\n  - Define colors only in themes.\n\n    ```js\n    // bad\n    export default withStyles(() => ({\n      chuckNorris: {\n        color: '#bada55',\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ color }) => ({\n      chuckNorris: {\n        color: color.badass,\n      },\n    }))(MyComponent);\n    ```\n\n  - Define fonts only in themes.\n\n    ```js\n    // bad\n    export default withStyles(() => ({\n      towerOfPisa: {\n        fontStyle: 'italic',\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ font }) => ({\n      towerOfPisa: {\n        fontStyle: font.italic,\n      },\n    }))(MyComponent);\n    ```\n\n  - Define fonts as sets of related styles.\n\n    ```js\n    // bad\n    export default withStyles(() => ({\n      towerOfPisa: {\n        fontFamily: 'Italiana, \"Times New Roman\", serif',\n        fontSize: '2em',\n        fontStyle: 'italic',\n        lineHeight: 1.5,\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ font }) => ({\n      towerOfPisa: {\n        ...font.italian,\n      },\n    }))(MyComponent);\n    ```\n\n  - Define base grid units in theme (either as a value or a function that takes a multiplier).\n\n    ```js\n    // bad\n    export default withStyles(() => ({\n      rip: {\n        bottom: '-6912px', // 6 feet\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ units }) => ({\n      rip: {\n        bottom: units(864), // 6 feet, assuming our unit is 8px\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ unit }) => ({\n      rip: {\n        bottom: 864 * unit, // 6 feet, assuming our unit is 8px\n      },\n    }))(MyComponent);\n    ```\n\n  - Define media queries only in themes.\n\n    ```js\n    // bad\n    export default withStyles(() => ({\n      container: {\n        width: '100%',\n\n        '@media (max-width: 1047px)': {\n          width: '50%',\n        },\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ breakpoint }) => ({\n      container: {\n        width: '100%',\n\n        [breakpoint.medium]: {\n          width: '50%',\n        },\n      },\n    }))(MyComponent);\n    ```\n\n  - Define tricky fallback properties in themes.\n\n  > Why? Many CSS-in-JavaScript implementations merge style objects together which makes specifying fallbacks for the same property (e.g. `display`) a little tricky. To keep the approach unified, put these fallbacks in the theme.\n\n    ```js\n    // bad\n    export default withStyles(() => ({\n      .muscles {\n        display: 'flex',\n      },\n\n      .muscles_fallback {\n        'display ': 'table',\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ fallbacks }) => ({\n      .muscles {\n        display: 'flex',\n      },\n\n      .muscles_fallback {\n        [fallbacks.display]: 'table',\n      },\n    }))(MyComponent);\n\n    // good\n    export default withStyles(({ fallback }) => ({\n      .muscles {\n        display: 'flex',\n      },\n\n      .muscles_fallback {\n        [fallback('display')]: 'table',\n      },\n    }))(MyComponent);\n    ```\n\n  - Create as few custom themes as possible. Many applications may only have one theme.\n\n  - Namespace custom theme settings under a nested object with a unique and descriptive key.\n\n    ```js\n    // bad\n    ThemedStyleSheet.registerTheme('mySection', {\n      mySectionPrimaryColor: 'green',\n    });\n\n    // good\n    ThemedStyleSheet.registerTheme('mySection', {\n      mySection: {\n        primaryColor: 'green',\n      },\n    });\n    ```\n\n---\n\nCSS puns adapted from [Saijo George](http://saijogeorge.com/css-puns/).\n\n\n\n--- ./packages/eslint-config-airbnb-base/README.md ---\n# eslint-config-airbnb-base\n\n[![npm version](https://badge.fury.io/js/eslint-config-airbnb-base.svg)](http://badge.fury.io/js/eslint-config-airbnb-base)\n\nThis package provides Airbnb's base JS .eslintrc as an extensible shared config.\n\n## Usage\n\nWe export two ESLint configurations for your usage.\n\n### eslint-config-airbnb-base\n\nOur default export contains all of our ESLint rules, including ECMAScript 6+. It requires `eslint` and `eslint-plugin-import`.\n\n1. Ensure packages are installed with correct version numbers by running:\n  ```sh\n  (\n    export PKG=eslint-config-airbnb-base;\n    npm info \"$PKG\" peerDependencies --json | command sed 's/[\\{\\},]//g ; s/: /@/g' | xargs npm install --save-dev \"$PKG\"\n  )\n  ```\n\n  Which produces and runs a command like:\n\n  ```sh\n    npm install --save-dev eslint-config-airbnb-base eslint@^#.#.# eslint-plugin-import@^#.#.#\n  ```\n\n2. Add `\"extends\": \"airbnb-base\"` to your .eslintrc\n\n### eslint-config-airbnb-base/legacy\n\nLints ES5 and below. Requires `eslint` and `eslint-plugin-import`.\n\n1. Ensure packages are installed with correct version numbers by running:\n  ```sh\n  (\n    export PKG=eslint-config-airbnb-base;\n    npm info \"$PKG\" peerDependencies --json | command sed 's/[\\{\\},]//g ; s/: /@/g' | xargs npm install --save-dev \"$PKG\"\n  )\n  ```\n\n  Which produces and runs a command like:\n\n  ```sh\n  npm install --save-dev eslint-config-airbnb-base eslint@^3.0.1 eslint-plugin-import@^1.10.3\n  ```\n\n2. Add `\"extends\": \"airbnb-base/legacy\"` to your .eslintrc\n\nSee [Airbnb's overarching ESLint config](https://npmjs.com/eslint-config-airbnb), [Airbnb's Javascript styleguide](https://github.com/airbnb/javascript), and the [ESlint config docs](http://eslint.org/docs/user-guide/configuring#extending-configuration-files) for more information.\n\n## Improving this config\n\nConsider adding test cases if you're making complicated rules changes, like anything involving regexes. Perhaps in a distant future, we could use literate programming to structure our README as test cases for our .eslintrc?\n\nYou can run tests with `npm test`.\n\nYou can make sure this module lints with itself using `npm run lint`.\n\n\n\n--- ./packages/eslint-config-airbnb/README.md ---\n# eslint-config-airbnb\n\n[![npm version](https://badge.fury.io/js/eslint-config-airbnb.svg)](http://badge.fury.io/js/eslint-config-airbnb)\n\nThis package provides Airbnb's .eslintrc as an extensible shared config.\n\n## Usage\n\nWe export three ESLint configurations for your usage.\n\n### eslint-config-airbnb\n\nOur default export contains all of our ESLint rules, including ECMAScript 6+ and React. It requires `eslint`, `eslint-plugin-import`, `eslint-plugin-react`, and `eslint-plugin-jsx-a11y`.\n\n1. Ensure packages are installed with correct version numbers by running:\n  ```sh\n  (\n    export PKG=eslint-config-airbnb;\n    npm info \"$PKG\" peerDependencies --json | command sed 's/[\\{\\},]//g ; s/: /@/g' | xargs npm install --save-dev \"$PKG\"\n  )\n  ```\n\n  Which produces and runs a command like:\n\n  ```sh\n  npm install --save-dev eslint-config-airbnb eslint@^#.#.# eslint-plugin-jsx-a11y@^#.#.# eslint-plugin-import@^#.#.# eslint-plugin-react@^#.#.#\n  ```\n\n2. Add `\"extends\": \"airbnb\"` to your .eslintrc\n\n### eslint-config-airbnb/base\n\nThis entry point is deprecated. See [eslint-config-airbnb-base](https://npmjs.com/eslint-config-airbnb-base).\n\n### eslint-config-airbnb/legacy\n\nThis entry point is deprecated. See [eslint-config-airbnb-base](https://npmjs.com/eslint-config-airbnb-base).\n\nSee [Airbnb's Javascript styleguide](https://github.com/airbnb/javascript) and\nthe [ESlint config docs](http://eslint.org/docs/user-guide/configuring#extending-configuration-files)\nfor more information.\n\n## Improving this config\n\nConsider adding test cases if you're making complicated rules changes, like anything involving regexes. Perhaps in a distant future, we could use literate programming to structure our README as test cases for our .eslintrc?\n\nYou can run tests with `npm test`.\n\nYou can make sure this module lints with itself using `npm run lint`.\n\n\n",
    "readme_filenames": [
      "./css-in-javascript/README.md",
      "./packages/eslint-config-airbnb-base/README.md",
      "./packages/eslint-config-airbnb/README.md"
    ]
  },
  "llm_calls_before_build": 0,
  "dockerfile_attempt_1": 1,
  "dockerfile": "FROM node:14\nWORKDIR /app\n# Clone the airbnb/javascript repository and checkout the specific commit\nRUN git clone https://github.com/airbnb/javascript.git . \\\n    && git checkout e8b51b278520142b5d025fd2df993d4e25d46434\n# Install exact versions of peer dependencies to prevent conflicts\nRUN npm install --save-dev \\\n    eslint-config-airbnb@15.1.0 \\\n    eslint@4.3.0 \\\n    eslint-plugin-import@2.7.0 \\\n    eslint-plugin-jsx-a11y@5.1.1 \\\n    eslint-plugin-react@7.1.0\n# Verify installation by checking installed packages\nRUN npx eslint --version \\\n    && npm ls eslint-config-airbnb \\\n    && npm ls eslint \\\n    && npm ls eslint-plugin-import \\\n    && npm ls eslint-plugin-jsx-a11y \\\n    && npm ls eslint-plugin-react",
  "dockerfile_build_success": true,
  "successful_candidate_index": 1,
  "successful_candidate_attempt": 1,
  "successful_candidate_improvement_attempt": 0,
  "llm_calls_total": 5
}