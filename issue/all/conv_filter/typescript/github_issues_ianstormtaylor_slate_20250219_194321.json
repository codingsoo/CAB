[
  {
    "number": 3567,
    "title": "onChange gets fired even no change is made (i.e. if I put it out of focus without any changes made)",
    "created_at": "2020-03-29T22:45:46Z",
    "closed_at": "2020-03-30T20:02:22Z",
    "labels": [
      "question",
      "discussion"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/3567",
    "body": "#### Do you want to request a _feature_ or report a _bug_?\r\n\r\n*Bug*\r\n\r\n#### What's the current behavior?\r\n\r\n`onChange` gets fired even if I don't make any changes on editable text. For example, if I put focus on editable text, make no changes and immediately click out of it,  'onChange' callback is triggered. How can I prevent this behavior? \r\nIt's problem because every `onChange` re-renders my component where editable text is located and I don't want this additional re-render.\r\n\r\n#### What's the expected behavior?\r\n\r\nSlate version (npm packages):\r\n _\"slate\": \"*\",_\r\n_\"slate-history\": \"*\",_\r\n_\"slate-react\": \"*\",_\r\n\r\nBrowser: Chrome / Safari / Firefox / Edge\r\nOS: Mac\r\n",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/3567/comments",
    "author": "ebasic",
    "comments": [
      {
        "user": "cameracker",
        "created_at": "2020-03-30T16:39:24Z",
        "body": "onChange is fired as part of selection change. This is an unavoidable behavior and is required for slate to work. Instead, I'd focus on making your `onChange` loop as tight as possible. The rerender impact, even for a large document, should not be a burden for react."
      },
      {
        "user": "ebasic",
        "created_at": "2020-03-30T20:00:57Z",
        "body": "Solved and shared code by **@piyushpatel** on Slack:\r\n\r\n`const handleChange = useCallback(val => {`\r\n    `const ops = editor.operations.filter(o => {`\r\n      `if (o) {`\r\n        `return o.type !== 'set_selection';`\r\n     ` }`\r\n      `return false;`\r\n   ` });`\r\n\r\n   ` if (ops && Array.isArray(ops) && ops.length > 0) {`\r\n      `onChange(val);`\r\n    `}`\r\n  `}, []);`"
      }
    ]
  },
  {
    "number": 2049,
    "title": "Schema normalization doesn't seem to work as outlined in the changelog",
    "created_at": "2018-08-07T23:22:25Z",
    "closed_at": "2018-08-07T23:35:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/2049",
    "body": "I'm trying to update my schema, but it seems like the _only_ method for matching that works is to write rules exactly like this:\r\n\r\n```javascript\r\nconst schemaRules = {\r\n  blocks: {\r\n    list_item: {\r\n      nodes: [\r\n        { match: { type: 'paragraph' } },\r\n        { match: { type: 'ol_list' } },\r\n        { match: { type: 'ul_list' } },\r\n      ],\r\n      normalize: (change, error) => {\r\n        //  Some code\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nTrying something like this has no effect:\r\n\r\n```javascript\r\nconst schemaRules = {\r\n  blocks: {\r\n    list_item: {\r\n      nodes: [{ type: 'paragraph' }, { type: 'ol_list' }, { type: 'ul_list' }],\r\n      normalize: (change, error) => {\r\n        //  Some code\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI tried with the property name `node` and `nodes` but no effect. Am I doing something wrong here? More examples would be great!",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/2049/comments",
    "author": "Nantris",
    "comments": [
      {
        "user": "ianstormtaylor",
        "created_at": "2018-08-07T23:35:57Z",
        "body": "@Slapbox that's correct, the second syntax doesn't work because the objects in the `nodes` array are not match objects, but constraints themselves like `min/max/etc.` They constrain match objects as their `.match` property."
      },
      {
        "user": "ianstormtaylor",
        "created_at": "2018-08-07T23:37:58Z",
        "body": "If you're looking to only allow certain types of nodes, it would be:\r\n\r\n```js\r\nconst schemaRules = {\r\n  blocks: {\r\n    list_item: {\r\n      nodes: [\r\n        { \r\n          match: [{ type: 'paragraph' }, { type: 'ol_list' }, { type: 'ul_list' }]\r\n        }\r\n      ],\r\n      normalize: (change, error) => {\r\n        //  Some code\r\n      }\r\n    }\r\n  }\r\n}\r\n```"
      },
      {
        "user": "Nantris",
        "created_at": "2018-08-07T23:49:16Z",
        "body": "Thanks for the clarification @ianstormtaylor, I see my misunderstanding now.\r\n\r\nThis choice makes a lot of sense. Thanks for the constant improvements!"
      }
    ]
  },
  {
    "number": 1036,
    "title": "Horizontal Rules in markup?",
    "created_at": "2017-08-29T00:26:31Z",
    "closed_at": "2017-09-04T22:27:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/1036",
    "body": "Should a < hr > tag/dividing line that contains no children be implemented as a mark or as a block with custom behavior?\r\n\r\nNot quite sure how to tackle this, so I would appreciate any input.",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/1036/comments",
    "author": "anewusr",
    "comments": [
      {
        "user": "dmitrizzle",
        "created_at": "2017-08-29T05:49:02Z",
        "body": "Definitely a block. I had it set up in my schema as:\r\n```javascript\r\n    divider: props => {\r\n      const { node, state } = props\r\n      const focus = state.isFocused && state.selection.hasEdgeIn(node)\r\n      const className = focus ? \"focus\" : \"nofocus\"\r\n      return <hr className={className} />\r\n    },\r\n```\r\nAbove adds a class name to your `<hr/>` when it's selected; it will be removed with backspace."
      },
      {
        "user": "YurkaninRyan",
        "created_at": "2017-08-29T14:01:30Z",
        "body": "@anewusr `isVoid`, is the property you should look up.  It was an a-ha moment for me.  Basically is just a node without editable content"
      },
      {
        "user": "anewusr",
        "created_at": "2017-08-29T17:29:25Z",
        "body": "Excellent advice! Thanks @YurkaninRyan  and @dmitrizzle "
      }
    ]
  },
  {
    "number": 762,
    "title": "prevent focusing void inline nodes",
    "created_at": "2017-04-27T08:09:58Z",
    "closed_at": "2017-05-08T08:30:17Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/762",
    "body": "is it possible to prevent focusing void inline nodes and make them act like characters? i.e. only allow the cursor the be on either side of the node, not \"on\" it.\r\n\r\nI tried to create a rule for this, but couldn't quite figure out how to check if a node has focus:\r\n```js\r\n{\r\n  match: node => node.kind === 'inline' && node.isVoid,\r\n  validate: node => // how to check if the node has focus here?,\r\n  normalize: (transform, node) => // move cursor to either side\r\n}\r\n```",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/762/comments",
    "author": "httnn",
    "comments": [
      {
        "user": "SamyPesse",
        "created_at": "2017-04-27T09:00:37Z",
        "body": "The selection and the nodes are two distinct data sets. The schema rules can't be used to \"normalize\" the selection.\r\n\r\nInstead you could apply a transform in your `onChange` if the selection is in a void node:\r\n\r\n```js\r\nclass App extends React.Component {\r\n    state = {\r\n        state: initialState\r\n    }\r\n\r\n    onChange = (state) => {\r\n        const { startBlock, document } = state;\r\n\r\n        // The selection is in a void node.\r\n        if (startBlock.isVoid) {\r\n            const next = document.getNextBlock(startBlock.key);\r\n        \r\n            // The transform can be improved to move to next OR prev block\r\n            // By comparing the selection with the one of this.state.state\r\n            // And testing that \"next\" exists\r\n            state = state.transform()\r\n                .collapseToStartOf(nextBlock)\r\n                .apply()\r\n        }\r\n    \r\n        this.setState({ state })\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n            <Editor\r\n                state={this.state.state}\r\n                onChange={this.onChange}\r\n                />\r\n        )\r\n    }\r\n}\r\n```\r\n\r\nThis example can be improved, and maybe @ianstormtaylor has a better/simpler solution :)\r\n"
      },
      {
        "user": "SamyPesse",
        "created_at": "2017-04-27T09:02:55Z",
        "body": "Note: it could be exported as a Slate plugin using `onBeforeChange`:\r\n\r\n```js\r\nconst noSelectionInVoid = {\r\n    onBeforeChange(state) {\r\n       const { startBlock, document } = state\r\n\r\n        // The selection is in a void node.\r\n        if (startBlock.isVoid) {\r\n            const next = document.getNextBlock(startBlock.key);\r\n        \r\n            // The transform can be improved to move to next OR prev block\r\n            // By comparing the selection with the one of this.state.state\r\n            // And testing that \"next\" exists\r\n            state = state.transform()\r\n                .collapseToStartOf(nextBlock)\r\n                .apply()\r\n        }\r\n\r\n        return state\r\n    }\r\n};\r\n```\r\n\r\nand you can pass this plugin to your `<Editor plugins={[ noSelectionInVoid ]} />`\r\n"
      },
      {
        "user": "httnn",
        "created_at": "2017-04-27T11:18:05Z",
        "body": "@SamyPesse I see, think I'll go with the plugin approach then :)\r\n\r\none more thing: how would I get `this.state.state` for comparing previous cursor position in the plugin example?"
      },
      {
        "user": "httnn",
        "created_at": "2017-05-08T08:30:17Z",
        "body": "I don't think it's possible to read the current state in `onBeforeChange` in a plugin"
      },
      {
        "user": "httnn",
        "created_at": "2017-05-30T11:52:39Z",
        "body": "for anyone interested, managed to solve this eventually with a plugin like this:\r\n```js\r\nclass SkipVoidNodesPlugin {\r\n  direction = '';\r\n  onKeyDown(event, keyData, state) {\r\n    if (keyData.key === 'left') {\r\n      this.direction = 'Previous';\r\n    } else if (keyData.key === 'right') {\r\n      this.direction = 'Next';\r\n    } else {\r\n      this.direction = '';\r\n    }\r\n  }\r\n  onBeforeChange(state) {\r\n    if (this.direction !== '') {\r\n      const focusedNode = state.focusInline || state.focusText;\r\n      if (focusedNode.isVoid) {\r\n        return state.transform()[`collapseToEndOf${this.direction}Text`]().apply();\r\n      }\r\n    }\r\n  }\r\n}\r\n```"
      },
      {
        "user": "ara4n",
        "created_at": "2018-05-12T23:31:31Z",
        "body": "for those looking at this today, the bad news is that `onBeforeChange`, `Transform` and `State` have gone. the good news seems to be that the same trick works if you do it in `onChange` with `Change`, with something like this:\r\n\r\n```js\r\n    onChange = (change: Change) => {\r\n        let value = change.value;\r\n        if (this.direction !== '') {\r\n            const focusedNode = value.focusInline || value.focusText;\r\n            if (focusedNode.isVoid) {\r\n                change = change[`collapseToEndOf${ this.direction }Text`]();\r\n                value = change.value;\r\n            }\r\n        }\r\n        // ...\r\n        this.setState({\r\n            value,\r\n        });\r\n    }\r\n```"
      }
    ]
  },
  {
    "number": 739,
    "title": "Use removeNodeByKey on the last node breaks editor's state",
    "created_at": "2017-04-21T09:18:23Z",
    "closed_at": "2017-04-21T10:53:42Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/739",
    "body": "Hello! Not sure if this is intended or not but if you remove the last node in a editor's state with `removeNodeByKey` the editor state became unworkable, the documents nodes became an empty `List` and I got a warning and an error in console every time I try to type something in the editor:\r\n\r\n`Warning: An object was passed to a Node method instead of a `key` string. This was previously supported, but is being deprecated because it can have a negative impact on performance. The object in question was: null`\r\n\r\nand the error:\r\n\r\n`Uncaught Error: Invalid `key` argument! It must be either a block, an inline, a text, or a string. You passed: \"null\".`",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/739/comments",
    "author": "ingro",
    "comments": [
      {
        "user": "skogsmaskin",
        "created_at": "2017-04-21T09:23:27Z",
        "body": "Hi! You should set up a rule in you schema that takes care of this for you, as Slate doesn't have any assumptions of what should happen (like which content should be insterted when empty). This is a good thing really, however I think this should be better documented, as this question comes up often.\r\n\r\nFor example:\r\n\r\n```\r\n    rules: [\r\n      // Rule to insert a default block when document is empty\r\n      {\r\n        match: node => {\r\n          return node.kind === 'document'\r\n        },\r\n        validate: document => {\r\n          return document.nodes.size ? null : true\r\n        },\r\n        normalize: (transform, document) => {\r\n          const block = Block.create({\r\n            type: 'paragraph'\r\n          })\r\n          transform\r\n            .insertNodeByKey(document.key, 0, block)\r\n            .focus()\r\n        }\r\n      }\r\n    ]\r\n```"
      },
      {
        "user": "ingro",
        "created_at": "2017-04-21T10:53:42Z",
        "body": "Well thanks for the clarification, I'm using `slate` only from few days and I've missed the `rules` section on the schema! Thanks again, I can close this!"
      }
    ]
  },
  {
    "number": 641,
    "title": "Uncaught TypeError: node.getRanges is not a function",
    "created_at": "2017-03-02T15:31:43Z",
    "closed_at": "2017-03-02T16:54:11Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/641",
    "body": "```\r\nconst firstNode = state.document.nodes.get(0);\r\n\r\nstate.transform().removeTextByKey(firstNode.key, 0, 3);\r\n```\r\n\r\nThrows \"Uncaught TypeError: node.getRanges is not a function\" at \"Object.Transforms.removeTextOperation\" at line 250\r\n\r\nIt seems like the node doesn't have a getRanges function.\r\n",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/641/comments",
    "author": "santiagopuentep",
    "comments": [
      {
        "user": "ianstormtaylor",
        "created_at": "2017-03-02T16:54:11Z",
        "body": "Hey @santiagopuentep, I think this is actually because `removeTextByKey` requires a `kind == 'text'` node, instead of a block or inline. I believe if you do:\r\n\r\n```js\r\nconst firstText = state.document.getFirstText()\r\nstate.transform().removeTextByKey(firstText.key, 0, 3)\r\n```\r\n\r\n...it will work! Let me know if not though."
      },
      {
        "user": "santiagopuentep",
        "created_at": "2017-03-02T19:20:06Z",
        "body": "That worked. Thanks!\r\n\r\nShouldn't it have a check for the correct node? Or maybe a more descriptive error?\r\n\r\nAlso, I don't see `Document.getFirstText()` documented. I think it's missing.\r\n\r\nGreat job with the editor by the way, I love it, **much** better than draft.js that was driving me pretty crazy with some things and was hard to understand."
      }
    ]
  },
  {
    "number": 222,
    "title": "Capability to disable console.log statements.",
    "created_at": "2016-08-04T12:07:29Z",
    "closed_at": "2016-08-04T17:57:29Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/222",
    "body": "They are useful when debugging slate, but they get in the way when I attempt to debug other parts of my system.  Being able to toggle them would be great.\n",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/222/comments",
    "author": "ctrlplusb",
    "comments": [
      {
        "user": "ianstormtaylor",
        "created_at": "2016-08-04T17:57:28Z",
        "body": "Hey @ctrlplusb do you mean the `debug` calls? Right now they should be Local Storage based, so that if you have `debug=\"*\"` set they will show up. You can disable all debug calls by removing the `debug` key, or you can disable Slate's only by doing something like `debug=\"*,-slate:*\"` I believe. Let me know if that helps!\n"
      },
      {
        "user": "ctrlplusb",
        "created_at": "2016-08-04T18:57:15Z",
        "body": "Aha, sorry I had no idea you were using the debug library. Should have checked. Thanks!\n"
      },
      {
        "user": "ianstormtaylor",
        "created_at": "2016-08-04T19:26:09Z",
        "body": "No worries!\n"
      }
    ]
  },
  {
    "number": 136,
    "title": "Restoring previous selection",
    "created_at": "2016-07-20T20:48:54Z",
    "closed_at": "2016-07-20T22:16:18Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/ianstormtaylor/slate/issues/136",
    "body": "Frikken loving this project!!\n\nI have an auto save pipeline which will then result in a redux auto prop pass in, which then causes a rerender.  This works okay from a content standpoint as it is simply reloading the content I just saved, however I am having problems with restoring the selection state.\n\nAt the moment I track all changes via the `onChange` event.  Then when I receive the \"persisted\" state back from redux I want to try and restore the selection using the existing state that is currently on the component, but I can't seem to get this to work.  \n\nHere is my current attempt:\n\n``` javascript\n// The state from props/redux.\nconst editorState = Raw.deserialize(this.props.editorState);\n\n// Any existing tracked state.\nconst { editorState: existingEditorState } = this.state;\n\nlet selectionProps;\n\nif (!!existingEditorState) {\n  selectionProps = {\n    anchorKey: existingEditorState.anchorKey,\n    anchorOffset: existingEditorState.anchorOffset,\n    focusKey: existingEditorState.focusKey,\n    focusOffset: existingEditorState.focusOffset,\n    isFocused: existingEditorState.isFocused,\n    isBackward: existingEditorState.isBackward\n  };\n}\n\nthis.setState({\n  editorState: !!props\n    // Try re-set the existing selection.\n    ? editorState.transform().moveTo(selectionProps).apply()\n    // First time render, use as is. \n    : editorState\n});\n```\n\nAny ideas?  Have I completely misunderstood the API docs? :)\n",
    "comments_url": "https://api.github.com/repos/ianstormtaylor/slate/issues/136/comments",
    "author": "ctrlplusb",
    "comments": [
      {
        "user": "ctrlplusb",
        "created_at": "2016-07-20T21:06:21Z",
        "body": "Ok, hmmm, I think I have a bit more insight into the issue. I see there are `anchorKey` and `focusKey` props.  But I believe these keys will be different on my nodes after I deserialize the updated state and pass it to `Editor`. \n"
      },
      {
        "user": "ianstormtaylor",
        "created_at": "2016-07-20T21:53:38Z",
        "body": "Yup, that's right. The keys are randomly generated whenever you serialize/deserialize an `State` right now, so the selection won't find the same nodes anymore. It seems like the better way to go would be to have the editor not need to re-load the identical state, since this would result in a lot of extra re-rendering since the immutable objects would also all be re-created.\n"
      },
      {
        "user": "ctrlplusb",
        "created_at": "2016-07-20T22:03:24Z",
        "body": "Brilliant, that is exactly what I went for in the end.  :)\n"
      },
      {
        "user": "ctrlplusb",
        "created_at": "2016-07-20T22:07:01Z",
        "body": "One thing that just came to mind... \n\nWould this affect an SSR implementation? i.e. the unique keys create a different hash of the react content which results in the reconciler doing a full rerender?\n"
      },
      {
        "user": "ianstormtaylor",
        "created_at": "2016-07-20T22:16:08Z",
        "body": "Possibly! I think it might end up reconciling because of the changes keys (although it would for changed immutable instances regardless), but it won't end up re-rendering. But just that once is probably fine. The real performance issue would be reconciling/rerendering on each content change I think. But I might be missing something there, haven't looked into it deeply yet!\n"
      },
      {
        "user": "ianstormtaylor",
        "created_at": "2016-07-20T22:16:18Z",
        "body": "Going to close for now, glad that helped!\n"
      }
    ]
  }
]