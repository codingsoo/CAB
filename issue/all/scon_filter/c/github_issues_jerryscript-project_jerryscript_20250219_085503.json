[
  {
    "number": 4798,
    "title": "Using the JerryScript Parser to make other tooling",
    "created_at": "2021-10-21T10:40:41Z",
    "closed_at": "2021-10-28T11:33:39Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/4798",
    "body": "Hello!\r\n\r\nI was looking at ESBuild and other alternatives to Webpack and Rollup that are not written in JS themselves and wondered if it was possible to utilize the JerryScript parser?\r\n\r\nLooking at the `jerry-core/parser` files, it seems that it would be possible to. But the \"public\" headers in `/include` don't seem to mention the parser at all (or I just overlooked it, quite possible).\r\n\r\nWhat function would I be going for to just parse JS into an AST and then walk or possibly re-write it? For instance, to re-write imports, or to append other functions and alike.\r\n\r\nThanks and kind regards,\r\nIngwie",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/4798/comments",
    "author": "IngwiePhoenix",
    "comments": [
      {
        "user": "rerobika",
        "created_at": "2021-10-28T11:18:49Z",
        "body": "The function you are looking for does not exists since JerryScript's parser does not build AST. It generates the bytecode while reading the source and the scanner component is used to guide the parser on situations where a simple lookahead for the next token is not enough."
      },
      {
        "user": "IngwiePhoenix",
        "created_at": "2021-10-28T11:33:39Z",
        "body": "Ohhh, I see. Thank you! I wasn't aware that the parser immediately goes into outputting bytecode. I'll have to look somewhere else for a pure to-AST parser then.\r\n\r\nI am closing this since the question is answered; but if you have an idea, i'd be happy to hear about it!"
      }
    ],
    "satisfaction_conditions": [
      "Clarification of JerryScript's parser limitations regarding AST generation",
      "Identification of alternative approaches for pure AST parsing",
      "Explanation of parser capabilities required for code transformation tasks"
    ]
  },
  {
    "number": 4263,
    "title": "jerry-script snapshot documentation doesn't explain how to generate snapshot for function (-f)",
    "created_at": "2020-10-01T14:45:01Z",
    "closed_at": "2020-10-01T14:51:48Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/4263",
    "body": "I spend some time trying to understand how to use `jerry-generate` to generate bycode for functions and not scripts \r\n(jerry_generate_function_snapshot vs jerry_generate_snapshot)\r\n\r\nthe jerry-generate --help is not really helpful:\r\n```\r\n./jerry-snapshot --help                                                       jerryscript/git/master !\r\n./jerry-snapshot [-h] [COMMAND]\r\n\r\n  -h, --help            print this help and exit\r\n  COMMAND               specify the command\r\n\r\nAvailable commands:\r\n  generate\r\n  litdump\r\n  merge\r\n\r\nPassing -h or --help after a command displays its help.\r\n```\r\n\r\nTo figure I need to use: \r\n`./jerry-snapshot generate ./function.js -f _function`\r\n\r\nI think the `-f` option is explained nowhere in the doc, I figured it from the code.\r\n\r\n###### JerryScript revision\r\nmaster: 0ffe1665\r\n",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/4263/comments",
    "author": "jvermillard",
    "comments": [
      {
        "user": "rerobika",
        "created_at": "2020-10-01T14:49:35Z",
        "body": "Hi @jvermillard!\r\n\r\nPassing `--help` after `generate` cli options gives you more detailed information about the capabilities of the snapshot generator.\r\n\r\n```\r\n$ build/bin/jerry-snapshot generate --help\r\nbuild/bin/jerry-snapshot generate [-h] [-s] [-f ARGUMENTS] [--load-literals-list-format FILE]\r\n  [--show-opcodes] [-o FILE] [FILE]\r\n\r\n  -h, --help            print this help and exit\r\n  -s, --static          generate static snapshot\r\n  -f, --generate-function-snapshot ARGUMENTS\r\n                        generate function snapshot with given arguments\r\n  --load-literals-list-format FILE\r\n                        import literals from list format (for static snapshots)\r\n  --show-opcodes        print generated opcodes\r\n  -o FILE               specify output file name (default: js.snapshot)\r\n  FILE                  input source file\r\n\r\n```"
      },
      {
        "user": "jvermillard",
        "created_at": "2020-10-01T14:51:48Z",
        "body": "damn I tried `jerry-snapshot --help generate` and `jerry-snapshot help generate` not this one and wait straight ot the code :facepalm:  \r\n\r\nthanks"
      }
    ],
    "satisfaction_conditions": [
      "Clear documentation/instructions for accessing command-specific help flags",
      "Explicit explanation of the '-f' flag's purpose and usage context",
      "Intuitive help system structure that matches user expectations",
      "Comprehensive documentation of all snapshot generation options"
    ]
  },
  {
    "number": 3144,
    "title": "Help with getting name of registered jerry_external_handler_t name, please.",
    "created_at": "2019-09-21T18:06:46Z",
    "closed_at": "2019-09-27T11:23:28Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/3144",
    "body": "How to get information from const **jerry_value_t function_object** and **const jerry_value_t function_this** in code like below. I need to get the name of called external handler (some_handler) inside this handler, is it possible? Not to provide by arguments[], but to get from  function_object for example.\r\nPlease help. And what is the structure of **function_object** and **function_this** to use them in a code.\r\n\r\n#include <stdio.h>\r\n#include \"jerryscript.h\"\r\n\r\nstatic jerry_value_t\r\nsome_handler (const jerry_value_t function_object,\r\n               const jerry_value_t function_this,\r\n               const jerry_value_t arguments[],\r\n               const jerry_length_t arguments_count)\r\n{\r\n\t\r\n  return jerry_create_undefined ();\r\n}\r\n\r\nint\r\nmain (void)\r\n{\r\n  const jerry_char_t script[] = \"call_handler('First arg');\";\r\n  const jerry_length_t script_size = sizeof (script) - 1;\r\n\r\n  jerry_init (JERRY_INIT_EMPTY);\r\n\r\n  {\r\n    jerry_value_t global_object = jerry_get_global_object ();\r\n    jerry_value_t property_name_print = jerry_create_string ((const jerry_char_t *) \"call_handler\");\r\n    jerry_value_t property_value_func = jerry_create_external_function (print_handler);\r\n    jerry_value_t set_result = jerry_set_property (global_object, property_name_print, property_value_func);\r\n\r\n    jerry_release_value (set_result);\r\n    jerry_release_value (property_value_func);\r\n    jerry_release_value (property_name_print);\r\n    jerry_release_value (global_object);\r\n  }\r\n\r\n  jerry_value_t parsed_code = jerry_parse (NULL, 0, script, script_size, JERRY_PARSE_NO_OPTS);\r\n\r\n  if (!jerry_value_is_error (parsed_code))\r\n  {\r\n    jerry_value_t ret_value = jerry_run (parsed_code);\r\n    jerry_release_value (ret_value);\r\n  }\r\n  jerry_release_value (parsed_code);\r\n  jerry_cleanup ();\r\n  return 0;\r\n}\r\n\r\nThanks a lot!",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/3144/comments",
    "author": "rafail-ufa",
    "comments": [
      {
        "user": "galpeter",
        "created_at": "2019-09-26T14:31:29Z",
        "body": "Hi!\r\n\r\nBy default an external method (created via `jerry_create_external_function`) does not have a name.\r\n\r\nHowever, you can attach a `name` property to the created function object. This `name` property then can be accessed via the `function_object` argument in the C method (or at any other place if required).\r\n\r\nExample to set/get `name` property for an external function (snippet):\r\n\r\n```c\r\nstatic jerry_value_t some_handler (\r\n    const jerry_value_t function_object,\r\n    const jerry_value_t function_this,\r\n    const jerry_value_t arguments[],\r\n    const jerry_length_t arguments_count)\r\n{   \r\n    jerry_value_t name_val = jerry_create_string ((const jerry_char_t *) \"name\");\r\n    jerry_value_t prop = jerry_get_property (function_object, name_val);\r\n\r\n    jerry_size_t string_size = jerry_get_string_size (prop);\r\n    jerry_char_t prop_str[string_size + 1];\r\n\r\n    jerry_size_t copied =\r\n        jerry_substring_to_char_buffer (prop,\r\n                                        0,\r\n                                        string_size,\r\n                                        prop_str,\r\n                                        string_size);\r\n    prop_str[copied] = '\\0';\r\n\r\n    jerry_release_value (prop);\r\n    jerry_release_value (name_val);\r\n\r\n    printf(\"Called function with name: %s\\n\", prop_str);\r\n\r\n    return jerry_create_undefined;\r\n}\r\n\r\nvoid set_function_name(jerry_value_t func, char* name) {\r\n    jerry_value_t name_key = jerry_create_string ((const jerry_char_t *) \"name\");\r\n    jerry_value_t name_value = jerry_create_string ((const jerry_char_t *) name);\r\n    jerry_value_t set_result = jerry_set_property (func, name_key, name_value);\r\n    // TODO: check set result if there is an error\r\n    jerry_release_value(set_result);\r\n    jerry_release_value(name_value);\r\n    jerry_release_value(name_key);\r\n}\r\n\r\nint main() {\r\n    const jerry_char_t script[] = \"call_handler('First arg');\";\r\n    const jerry_length_t script_size = sizeof (script) - 1;\r\n\r\n    current_instance_p = jerry_create_instance(512 * 1024, instance_alloc, NULL);\r\n    jerry_init (JERRY_INIT_EMPTY);\r\n\r\n    {   \r\n        jerry_value_t global_object = jerry_get_global_object ();\r\n        jerry_value_t property_name_print =\r\n            jerry_create_string ((const jerry_char_t *) \"call_handler\");\r\n        jerry_value_t property_value_func = jerry_create_external_function (some_handler);\r\n\r\n        set_function_name (property_value_func, \"MyFunction\");\r\n\r\n        jerry_value_t set_result =\r\n            jerry_set_property (global_object, property_name_print, property_value_func);\r\n        // TODO: check the 'set_result' if it is an error.\r\n        jerry_release_value (set_result);\r\n        jerry_release_value (property_value_func);\r\n        jerry_release_value (property_name_print);\r\n        jerry_release_value (global_object);\r\n\r\n    }\r\n\r\n    jerry_value_t parsed_code =\r\n        jerry_parse (NULL, 0, script, script_size, JERRY_PARSE_NO_OPTS);\r\n\r\n    if (!jerry_value_is_error (parsed_code))\r\n    {   \r\n        jerry_value_t ret_value = jerry_run (parsed_code);\r\n        jerry_release_value (ret_value);\r\n    }\r\n\r\n    jerry_release_value (parsed_code);\r\n    jerry_cleanup ();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn case of a native C method the `function_object` argument means the function object which was invoked (in this case this was crated via the `jerry_create_external_function` method). The `function_this` is the `this` object which used to invoke the method.\r\n\r\nFor example if the following JS code is executed in this example:\r\n\r\n```js\r\ncall_handler(\"First arg\");\r\n```\r\n\r\nThe `function_this` value is an `undefined` value (as there was no 'this' set for the function). \r\n\r\nHowever, if the following JS code is executed:\r\n\r\n```js\r\nvar my_demo = { val: 6 }\r\ncall_handler.call(my_demo, \"First arg\");\r\n```\r\n\r\nThe `function_this` will be the object referenced by the `my_demo` var."
      },
      {
        "user": "rafail-ufa",
        "created_at": "2019-09-26T15:32:23Z",
        "body": "Hi! \r\nThat really works.\r\nI thought that can get function name from function object, but really, if there is no property you can add your own.\r\n\r\n Thank you very much!\r\n\r\n> Hi!\r\n> \r\n> By default an external method (created via `jerry_create_external_function`) does not have a name.\r\n> \r\n> However, you can attach a `name` property to the created function object. This `name` property then can be accessed via the `function_object` argument in the C method (or at any other place if required).\r\n> \r\n> Example to set/get `name` property for an external function (snippet):\r\n> \r\n> ```c\r\n> static jerry_value_t some_handler (\r\n>     const jerry_value_t function_object,\r\n>     const jerry_value_t function_this,\r\n>     const jerry_value_t arguments[],\r\n>     const jerry_length_t arguments_count)\r\n> {   \r\n>     jerry_value_t name_val = jerry_create_string ((const jerry_char_t *) \"name\");\r\n>     jerry_value_t prop = jerry_get_property (function_object, name_val);\r\n> \r\n>     jerry_size_t string_size = jerry_get_string_size (prop);\r\n>     jerry_char_t prop_str[string_size + 1];\r\n> \r\n>     jerry_size_t copied =\r\n>         jerry_substring_to_char_buffer (prop,\r\n>                                         0,\r\n>                                         string_size,\r\n>                                         prop_str,\r\n>                                         string_size);\r\n>     prop_str[copied] = '\\0';\r\n> \r\n>     jerry_release_value (prop);\r\n>     jerry_release_value (name_val);\r\n> \r\n>     printf(\"Called function with name: %s\\n\", prop_str);\r\n> \r\n>     return jerry_create_undefined;\r\n> }\r\n> \r\n> void set_function_name(jerry_value_t func, char* name) {\r\n>     jerry_value_t name_key = jerry_create_string ((const jerry_char_t *) \"name\");\r\n>     jerry_value_t name_value = jerry_create_string ((const jerry_char_t *) name);\r\n>     jerry_value_t set_result = jerry_set_property (func, name_key, name_value);\r\n>     // TODO: check set result if there is an error\r\n>     jerry_release_value(set_result);\r\n>     jerry_release_value(name_value);\r\n>     jerry_release_value(name_key);\r\n> }\r\n> \r\n> int main() {\r\n>     const jerry_char_t script[] = \"call_handler('First arg');\";\r\n>     const jerry_length_t script_size = sizeof (script) - 1;\r\n> \r\n>     current_instance_p = jerry_create_instance(512 * 1024, instance_alloc, NULL);\r\n>     jerry_init (JERRY_INIT_EMPTY);\r\n> \r\n>     {   \r\n>         jerry_value_t global_object = jerry_get_global_object ();\r\n>         jerry_value_t property_name_print =\r\n>             jerry_create_string ((const jerry_char_t *) \"call_handler\");\r\n>         jerry_value_t property_value_func = jerry_create_external_function (some_handler);\r\n> \r\n>         set_function_name (property_value_func, \"MyFunction\");\r\n> \r\n>         jerry_value_t set_result =\r\n>             jerry_set_property (global_object, property_name_print, property_value_func);\r\n>         // TODO: check the 'set_result' if it is an error.\r\n>         jerry_release_value (set_result);\r\n>         jerry_release_value (property_value_func);\r\n>         jerry_release_value (property_name_print);\r\n>         jerry_release_value (global_object);\r\n> \r\n>     }\r\n> \r\n>     jerry_value_t parsed_code =\r\n>         jerry_parse (NULL, 0, script, script_size, JERRY_PARSE_NO_OPTS);\r\n> \r\n>     if (!jerry_value_is_error (parsed_code))\r\n>     {   \r\n>         jerry_value_t ret_value = jerry_run (parsed_code);\r\n>         jerry_release_value (ret_value);\r\n>     }\r\n> \r\n>     jerry_release_value (parsed_code);\r\n>     jerry_cleanup ();\r\n>     return 0;\r\n> }\r\n> ```\r\n> \r\n> In case of a native C method the `function_object` argument means the function object which was invoked (in this case this was crated via the `jerry_create_external_function` method). The `function_this` is the `this` object which used to invoke the method.\r\n> \r\n> For example if the following JS code is executed in this example:\r\n> \r\n> ```js\r\n> call_handler(\"First arg\");\r\n> ```\r\n> \r\n> The `function_this` value is an `undefined` value (as there was no 'this' set for the function).\r\n> \r\n> However, if the following JS code is executed:\r\n> \r\n> ```js\r\n> var my_demo = { val: 6 }\r\n> call_handler.call(my_demo, \"First arg\");\r\n> ```\r\n> \r\n> The `function_this` will be the object referenced by the `my_demo` var."
      }
    ],
    "satisfaction_conditions": [
      "Explanation of how to retrieve the external handler's name from function_object properties",
      "Clarification of function_object and function_this roles in handler invocation context"
    ]
  },
  {
    "number": 180,
    "title": "Faster debug version",
    "created_at": "2015-06-14T23:49:42Z",
    "closed_at": "2015-06-17T22:57:43Z",
    "labels": [
      "enhancement",
      "question",
      "normal"
    ],
    "url": "https://github.com/jerryscript-project/jerryscript/issues/180",
    "body": "As  new eval has landed, one small problem is that debug version execution has became very slow.\nCan there be some level of checking so that it might be somewhat faster for debugging?\n",
    "comments_url": "https://api.github.com/repos/jerryscript-project/jerryscript/issues/180/comments",
    "author": "seanshpark",
    "comments": [
      {
        "user": "ILyoan",
        "created_at": "2015-06-15T04:03:49Z",
        "body": "It seems like `rcs_chunked_list_t::get_prev()` and `rcs_chunked_list_t::get_next()` are called too many times in debug mode. The prominent caller of them are `assert_node_is_correct()` and `assert_list_is_correct()`. \n"
      },
      {
        "user": "ruben-ayrapetyan",
        "created_at": "2015-06-15T13:07:13Z",
        "body": "/CC @sand1k \n"
      },
      {
        "user": "sand1k",
        "created_at": "2015-06-15T14:23:07Z",
        "body": "Surrouned code of assert_list_is_correct(), assert_node_is_correct() and rcs_recordset_t::assert_state_is_correct() with `#ifdef JERRY_HEAVY_DEBUG ... #endif`, so that this checks run only for unit tests.\nPull request #193 performs the update.\n"
      },
      {
        "user": "seanshpark",
        "created_at": "2015-06-15T23:32:30Z",
        "body": "Nice!\n"
      }
    ],
    "satisfaction_conditions": [
      "Reduces execution time of debug builds by minimizing redundant checks",
      "Maintains critical debugging capabilities while optimizing performance",
      "Provides configurable levels of debug verification",
      "Targets performance bottlenecks in debug-specific validation logic"
    ]
  }
]