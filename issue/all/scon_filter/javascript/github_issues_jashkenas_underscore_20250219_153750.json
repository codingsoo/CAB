[
  {
    "number": 2574,
    "title": "Why using `slice.call(obj)` when `_.isArray(obj)` is true?",
    "created_at": "2016-07-30T13:31:49Z",
    "closed_at": "2016-07-30T16:48:59Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2574",
    "body": "In `_.toArray`:\n\n```\nif (_.isArray(obj)) return slice.call(obj);\n```\n\nWhy using `slice.call(obj)` when `_.isArray(obj)` is true?\nWhy not just return obj ? I don't understand, please tell me :)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2574/comments",
    "author": "ahonn",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-07-30T16:48:59Z",
        "body": "It's to create a new instance of an array, so modifications do the original do not affect the returned value.\n"
      },
      {
        "user": "ahonn",
        "created_at": "2016-07-31T10:21:26Z",
        "body": "Oh, I get it. Thank you for your response : )\n"
      }
    ],
    "satisfaction_conditions": [
      "Explains why creating a new array instance is necessary even when the input is already an array",
      "Clarifies the importance of immutability in this context",
      "Addresses the core principle of maintaining data integrity in returned values"
    ]
  },
  {
    "number": 2551,
    "title": "_.isObject for functions is true?",
    "created_at": "2016-06-22T11:36:25Z",
    "closed_at": "2016-06-22T15:56:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2551",
    "body": "Hey,\n\nwhy the fudge is `_.isObject(function() {}) === true`? This makes no sense. If function is an object, array should be one as well, otherwise it's pretty inconsistent. To check, whether it's a function or not they should use `_.isFunction`.\n\nCan someone explain this to me?\n\nCheers\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2551/comments",
    "author": "sateffen",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2016-06-22T15:56:37Z",
        "body": "It's because you can `fn.prop = 'value'`, making them \"objects\".\n\n> If function is an object, array should be one as well, otherwise it's pretty inconsistent.\n\nThey both are. \ud83d\ude09 \n"
      },
      {
        "user": "sateffen",
        "created_at": "2016-06-22T16:19:08Z",
        "body": "Right, `typeof []` is an object, I wasn't there for a moment.\n\nSeeing it from that point of view, you're right. And while driving home, I came across something else: A class (`class foo {}`) should be an object as well, but `typeof foo` is still `function`, because it's a prototype (so basically an \n\nI should have known this :-D Sorry for the unnecessary issue\n\nCheers\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why JavaScript considers functions to be objects",
      "Clarification about JavaScript's type system consistency"
    ]
  },
  {
    "number": 2378,
    "title": "Checkmarx Issue - Divide by Zero",
    "created_at": "2015-12-09T16:11:02Z",
    "closed_at": "2015-12-09T16:25:58Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2378",
    "body": "Hello,\n\nWe are using underscorejs in our application and we ran Checkmarx against it. It returned a security issue with the minified script:\n\n| # | Issue | Code in question |\n| --- | --- | --- |\n| 1 | Divide by zero | var e, u, i = 1 / 0, |\n| 2 | Divide by zero | o = 1 / 0; |\n| 3 | Divide by zero | (o > u |\n| 4 | Divide by zero | var e, u, i = -1 / 0, |\n| 5 | Divide by zero | o = -1 / 0 |\n| 6 | Divide by zero | (u > o |\n| 7 | Divide by zero | return x(n, t, 1 / 0) |\n\nNote that this is in the minified version - the actual source code makes use of Infinity instead of dividing by zero.\n\nWe just wish to check if this is a valid issue or a false positive.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2378/comments",
    "author": "callmekatootie",
    "comments": [
      {
        "user": "jridgewell",
        "created_at": "2015-12-09T16:25:58Z",
        "body": "This isn't an issue in JS because it gives `Infinity` (or `-Infinity` for `-1 / 0`) and doesn't throw an error.\n"
      },
      {
        "user": "callmekatootie",
        "created_at": "2015-12-09T16:43:31Z",
        "body": "Thank you for your quick response.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of JavaScript's division-by-zero behavior",
      "Differentiation between code behavior and security vulnerability",
      "Confirmation of false positive characteristics",
      "Contextualization of static analysis tool limitations"
    ]
  },
  {
    "number": 2304,
    "title": "_.isNumber( NaN ) == true",
    "created_at": "2015-09-23T00:44:09Z",
    "closed_at": "2015-09-23T00:48:56Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2304",
    "body": "Why `_.isNumber( NaN ) == true` ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2304/comments",
    "author": "judsonbsilva",
    "comments": [
      {
        "user": "jdalton",
        "created_at": "2015-09-23T00:48:56Z",
        "body": "Hi @judsonbsilva! \n\n`_.isNumber( NaN )` is `true` because `NaN` is classified as a number just as\n`Infinity` and `-Infinity` are.\n\nThe `_.isNumber` method is not intended for numeric validation just as `_.isDate` will not validate whether a date object is a valid date, `new Date(Infinity)`.\n\nIf you're looking for validation there's `_.isFinite` or\nES6 `Number.isFinite`, `Number.isNaN`, `Number.isInteger`, and `Number.isSafeInteger`.\n"
      },
      {
        "user": "judsonbsilva",
        "created_at": "2015-09-23T00:57:46Z",
        "body": ":) Ohh... nice, thank's\n"
      },
      {
        "user": "bjmiller",
        "created_at": "2015-09-24T10:24:09Z",
        "body": "Can this explanation go in the documentation?  We get this question in some form quite frequently.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why NaN is classified as a number in JavaScript type systems",
      "Clarification of the distinction between type checking and numeric validation",
      "Identification of alternative validation methods for numeric values",
      "Contextualization within JavaScript's native type system behavior"
    ]
  },
  {
    "number": 2186,
    "title": "How to sortBy by second level (subkey) of JSON object?",
    "created_at": "2015-05-23T17:21:05Z",
    "closed_at": "2015-05-23T18:42:09Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/2186",
    "body": "I have an example JSON array I would like to sort. However, I would like to sort by attributes.Country (a second level) rather than a first level like label.\n\n``` javascript\n[\n   {\n      \"label\":\"Ha Dae-sung\",\n      \"id\":\"268\",\n      \"attributes\":{\n         \"Country\":\"South Korea\"\n      }\n   },\n   {\n      \"label\":\"Maxi Pereira\",\n      \"id\":\"486\",\n      \"attributes\":{\n         \"Country\":\"Uruguay\"\n      }\n   },\n   {\n      \"label\":\"Manabu Saito\",\n      \"id\":\"441\",\n      \"attributes\":{\n         \"Country\":\"Japan\"\n      }\n   }\n]\n```\n\nI can sort just fine on the first level using _.sortBy. For instance, to sort by just the label.\n\n``` javascript\nsearched = _.sortBy(searched, \"label\"); \n```\n\nHowever, I want to get a sorted array by Country within attributes. How would I set up a second level sort?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/2186/comments",
    "author": "blueridgemountains1",
    "comments": [
      {
        "user": "alexZielonko",
        "created_at": "2015-05-23T18:16:26Z",
        "body": "Getting an array sorted by country can be achieved by using a function as the iteratee. This should work for you -\n\n```\nsearched = _.sortBy(searched, function(obj) { return obj.attributes.Country; });\n```\n"
      }
    ],
    "satisfaction_conditions": [
      "Support sorting by nested object properties",
      "Maintain compatibility with Lodash's sortBy method",
      "Handle object property path resolution",
      "Produce alphabetically ordered results based on country names"
    ]
  },
  {
    "number": 1648,
    "title": "_.isEqual on \"[object HTMLCanvasElement]\" elements with different content",
    "created_at": "2014-05-22T09:50:59Z",
    "closed_at": "2014-05-22T12:30:44Z",
    "labels": [
      "question",
      "duplicate"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/1648",
    "body": "With two canvas of the same size and same properties, but different contents (and different results from \"toDataURL()\"), _.isEqual returns true.\n\nI'm not sure what should be the expected result in this case. Maybe it's a bug, maybe it should lead to a warning in the documentation.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/1648/comments",
    "author": "Volune",
    "comments": [
      {
        "user": "akre54",
        "created_at": "2014-05-22T12:30:44Z",
        "body": "`_.isEqual` is undefined for Elements (do a search through the issues for some background). It's much better to write the comparison by hand and `mixin` it into your own Underscore copy if you need it.\n\n``` js\n_.mixin({\n  isCanvasEqual: function(a, b) { return a.toDataUrl() === b.toDataUrl() }\n});\n```\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2014-05-22T14:30:42Z",
        "body": "You could also define `HTMLCanvasElement.prototype.isEqual`.\n\n``` js\nHTMLCanvasElement.prototype.isEqual = function(otherCanvas) {\n  return this.toDataUrl() === otherCavas.toDataUrl();\n};\n```\n"
      },
      {
        "user": "Volune",
        "created_at": "2014-05-22T14:56:58Z",
        "body": "A \"isCanvasEqual\" function is not usable for objects that may or may not contain a canvas (as it was in my case)\n\nThe HTMLCanvasElement.prototype.isEqual function is a good solution, thanks.\n"
      },
      {
        "user": "jdalton",
        "created_at": "2014-05-22T15:53:00Z",
        "body": "Yap, the current Underscore method of handling DOM elements puts devs in a jam because it either works on some browsers, doesn't, or locks up the browser. That's not a good experience and seems to be common enough to warrant action.\n\nExtending DOM prototypes is a losing game too (see Prototype.js).\n\nUnderscore could detect DOM elements, avoid crawling, and do a strict equality check, `===`. This prevents the inconsistent behavior and browser freezes. Then Underscore could add support for a customizing callback to allow devs to tailor `_.isEqual` to their needs.\n\n``` js\nvar eq = _.partial(_.isEqual, _, _, function(value, other) {\n  if (_.isElement(value) && _.isElement(other) &&\n        value.nodeName.toLowerCase() == 'canvas' &&\n        other.nodeName.toLowerCase() == 'canvas'\n      ){\n    return value.toDataUrl() == other.toDataUrl();\n  }\n});\n```\n"
      },
      {
        "user": "akre54",
        "created_at": "2014-05-22T17:46:28Z",
        "body": "Yeah extending prototypes is usually a no-go. @jdalton's solution is the way to go here. Given the number of edge cases and the murkily-defined equality semantics for elements of any type, it's much better to add this yourself to your own app.\n"
      }
    ],
    "satisfaction_conditions": [
      "Handles canvas element comparison based on actual content rather than object reference",
      "Works with objects that may or may not contain canvas elements",
      "Avoids browser inconsistencies and freezes with DOM element comparison",
      "Doesn't require modifying native prototypes",
      "Integrates with existing Underscore comparison logic"
    ]
  },
  {
    "number": 641,
    "title": "Why is _._ defined?",
    "created_at": "2012-06-13T20:30:06Z",
    "closed_at": "2012-06-13T20:39:50Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/641",
    "body": "For underscore.1.3.3, why is _._ defined?\n\n```\nif (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n        exports = module.exports = _;\n    }\n    exports._ = _;\n} else {\n    root['_'] = _;\n}\n```\n\nShouldn't `exports = module.exports = _;` be `exports = module.exports;`?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/641/comments",
    "author": "LarryBattle",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2012-06-13T20:37:42Z",
        "body": "Compatibility with CommonJS environments that don't support the non-standard `module.exports` property (in these implementations, Underscore has to be loaded as `var _ = require(\"_\")._`.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of compatibility requirements for CommonJS module systems",
      "Clarification of the relationship between exports and module.exports in different environments",
      "Identification of legacy environment constraints that necessitated this pattern"
    ]
  },
  {
    "number": 548,
    "title": "Eliminating `with`",
    "created_at": "2012-04-10T01:52:19Z",
    "closed_at": "2012-04-10T02:58:10Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/548",
    "body": "Given that `with` seems to slow things down (in addition to it being deprecated): Two \u2013 possibly silly \u2013 ideas.\n1. Extract the variables used in the template (e.g. \"foo\" and \"bar\") and, instead of `with`, wrap:\n   \n   ```\n   (function (foo, bar) {\n       ...\n   }(obj.foo, obj.bar));\n   ```\n2. Prefix each interpolated variable with \"obj.\", drop the `with` statement.\n\nAlas, not nearly as versatile as `with`, especially when arbitrary expressions are interpolated.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/548/comments",
    "author": "rauschma",
    "comments": [
      {
        "user": "braddunbar",
        "created_at": "2012-04-10T02:58:09Z",
        "body": "Very interesting, but I'm afraid they won't quite work out.\n1. This works when providing all variables with `data` at compile time.  However, if some variables are left undefined or a data object is not provided (the template is precompiled) then no variables will be used.\n2. This works when the interpolated string is a property name (e.g. `<%= foo %>`) but not if it's an expression like `<%= Math.min(i, 10) %>`.\n\nThanks for sharing these, I hadn't thought of these approaches.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-04-10T14:29:44Z",
        "body": "Axel, are you aware of Brad's recent `{variable: 'data'}` patch? In Underscore 1.3.2, you can avoid `with` if you like.\n"
      },
      {
        "user": "rauschma",
        "created_at": "2012-04-10T14:35:09Z",
        "body": "I am, thanks! `obj` was previously already helpful, in this regard (e.g. when checking whether a property existed):\n\n```\nif (typeof foo === \"undefined\") ... // with\nif (obj.foo) ... // no with\n```\n"
      }
    ],
    "satisfaction_conditions": [
      "Avoids using deprecated `with` statements while maintaining template functionality",
      "Supports arbitrary expressions in interpolated values",
      "Handles undefined variables at compile time",
      "Allows explicit variable access without scope wrapping"
    ]
  },
  {
    "number": 509,
    "title": "Need of nested templates - Idea for implementation",
    "created_at": "2012-03-17T02:26:11Z",
    "closed_at": "2012-03-19T16:35:26Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/509",
    "body": "I would like to be able to nest templates and searching on Google it seems a common request.\n\nThese is my suggestions:\n1. Extend _ . template function to ve used as _ . template(templateString, [ _templateName_ ], [context]) \n   -  _templateName_ is optional and it can be distinguished with typeof from _context_ because _templateName_ is a **string** while _context_ is an **object**. So you can also use syntax like _.template(templateString, templateName) or _.template(templateString, context).\n   - if _templateName_ is specified the compiled function is saved in an internal array\n2.  Use <%t templateName (param1, param2, etc) %> or <%# templateName (param1, param2, etc) %>  to use the previously defined template inside the new template\n\nLet me know what you think and if you want I can implement that.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/509/comments",
    "author": "ChrisCinelli",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-03-19T16:35:21Z",
        "body": "I think it's quite unnecessary because nested templates are already easy to do:\n\n```\n<div>\n  <%= otherTemplate(data) %>\n</div>\n```\n"
      },
      {
        "user": "ChrisCinelli",
        "created_at": "2012-03-19T21:59:14Z",
        "body": "I does not work for me.\nThe _.template needs to be called twice for the template and the other template and, in my case, _.template is called in 2 different closures.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-03-20T14:25:19Z",
        "body": "_.template only ever needs to be called once for _any_ template string. You get back a compiled template function which you can pass around anywhere you like -- including into other template calls.\n"
      },
      {
        "user": "ChrisCinelli",
        "created_at": "2012-03-23T18:59:15Z",
        "body": "Yes, I wanted to call _.template only once. I did not think about passing the compiled function to the other template. After adding {formatTime: formatTime} it works, thanks.\n\nThis is what I did:\n\n```\n    var formatTime = (function(){\n        var compiled = _.template($(\"#format-time-template\").html());\n        return function(seconds){\n            return compiled({seconds: seconds});\n        };\n    })();\n\n    var createVideoEvidence = (function(){\n        var compiled = _.template($(\"#create-video-evidence-template\").html());\n        return function(evidence, videoId){\n            return compiled({formatTime: formatTime, evidence: evidence, videoId: videoId});\n        };\n    })();\n```\n\nAnd then in the template #create-video-evidence-template I can use <%= formatTime(...) %> \n"
      }
    ],
    "satisfaction_conditions": [
      "Solution must enable reuse of precompiled template functions across different scopes/closures",
      "Approach must allow template composition without recompiling nested templates",
      "Method must maintain template context flexibility for dependency injection"
    ]
  },
  {
    "number": 480,
    "title": "_.create Feature",
    "created_at": "2012-02-16T21:23:45Z",
    "closed_at": "2012-02-16T21:26:37Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/480",
    "body": "Would underscore be interested in something along the lines of a utility method that takes an arbitrary number of arguments and returns a new object like Object.create() but cross browser. The general use is the ability to use a merge like .extend() without having to clone the initial object.\n\nExample use case,\n```{events: _.create(Parent.prototype.events, {})}\n\n```\n\n\nWhat is the typical or recommended approach to this? Are people using Object.create and shimming it? Perhaps using ``_.extend({}, obj, obj2)``?\n\n\n```\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/480/comments",
    "author": "iammerrick",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2012-02-16T21:26:31Z",
        "body": "Nope -- historically Underscore has tried to stay out of the \"how-to-do-OOP-in-JS\" fight. See lots of previous tickets...\n\nThe recommended approach is to _never_ shim any native. Lots of websites shim `Object.create` in a way that's entirely incompatible with the native implementation. Use prototypes if you're doing it raw ... use a library function that sets the prototype chain for you if you're doing it with a library.\n"
      },
      {
        "user": "iammerrick",
        "created_at": "2012-02-16T21:30:09Z",
        "body": "I am not so much making a recommendation for any sort of OOP. I realize people use object.create for that as well but what I am really looking for is a method that merges objects and returns  new one with mutating any source object. Like I said for Backbone child views when the parent uses an events hash, one currently has to clone the parent and merge the new ones; seems a bit silly when you ought to be able to just create a new object from children. I would argue methods like extend and defaults lend just as much to OOP opinion as a create from all these sub children would.\n\nThanks for the quick response and opinion, you are an excellent maintainer.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2012-02-16T21:32:08Z",
        "body": "Ah, you've already got that -- just as you said. The `Object.create` talk threw me off the scent.\n\n```\n_.extend({}, a, b, c, d);\n```\n"
      },
      {
        "user": "iammerrick",
        "created_at": "2012-02-16T21:33:11Z",
        "body": "Ok that is all I wanted. Thank you sir. :-D.\n"
      }
    ],
    "satisfaction_conditions": [
      "Provides a way to merge objects into a new object without mutating source objects",
      "Works with existing Underscore.js patterns and conventions",
      "Avoids opinionated OOP implementation details",
      "Maintains cross-browser compatibility"
    ]
  },
  {
    "number": 367,
    "title": "toArray should convert a single element into an array",
    "created_at": "2011-11-10T21:45:30Z",
    "closed_at": "2011-11-14T15:55:16Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/367",
    "body": "One of the patterns i use in Ruby is \n\ndef foo (category)\n Array(category).each{|item| puts item}\nend\n\nIt would be nice to have something like this with toArray as well. Instead of (in coffeescript)\n\n```\nkeywords =  if _.isArray(doc.keywords) then doc.keywords else [doc.keywords]\n```\n\nIs there a better way of doing this?\n\nIf you think it is useful, i can provide a patch for it.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/367/comments",
    "author": "sreeix",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2011-11-14T15:55:11Z",
        "body": "Sure, just use \"flatten\"\n\n```\nkeywords = _.flatten([doc.keywords])\n```\n"
      },
      {
        "user": "sreeix",
        "created_at": "2011-11-14T16:00:08Z",
        "body": "Aaarg. Thanks.\n"
      },
      {
        "user": "stevo11101",
        "created_at": "2013-09-19T05:28:56Z",
        "body": "I think this solution is too obtuse. I am in favor of adding _.asArray. Rarely do I want to iterate over characters, and that the library lacks a clear obvious way to do so is frustrating.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-19T14:40:41Z",
        "body": "While I don't think we should change `_.toArray`, I often mix in `_.wrapArray` as an analogue to rails' `Array.wrap`.\n\n``` js\n_.mixin({                                                                       \n\n  wrapArray: function(obj) {                                                    \n    if (obj == null) return [];                                                 \n    if (_.isArray(obj)) return obj;                                             \n    return [obj];                                                               \n  }                                                                             \n\n});\n```\n"
      },
      {
        "user": "stevo11101",
        "created_at": "2013-09-20T18:59:31Z",
        "body": "I dont think we should change <code>_.toArray</code> either. I think <code>_.wrapArray</code> should be in the library. I just had an inferior name for it (<code>_.asArray</code>).\n\nI wrote that exact mixin, verbatim. Ill bet lots of people have. It just seems natural to include it in the library.\n\nIt seems that you would usually want to deal with a string as wrapped in an array, rather than treating it as a list of characters.\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2013-09-20T19:22:23Z",
        "body": "@stevo11101: I'd be strongly against including something like that in underscore. No offence to you or @braddunbar, but you should really always know what type of data you are working with. If you don't, you're designing your program wrong, plain and simple. I've _never_ needed something like this because I make sure to either be working with consistently typed data or a data structure like `Either` that explicitly differentiates between the possible types of data.\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-20T19:30:41Z",
        "body": "None taken, certainly.  :)\n\nI don't care much whether or not this is pulled in, but I sometimes use `Array.wrap` or `_.wrapArray` to normalize an api.  For instance, a function that takes either an id or an array of ids.\n\n``` js\nvar foo = function(ids) {\n  _.each(_.wrapArray(ids), function(id) {\n    // ...\n  });\n};\n\nfoo(null);\nfoo(1);\nfoo([1, 2, 3]);\n```\n\nI'm curious, how do you normally handle this situation?\n"
      },
      {
        "user": "michaelficarra",
        "created_at": "2013-09-20T19:55:27Z",
        "body": "I would either always expect a list (single-element and empty lists are lists, too, you know!) or write a variable-arity function, which is pretty much the same thing.\n\nIn ES5+:\n\n``` js\nfunction foo(/* ...ids */) { return [].map.call(arguments, function(id){ /* ... */ }); }\n```\n\nUsing underscore:\n\n``` js\nfunction foo() { return _.map(arguments, function(id){ /* ... */ }); }\n```\n"
      },
      {
        "user": "braddunbar",
        "created_at": "2013-09-20T19:57:05Z",
        "body": "Gotcha.  Thanks @michaelficarra!\n"
      },
      {
        "user": "mlanza",
        "created_at": "2014-01-25T05:36:28Z",
        "body": "+1 for `wrapArray`.  I've always created my own mixin for just same.  It's useful esp. when you consider that the brunt of underscore deals with enumerables.\n"
      }
    ],
    "satisfaction_conditions": [
      "Provides a method to convert single elements into arrays without splitting strings/iterables",
      "Offers a clear way to handle both arrays and non-arrays uniformly",
      "Solution should be library-native rather than requiring custom mixins",
      "Maintains empty array handling for null/undefined inputs",
      "Avoids unexpected flattening behavior"
    ]
  },
  {
    "number": 181,
    "title": "Alternative to <%= and %>",
    "created_at": "2011-04-24T16:46:47Z",
    "closed_at": "2011-04-24T18:07:57Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/181",
    "body": "I would like to use Underscore.js templates within a JSP, but cannot figure out a way to prevent JSP from processing the <%= and %>.\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/181/comments",
    "author": "ghost",
    "comments": [
      {
        "user": "samuelclay",
        "created_at": "2011-04-24T17:35:30Z",
        "body": "Does this help? From the docs:\n\n_.templateSettings = {\n  interpolate : /{{(.+?)}}/g\n};\n\nvar template = _.template(\"Hello {{ name }}!\");\ntemplate({name : \"Mustache\"});\n=> \"Hello Mustache!\"\n"
      },
      {
        "user": "ghost",
        "created_at": "2011-04-24T18:08:28Z",
        "body": "Just what I needed. Sorry for not RTFM.\n"
      }
    ],
    "satisfaction_conditions": [
      "A way to customize Underscore.js template delimiters to avoid JSP syntax conflicts",
      "Solution must allow Underscore templates to coexist with JSP without modification to JSP engine",
      "Clear documentation reference for template customization"
    ]
  },
  {
    "number": 88,
    "title": "Extend nested objects?",
    "created_at": "2010-12-29T22:57:24Z",
    "closed_at": "2010-12-30T23:14:08Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/88",
    "body": "say i have:\n    var a = {\"foo\": { \"bar\":\"baz\" }}\n    var b = {\"foo\": { \"alice\":\"bob\" }}\n    var c = _.extend(a, b) // gives me {\"foo\": { \"alice\":\"bob\" }}\n\nWhat's the best way to make:\n    c = {\"foo\": { \"bar\":\"baz\", \"alice\":\"bob\" }}\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/88/comments",
    "author": "cly",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-12-30T15:13:54Z",
        "body": "Hmm ... you're looking for a \"deep merge\" sort of function. One trick about that is that Objects within the hash will also be merged instead of replaced. For example:\n\n```\nvar a = {person: new Alice()};\nvar b = {person: new Bob()};\nvar c = deepMerge(a, b);\n```\n\n... now, instead of replacing Alice with Bob, you have some sort of funky Alice-Bob hybrid. I believe that's one of the reasons why this sort of function isn't commonly used.\n\nBut, genetic experimentation aside, let's try to write one anyway.\n\n```\ndeepMerge = function(target, source) {\n  for (var key in source) {\n    var original = target[key];\n    var next = source[key];\n    if (original && next && typeof next == \"object\") {\n      deepMerge(original, next);\n    } else {\n      target[key] = next;\n    }\n  }\n  return target;\n};\n```\n"
      },
      {
        "user": "cly",
        "created_at": "2010-12-30T21:57:23Z",
        "body": "This is awesome thanks! Any chance this will make it into _? Hmm, or maybe I can try a different approach.\n\nMy use case is overriding a common config file with an environment's config file. Using log4js, I have nested configs and I have to maintain entire logging configs for each of the environments when all I want to do is override a few parameters.\n\nThe alternative I have is to have a config template with parameters for overridable values. Then I can have flat common, prod, dev config files that replaces those overridable parameters as necessary. This will work with arrays as well whereas deepMerge will not. Hey, I can use _.templates! Cool, i think ill try this approach.\n\nCheers!\n"
      }
    ],
    "satisfaction_conditions": [
      "Supports deep merging of nested objects rather than shallow replacement",
      "Handles configuration override use cases where only specific parameters need updating",
      "Works with both objects and arrays in nested structures"
    ]
  },
  {
    "number": 85,
    "title": "Uniq/unique returns undefined on an empty array in WebKit on OS X",
    "created_at": "2010-12-22T04:05:59Z",
    "closed_at": "2010-12-22T23:11:38Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/85",
    "body": "Since, Underscore is influenced by Ruby, I figured that unique-ing an empty array would just return an empty array.\n\nIn Ruby 1.8.7:\n\n[].uniq\n=> []\n\nOf course the uniq! method does return a nil on an empty array, but it's a destructive method and Underscore doesn't really have those.\n\nRuby 1.8.7:\n\n[].uniq!\n=> nil\n\nIs undefined the correct output when calling uniq on an empty array or should it just return itself or an empty array?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/85/comments",
    "author": "eddorre",
    "comments": [
      {
        "user": "ghost",
        "created_at": "2010-12-22T06:01:46Z",
        "body": "Nope, it shouldn't return `undefined`...you mentioned that you're using Prototype 1.6.0.1 alongside Underscore; this is why. Older versions of Prototype redefine `Array#reduce()`, which is required for `uniq` to work correctly (see #84 for a more detailed explanation).\n\nTry removing Prototype and then running `_.uniq([])`. The result should be an empty array.\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-12-22T15:10:38Z",
        "body": "Thanks for figuring that out, **kitgoncharov** -- I might have gone chasing down the rabbit hole after that one.\n"
      },
      {
        "user": "ghost",
        "created_at": "2010-12-22T16:21:54Z",
        "body": "No problem. Before **eddorre** said that he was using Prototype in his project, this had me scratching my head, too.\n"
      },
      {
        "user": "eddorre",
        "created_at": "2010-12-23T05:32:00Z",
        "body": "Sorry for the false alarm guys. Thanks for looking into this so quickly.\n"
      }
    ],
    "satisfaction_conditions": [
      "Identifies the root cause as a conflict with Prototype.js modifying native array methods",
      "Confirms expected behavior of _.uniq([]) should return an empty array in a clean environment",
      "Addresses library conflicts affecting native method dependencies"
    ]
  },
  {
    "number": 38,
    "title": "Extend",
    "created_at": "2010-09-26T10:56:44Z",
    "closed_at": "2010-09-28T02:35:24Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/38",
    "body": "Why \"without extending any of the built-in JavaScript objects\" ?\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/38/comments",
    "author": "trans",
    "comments": [
      {
        "user": "jashkenas",
        "created_at": "2010-09-27T19:35:16Z",
        "body": "Because extending built-ins is often makes your code incompatible with other libraries and scripts. If you want to extend built ins, because you're certain that your JS is going to be run in isolation, I suggest taking a look at Prototype.js, which provides many of the same helpers as Underscore, in a more object-oriented fasion.\n\nBut Prototype is also a good example of how extending native objects can bite you -- in previous versions of Prototype, and `Array#reduce` function was added to the native Array object. ECMAScript 5 standardized a version of `Array#reduce`, a couple years later, and browsers implemented it as a native function. Unfortunately, JavaScript's reduce isn't compatible with Prototype's reduce, and any page that loads those versions of Prototype will monkey-patch the native version of the function out of existence...\n"
      },
      {
        "user": "trans",
        "created_at": "2010-09-28T19:08:05Z",
        "body": "Sure. I understand the hazards, but it could be an option. If one knows it won't be an issue it sure can be convenient.\n\nAlso, there is another way to avoid these issues buy still extend the built-in: using a single access method, e.g. in this case maybe `_` could work.\n\n```\n[]._.reduce()\n```\n"
      },
      {
        "user": "jashkenas",
        "created_at": "2010-09-28T19:15:26Z",
        "body": "If you'd like to extend Array.prototype with the Underscore methods, feel free to add them yourself...\n\n```\n// Underscore methods that we want to implement on Array.\nvar methods = ['each', 'map', 'reduce', 'reduceRight', 'detect', 'select',\n  'reject', 'all', 'any', 'include', 'invoke', 'pluck', 'max', 'min', 'sortBy',\n  'sortedIndex', 'toArray', 'size', 'first', 'rest', 'last', 'without',\n  'indexOf', 'lastIndexOf', 'isEmpty'];\n\n// Mix in each method as a proxy.\n_.each(methods, function(method) {\n  Array.prototype[method] = function() {\n    return _[method].apply(_, [this].concat(_.toArray(arguments)));\n  };\n});\n```\n"
      },
      {
        "user": "trans",
        "created_at": "2010-09-28T20:42:28Z",
        "body": "Nice. Thanks.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of compatibility risks when extending built-in objects",
      "Demonstration of safe extension patterns that avoid library conflicts",
      "Clarification of isolation requirements for safe extension",
      "Comparison with other library approaches (like Prototype.js)"
    ]
  },
  {
    "number": 26,
    "title": "Install underscore in npm?",
    "created_at": "2010-06-14T19:39:03Z",
    "closed_at": "2010-06-15T03:19:13Z",
    "labels": [
      "question"
    ],
    "url": "https://github.com/jashkenas/underscore/issues/26",
    "body": "I was creating a new npm package that depends on underscore.js and was wondering if I should list underscore as a dependency, in which case it will need to be installed into npm, or if I should include it in my package?  I see there is a package.json in the root so it seems to me that it might be good to publish it to npm, I didn't see it in the npm list yet.  \n\nThanks,\n\nJohn\n\n(Wanted to label this with a question but can't seem to get the label control to work.)\n",
    "comments_url": "https://api.github.com/repos/jashkenas/underscore/issues/26/comments",
    "author": "mrjjwright",
    "comments": [
      {
        "user": "documentcloud",
        "created_at": "2010-06-14T20:19:06Z",
        "body": "Hi John.\n\nI've pushed the latest Underscore (1.0.3), up to the npm registry. After running `npm install underscore`, you should be able to use it like so:\n\n```\nvar _ = require('underscore')._\n```\n\nBe careful with the Node REPL, as it overrides _ to mean \"the return value of the last command\". You might want to use a different alias if you're REPL-ing around.\n\nLet me know if it doesn't work for you.\n"
      }
    ],
    "satisfaction_conditions": [
      "Clarification on whether to list underscore as an external dependency or bundle it",
      "Guidance on proper npm package dependency management practices",
      "Confirmation of underscore's availability in npm registry",
      "Explanation of potential environment conflicts (like REPL '_' usage)"
    ]
  }
]