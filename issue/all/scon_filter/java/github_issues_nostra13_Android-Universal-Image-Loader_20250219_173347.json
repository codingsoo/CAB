[
  {
    "number": 766,
    "title": "Different image size for showImageForEmptyUri",
    "created_at": "2014-09-29T09:39:59Z",
    "closed_at": "2014-09-29T17:31:14Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/766",
    "body": "How can I set Different image size for showImageForEmptyUri ?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/766/comments",
    "author": "aser58",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-09-29T13:24:34Z",
        "body": "You can pass Drawable int o this method. So you can define a size.\n"
      },
      {
        "user": "aser58",
        "created_at": "2014-09-29T14:02:55Z",
        "body": "I indeed pass drawable to this method :\".showImageForEmptyUri(R.drawable.globe2)\"\n\nThe size of glob2 is 24x24 , but when it shown in the listview is strched to full all the frame of the imageView.\n\nHow I can define that when there is no Uri the image will not sreched ?\n\nThanks\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-09-29T14:51:33Z",
        "body": "I think `android:scaleType` parameter is responsible for that.\n"
      },
      {
        "user": "aser58",
        "created_at": "2014-09-29T17:08:47Z",
        "body": "It's WORK !!\n\nThank's a lot for your help\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-09-29T17:31:14Z",
        "body": "You're welcome.\n"
      }
    ],
    "satisfaction_conditions": [
      "Control image scaling behavior for empty URI scenarios",
      "Preserve original image dimensions when no URI is provided",
      "Work within the constraints of the library's image display configuration"
    ]
  },
  {
    "number": 678,
    "title": "image for notifycation ",
    "created_at": "2014-07-09T07:59:57Z",
    "closed_at": "2014-07-15T17:23:54Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/678",
    "body": "please.\nHow can the ImageLoader be used to load images on an notification?\nBecause the displayImage method takes an ImageView as parameter and in a widget we have to use RemoteViews.\nThanks.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/678/comments",
    "author": "kekedaine",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-07-13T13:54:37Z",
        "body": "You can wrap RemoteViews into `ImageAware` interface and pass it into `displayImage(...)` method.\nOr you can use `loadImage(...)` method with callback.\n"
      }
    ],
    "satisfaction_conditions": [
      "Demonstrates how to load images into a notification using ImageLoader without direct access to ImageView",
      "Explains how to handle asynchronous image loading for notifications",
      "Provides a way to bridge ImageLoader's display logic with RemoteViews' constraints"
    ]
  },
  {
    "number": 640,
    "title": "[Enhancement] Is it easy to add a new method to load app icons?",
    "created_at": "2014-06-05T03:13:16Z",
    "closed_at": "2014-06-11T21:37:04Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/640",
    "body": "",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/640/comments",
    "author": "imoblife",
    "comments": [
      {
        "user": "imoblife",
        "created_at": "2014-06-05T05:08:36Z",
        "body": "``` java\n    protected InputStream getStreamFromPackage(String imageUri, Object extra)\n            /*throws NameNotFoundException */{\n        InputStream is = null;\n        try {\n            String pkgName = context.getPackageName();!Scheme.PACKAGE.crop(imageUri);\n            ApplicationInfo ai = context.getPackageManager().getApplicationInfo(\n                    pkgName, 1);\n            Drawable d = ai.loadIcon(context.getPackageManager());\n            BitmapDrawable bitDw = ((BitmapDrawable) d);\n            Bitmap bitmap = bitDw.getBitmap();\n            ByteArrayOutputStream stream = new ByteArrayOutputStream();\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\n            byte[] imageInByte = stream.toByteArray();\n            System.out.println(\"........length......\" + imageInByte);\n            ByteArrayInputStream bis = new ByteArrayInputStream(imageInByte);\n            is  = new ContentLengthInputStream(bis, imageInByte.length);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return is;\n    }\n```\n\nIs this a good way to do this?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-05T12:55:48Z",
        "body": "There is no need to add this method into the library. You can create own `ImageDownloader` (like one below) and set it into configuration.\n\n``` java\npublic class CustomImageDownloader extends BaseImageDownloader {\n\n    private static final String PACKAGE_SCHEME = \"...\";\n    private static final String PACKAGE_PREFIX = PACKAGE_SCHEME + \"://\";\n\n    public CustomImageDownloader(Context context) {\n        super(context);\n    }\n\n    public CustomImageDownloader(Context context, int connectTimeout, int readTimeout) {\n        super(context, connectTimeout, readTimeout);\n    }\n    protected InputStream getStreamFromOtherSource(String imageUri, Object extra) throws IOException {\n        if (imageUri.startsWith(PACKAGE_PREFIX)) {\n            InputStream is = null;\n            try {\n                String pkgName = imageUri.substring(PACKAGE_PREFIX.length());\n                ApplicationInfo ai = context.getPackageManager().getApplicationInfo(pkgName, 1);\n                BitmapDrawable d = (BitmapDrawable) ai.loadIcon(context.getPackageManager());\n                Bitmap bitmap = d.getBitmap();\n\n                ByteArrayOutputStream stream = new ByteArrayOutputStream();\n                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);\n                byte[] imageInByte = stream.toByteArray();\n                ByteArrayInputStream bis = new ByteArrayInputStream(imageInByte);\n                is = new ContentLengthInputStream(bis, imageInByte.length);\n                bitmap.recycle();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            return is;\n        }\n        return super.getStreamFromOtherSource(imageUri, extra);\n    }\n}\n```\n"
      },
      {
        "user": "imoblife",
        "created_at": "2014-06-07T09:02:00Z",
        "body": "protected InputStream getStreamFromPackage(String imageUri, Object extra)\n            throws IOException {\n        if (imageUri.startsWith(PACKAGE_PREFIX)) {\n            ...\n        }\n        return super.getStreamFromOtherSource(imageUri, extra);\n    }\n\nIt's a good idea and really works for me, thank you. \n(P.S. Is this effective to avoid OOM Exception when loading icon from packages? as icon-drawable have no \"recycle()\" method to release memory, so I have no idea what to do with it, )\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-11T21:37:04Z",
        "body": "I updated my post. Added `bitmap.recycle();` at the end.\n"
      },
      {
        "user": "DanLatimer",
        "created_at": "2014-07-07T14:18:13Z",
        "body": "Thanks for this post, it was exactly what I needed! One enhancement that I made was to switch the encoding from JPEG to PNG so that the icons that have an alpha layer won't be surrounded in a black box.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-07-07T19:42:55Z",
        "body": "You're welcome.\n"
      }
    ],
    "satisfaction_conditions": [
      "Solution must allow extending image loading functionality without modifying the library's core code",
      "Implementation must handle bitmap memory management effectively",
      "Must support alpha channel preservation for icons",
      "Solution should integrate cleanly with existing package URI scheme handling"
    ]
  },
  {
    "number": 639,
    "title": " ImageLoadingProgressListener's method get total = -1 when  using 3G network to download image file from network",
    "created_at": "2014-06-04T06:51:36Z",
    "closed_at": "2014-06-17T11:20:57Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/639",
    "body": "UIL version is 1.9.1\nwhen  using 3G network to download image file from network, ImageLoadingProgressListener's method get total = -1, so progress will show you error percentage.\n\n``` java\nnew ImageLoadingProgressListener() {\n                @Override\n                public void onProgressUpdate(String imageUri, View view, int current, int total) {\n                    int percent = (int)(100*(float)current/(float)total);\n                    // here, when using 3G network, total == -1;\n                    if (total > 0){\n                        percentLoding.setText(percent+\"%\");\n                    }\n                    else{\n                        percentLoding.setText(FileSizeUtil.FormetFileSize(current, \"#\"));\n                    }\n                }\n            }\n```\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/639/comments",
    "author": "yanlusu",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-06-04T20:07:37Z",
        "body": "`total` parameter depends on \"Content-Length\" header from HTTP response so it seems the header is missing. A default value will be assigned in this case to `total` since 1.9.3 but now you should check it yourself and handle it somehow.\n"
      },
      {
        "user": "yanlusu",
        "created_at": "2014-06-17T11:20:57Z",
        "body": "3ks for your reply, I have updated to 1.9.3, it's ok now.\n:)\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-17T11:38:54Z",
        "body": "1.9.3 isn't released yet.\n"
      },
      {
        "user": "yanlusu",
        "created_at": "2014-06-18T14:02:44Z",
        "body": "ooo, I update to 1.9.2, but it seems ok under 3G network , en?\nI tested same code using 1.9.2 and lower version, under the same 3G network , 1.9.2 is ok, but lower version is bad.\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-06-18T15:07:47Z",
        "body": "It's strange :) 1.9.2 doesn't have any fixes about it.\n"
      }
    ],
    "satisfaction_conditions": [
      "Handles missing 'Content-Length' header in HTTP responses",
      "Provides a fallback mechanism for progress calculation when total size is unknown",
      "Maintains compatibility with UIL library updates",
      "Prevents arithmetic errors in progress percentage calculations"
    ]
  },
  {
    "number": 575,
    "title": "Thumbnail Image for large Image",
    "created_at": "2014-03-30T15:47:57Z",
    "closed_at": "2014-06-04T22:05:20Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/575",
    "body": "I have a gridview that will load huge images. When loading to grid I can load small Image s by setting up \n.cacheOnDisc(true)\nand \n.discCacheExtraOptions(408, 306, CompressFormat.JPEG, 75, null)\n\nThis will create an image of 408x306 in disk cache. But when I select an image in the view and open the image in a viewpager the cache image will be used, But what if I want to load the image that fit the display size?\n(// default = device screen dimensions)\n\nIs there any way to achieve this?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/575/comments",
    "author": "hrandika",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-03-30T21:07:27Z",
        "body": "I think the only way is to delete\n`.discCacheExtraOptions(408, 306, CompressFormat.JPEG, 75, null)`\nSo images of original size will be cached in disc.\n"
      },
      {
        "user": "hrandika",
        "created_at": "2014-03-31T01:06:55Z",
        "body": "That is true but I want to keep the 408x306 image for grid view and full image to the view pager.\nWhat I have done is I have not used UIL in the view pager. Instead I use bitmap loader to load the large image. Is this the only way to achieve this?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-31T20:02:17Z",
        "body": "I think the only way to do it is to have 2 instances of ImageLoader. Create the second singleton by extending ImageLoader. The first ImageLoader will have `.discCacheExtraOptions(408, 306, CompressFormat.JPEG, 75, null)` options and the second won't. So you can use each ImageLoader in appropriate case.\n\nThese ImageLoaders will have different disk caches and different memory caches but you can make they use common memory cache if you want.\n"
      },
      {
        "user": "hrandika",
        "created_at": "2014-04-01T08:38:14Z",
        "body": "It worked. Solved\n"
      }
    ],
    "satisfaction_conditions": [
      "Maintain separate cached image resolutions for grid view and viewpager",
      "Avoid cache interference between grid view and viewpager components",
      "Support dynamic image sizing based on display requirements",
      "Enable concurrent use of multiple image loading strategies"
    ]
  },
  {
    "number": 569,
    "title": "one uncertainty on single inheritance in Universal-Image-Loader",
    "created_at": "2014-03-19T06:46:49Z",
    "closed_at": "2014-03-19T12:50:16Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/569",
    "body": "Recently, I was reading the source codes of Universal-Image-Loader, And I found an interesting question on inheritance in Java. We know that the multiple inheritance is not allowed in Java. Java designers replaced the concept of multiple inheritance by that of interface. In the release 1.9.1 of Universal-Image-Loader, the interface called BlockingDeque in the package of com.nostra13.universalimageloader.core.assist.deque extends two parent class, BlockingQueue and Deque, but Eclipse does't show any wrong information about it. So I am confused about it. Does someone else ever notice this??\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/569/comments",
    "author": "bytebeats",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-03-19T07:47:49Z",
        "body": "`BlockingQueue` and `BlockingQueue` are interfaces. Java allow \"multiple inheritance\" of interfaces, i.e. class can implement multiple interfaces and interface can extend multiple interfaces.\n"
      },
      {
        "user": "bytebeats",
        "created_at": "2014-03-19T09:09:28Z",
        "body": "Oh, thanks for answers, I have learnt a lot from this question. Meanwhile, thanks for your great works on UIL~\n"
      },
      {
        "user": "nostra13",
        "created_at": "2014-03-19T12:50:16Z",
        "body": "You're welcome.\n"
      }
    ],
    "satisfaction_conditions": [
      "Clarify Java's rules for interface inheritance vs. class inheritance",
      "Explain why multiple interface inheritance doesn't produce errors",
      "Differentiate between class inheritance and interface extension semantics"
    ]
  },
  {
    "number": 499,
    "title": "Is it possible to pause/resume image loading..?",
    "created_at": "2014-01-07T11:00:25Z",
    "closed_at": "2014-01-07T11:36:12Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/499",
    "body": "",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/499/comments",
    "author": "bhaumiknsoni",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2014-01-07T11:12:26Z",
        "body": "`ImageLoader.pause()` and `ImageLoader.resume()`. But it pauses/resumes all loadings.\n"
      },
      {
        "user": "bhaumiknsoni",
        "created_at": "2014-01-07T11:36:12Z",
        "body": "awesome...!\nthanks for the quick reply.\n"
      },
      {
        "user": "SagarPanwala",
        "created_at": "2016-12-12T03:49:32Z",
        "body": "How to pause and resume loading for current listview or view items/ children ?"
      }
    ],
    "satisfaction_conditions": [
      "The solution must provide functionality to pause and resume image loading operations",
      "The solution should support control over image loading for specific UI components or views"
    ]
  },
  {
    "number": 455,
    "title": "delete the specified cache",
    "created_at": "2013-11-20T03:34:17Z",
    "closed_at": "2013-11-21T22:34:33Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/455",
    "body": "When I want to delete the specified cache, I wrote this code:\n\n``` java\n    public void clearCache(String uri, ImageView imageView) {\n        ImageSize targetSize = ImageSizeUtils.defineTargetSizeForView(\n                new ImageViewAware(imageView), getMaxImageSize());\n        String memoryCacheKey = MemoryCacheUtil.generateKey(uri, targetSize);\n\n        imageLoader.getMemoryCache().remove(memoryCacheKey);\n\n        File file = imageLoader.getDiscCache().get(uri);\n        if (file != null) {\n            file.delete();\n        }\n    }\n\n    ImageSize getMaxImageSize() {\n        DisplayMetrics displayMetrics = context.getResources()\n                .getDisplayMetrics();\n\n        int width = maxImageWidthForMemoryCache;\n        if (width <= 0) {\n            width = displayMetrics.widthPixels;\n        }\n        int height = maxImageHeightForMemoryCache;\n        if (height <= 0) {\n            height = displayMetrics.heightPixels;\n        }\n        return new ImageSize(width, height);\n    }\n```\n\nCould you provide a similar interface in \"ImageLoader.java\"??\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/455/comments",
    "author": "nbtstatx",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-11-20T22:30:23Z",
        "body": "`MemoryCacheUtil.removeFromCache(imageUri, ImageLoader.getInstance().getMemoryCache())`?\n`DiscCacheUtil.removeFromCache(imageUri, ImageLoader.getInstance().getDiscCache())`?\n"
      },
      {
        "user": "nbtstatx",
        "created_at": "2013-11-21T02:11:27Z",
        "body": "But imageUri is not a key in \"MemoryCache\".So I have to get the key by this code:\n\nImageSize targetSize = ImageSizeUtils.defineTargetSizeForView(\n                new ImageViewAware(imageView), getMaxImageSize());\nString memoryCacheKey = MemoryCacheUtil.generateKey(uri, targetSize);\n\nThen :\n\nMemoryCacheUtil.removeFromCache(imageUri, ImageLoader.getInstance().getMemoryCache())\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-11-21T06:49:22Z",
        "body": "`MemoryCacheUtil.removeFromCache()` removes all bitmaps in memory which keys are relates to incoming image Uri.\n"
      },
      {
        "user": "nbtstatx",
        "created_at": "2013-11-21T07:15:11Z",
        "body": "Oh,I see \"startsWith\".\nThanks.\n"
      }
    ],
    "satisfaction_conditions": [
      "Provides a method to remove all memory cache entries associated with a specific image URI regardless of size variations",
      "Offers a way to delete both memory and disk cache entries through a unified interface",
      "Handles cache key generation logic internally without requiring manual key construction",
      "Supports cache removal using only the original image URI as input"
    ]
  },
  {
    "number": 339,
    "title": "Why use WeakReference?",
    "created_at": "2013-07-22T06:54:20Z",
    "closed_at": "2013-07-23T02:58:44Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/339",
    "body": "in the ImageLoadingInfo\n\nWhether it will lead to frequent GC?  use softReference?\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/339/comments",
    "author": "zondaOf2012",
    "comments": [
      {
        "user": "gordonpro",
        "created_at": "2013-07-22T08:22:52Z",
        "body": "more weak! to protect softReference<Hanlder>\n"
      },
      {
        "user": "nostra13",
        "created_at": "2013-07-22T20:37:22Z",
        "body": "I need the weakest reference for ImageView. So `WeakReference` is the most appropriate type.\nSoft reference is collected by GC only when free memory is low.\n"
      }
    ],
    "satisfaction_conditions": [
      "Explanation of why WeakReference is preferred over SoftReference in this context",
      "Clarification of garbage collection behavior differences between reference types",
      "Criteria for selecting appropriate reference strength based on memory management requirements"
    ]
  },
  {
    "number": 328,
    "title": "Add ability to set a default image load animation",
    "created_at": "2013-07-09T00:47:41Z",
    "closed_at": "2013-07-09T15:44:50Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/328",
    "body": "Currently the only way I have found to set an animation is to pass an anonymous class in on each `displayImage(...)` call (sample code in #35).\n\nIt would be great to be able to set a default `ImageLoadingListener`. Loading the animation on every `getView()` call is bad practice, the animation should be cached. This addition would make this much easier. You also wouldn't have to add an anonymous class to every `displayImage(...)` call in your app.\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/328/comments",
    "author": "austynmahoney",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2013-07-09T14:22:10Z",
        "body": "Try `DisplayImageOptions.displayer(BitmapDisplayer)`\n"
      },
      {
        "user": "austynmahoney",
        "created_at": "2013-07-09T15:31:00Z",
        "body": "That works great, thanks! I suggest updating #35 to reflect this, as that is what shows up when you Google \"UIL animation\".\n"
      }
    ],
    "satisfaction_conditions": [
      "Provides a way to configure a default animation/displayer at the configuration level rather than per-call",
      "Supports animation caching to prevent recreation on every image load",
      "Eliminates the need for repetitive anonymous class declarations in displayImage calls"
    ]
  },
  {
    "number": 123,
    "title": "Does Android-Universal-Image-Loader support Asset folder?",
    "created_at": "2012-12-17T18:14:47Z",
    "closed_at": "2012-12-18T03:46:57Z",
    "labels": [
      "Question"
    ],
    "url": "https://github.com/nostra13/Android-Universal-Image-Loader/issues/123",
    "body": "Hi nostra13,\n\nI was going to use this lib in my project, but after some searches, I couldn't figure out how to use this lib to load images from assets folder, even when I used \"file:///android_asset/... , it didn't work.\n\n``` java\n        mImageLoader.displayImage(\"file:///android_asset/\" + path, \n                iv, Const.displayImageOptions, \n                new SimpleImageLoadingListener()\n        {\n            @Override\n            public void onLoadingComplete(Bitmap loadedImage) {\n                Animation anim = AnimationUtils\n                        .loadAnimation(mContext, R.anim.fade_in);\n                iv.setAnimation(anim);\n                anim.start();\n            }\n        }); \n```\n\nIf it's possible, could you provide me some code? or even if I have to customized some code myself, please let me know how to do it.\n\nThanks in advance and sorry for my bad English :)\n",
    "comments_url": "https://api.github.com/repos/nostra13/Android-Universal-Image-Loader/issues/123/comments",
    "author": "mrleolink",
    "comments": [
      {
        "user": "nostra13",
        "created_at": "2012-12-17T18:42:33Z",
        "body": "Hi, \nLook into example project. I implemented example of using images from assets and drawables. Use `ExtendedImageDownloader` and **\"assets://\"** prefix.\n"
      },
      {
        "user": "mrleolink",
        "created_at": "2012-12-18T03:46:57Z",
        "body": "Hi,\nI've got it worked, sorry that I didn't look closely to your example.\nThank you so much.\nLeo!\n"
      },
      {
        "user": "ManojMM026",
        "created_at": "2012-12-31T08:19:12Z",
        "body": "hey @nostra13 @mrleolink  please help me with getting images from drawable folder using this library. can you paste snippet which will guide me to use this library with drawable folder.\nwhen i try to use ExtendedImageDownloader it gives me error ExtendedImageDownloader cannot be resolve to a type.\n\nI tried setting config from Example\n\nImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())\n            .threadPriority(Thread.NORM_PRIORITY - 2)\n            .memoryCacheSize(2 \\* 1024 \\* 1024) // 2 Mb\n            .denyCacheImageMultipleSizesInMemory()\n            .discCacheFileNameGenerator(new Md5FileNameGenerator())\n            .imageDownloader(new ExtendedImageDownloader(getApplicationContext()))\n            .tasksProcessingOrder(QueueProcessingType.LIFO)\n            .enableLogging() // Not necessary in common\n            .build();\n        // Initialize ImageLoader with configuration.\n        ImageLoader.getInstance().init(config);\n"
      },
      {
        "user": "nostra13",
        "created_at": "2012-12-31T10:01:20Z",
        "body": "@ManojMM026 `ExtendedImageDownloader` is not a part of the library yet. You should copy-paste it from example to your project..\n"
      },
      {
        "user": "YuvPrime",
        "created_at": "2015-02-25T17:27:59Z",
        "body": "@nostra13 Where is `ExtendedImageDownloader`? I couldn't find in your project. Can you pl give me the link?\n"
      },
      {
        "user": "nostra13",
        "created_at": "2015-02-26T18:52:32Z",
        "body": "`assets://...` scheme is supported out of box now\n"
      },
      {
        "user": "YuvPrime",
        "created_at": "2015-02-27T07:28:47Z",
        "body": "Thanks, it's working.\n"
      },
      {
        "user": "zdd",
        "created_at": "2015-08-17T02:48:53Z",
        "body": "Can I use subfolders in assets folder?\nlike this assets://images/test.png\n"
      }
    ],
    "satisfaction_conditions": [
      "Support for loading images from Android assets folder using the correct URI scheme",
      "Clear documentation of required URI prefixes for different resource types",
      "Native support without requiring custom ExtendedImageDownloader implementation",
      "Handling of nested asset subdirectories",
      "Backward compatibility guidance for library versions"
    ]
  }
]