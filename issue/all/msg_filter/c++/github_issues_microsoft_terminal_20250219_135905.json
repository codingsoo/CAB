[
  {
    "number": 10163,
    "title": "Saving SETTINGS.JSON starts 11 processes",
    "created_at": "2021-05-24T16:07:51Z",
    "closed_at": "2021-05-24T16:47:40Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-Settings",
      "Needs-Triage",
      "Product-Terminal",
      "Priority-3"
    ],
    "url": "https://github.com/microsoft/terminal/issues/10163",
    "body": "### Windows Terminal version (or Windows build number)\n\nMicrosoft Windows 10 Pro for Workstations 10.0.19042.985 (2009, 20H2) WindowsTerminal: 1.8.1092.0\n\n### Other Software\n\n_No response_\n\n### Steps to reproduce\n\nWith none of the WSL-related services running, open SETTINGS.JSON vie the settings UI and save it, noting the time.\r\n\r\nObserve the processes that were started at that time.\n\n### Expected Behavior\n\nSaving SETTINGS.JSON should not cause new processes to start.\n\n### Actual Behavior\n\nI saved the file at 11:53:21 and got\r\n\r\n```\r\nStart  Time            Pid       CPU(s)     WS(M)  Name\r\n--------------------------------------------------------------------------------\r\n05/24  11:53:21.392  10204        0.156      12.4  LxssManager             LxssManager\r\n05/24  11:53:21.439   6980        0.016      10.9  vmcompute               Hyper-V Host Compute Service\r\n05/24  11:53:21.587   5088        0.078      12.9  hns                     Host Network Service\r\n05/24  11:53:21.604   5204        0.078       7.5  nvagent                 Network Virtualization Service\r\n05/24  11:53:21.622   7548        0.031      18.8  SharedAccess            Internet Connection Sharing (ICS)\r\n05/24  11:53:21.666   9552        0.125       6.7  NetSetupSvc             NetSetupSvc\r\n05/24  11:53:21.457   9376        0.125      19.3  vmwp.exe\r\n05/24  11:53:21.478   3556        0.531     418.0  vmmem\r\n05/24  11:53:22.215  10188        0.016       4.8  wslhost.exe\r\n05/24  11:53:22.222   8164        0.000      10.9  conhost.exe\r\n05/24  11:53:22.235   3612        0.016       8.8  dllhost.exe\r\n```\r\n\r\nThat does not happen when I start WindowsTerminal, possibly because I have \"Windows.Terminal.Wsl\" among \"disabledProfileSources\".  My guess is that it need not happen when the settings are reloaded.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/10163/comments",
    "author": "vefatica",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2021-05-24T16:24:39Z",
        "body": "Huh. Weird that we'd boot WSL even if it is disabled. We probably shouldn't do that."
      },
      {
        "user": "vefatica",
        "created_at": "2021-05-24T16:46:32Z",
        "body": "Hmmm!  Apparently it's happening when the startingDirectory path in my user-defined Ubuntu profile is validated.  It doesn't happen if I comment out the startingDirectory.  Does it have to do that?\r\n\r\n```\r\n\"startingDirectory\": \"\\\\\\\\wsl$\\\\Ubuntu\\\\home\\\\vefatica\"\r\n```\r\n"
      },
      {
        "user": "DHowett",
        "created_at": "2021-05-24T16:47:25Z",
        "body": "Fortunately, I think we just removed the code that does that."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-05-24T16:47:40Z",
        "body": "Oh good catch! Turns out, _it won't anymore_! See #10045. We're gonna stop doing that in 1.9."
      },
      {
        "user": "vefatica",
        "created_at": "2021-05-24T16:49:42Z",
        "body": "That sounds good."
      }
    ]
  },
  {
    "number": 5936,
    "title": "Opening a new tab with ctrl+shift+1 provides no spoken feedback with NVDA",
    "created_at": "2020-05-16T09:24:01Z",
    "closed_at": "2022-02-16T00:00:47Z",
    "labels": [
      "Resolution-Fix-Available",
      "Help Wanted",
      "Issue-Bug",
      "Area-Accessibility",
      "Product-Terminal",
      "Priority-1"
    ],
    "url": "https://github.com/microsoft/terminal/issues/5936",
    "body": "# Environment\r\n\r\n```none\r\nWindows build number: 10.0.19041.264\r\nWindows Terminal version (if applicable): latest 0.11 preview\r\nNVDA: latest master snapshot alpha-20220,1c4519a6\r\n```\r\n\r\n# Steps to reproduce\r\n\r\n1. With NVDA running, open terminal. Press ctrl+shift+1 to open a new tab.\r\n\r\n# Expected behavior\r\n\r\nNVDA informs me about the newly opened tab. Output from subsequent commands in this new tab are automatically read out by NVDA.\r\n\r\n# Actual behavior\r\n\r\nSilence. No feedback is provided. Additionally, new text is not read until tabbing away and back into terminal (i.e, it needs to regain focus).",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/5936/comments",
    "author": "Neurrone",
    "comments": [
      {
        "user": "codeofdusk",
        "created_at": "2020-05-16T11:02:08Z",
        "body": "Cc @carlos-zamora @DHowett-MSFT."
      },
      {
        "user": "DHowett",
        "created_at": "2020-05-18T23:58:26Z",
        "body": "Thanks! Triaged into near-term."
      },
      {
        "user": "carlos-zamora",
        "created_at": "2022-02-16T00:00:47Z",
        "body": "Looks like this got fixed in #10971 and I'm unable to get a repro of this on 1.13.10395.0 too.\r\n\r\nI'm going to close this issue out as \"Resolution-Fix-Available\", but if you're still experiencing it, let me know and I'll reopen it."
      },
      {
        "user": "Neurrone",
        "created_at": "2022-02-16T06:35:32Z",
        "body": "I can confirm this is fixed now, thanks!"
      }
    ]
  },
  {
    "number": 5120,
    "title": "An option to swallow the trailing CRLF on paste",
    "created_at": "2020-03-25T21:00:16Z",
    "closed_at": "2021-12-09T18:32:24Z",
    "labels": [
      "Help Wanted",
      "Area-TerminalControl",
      "Area-Settings",
      "Needs-Attention",
      "Product-Terminal",
      "Issue-Task",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/5120",
    "body": "<!-- \r\n\ud83d\udea8\ud83d\udea8\ud83d\udea8\ud83d\udea8\ud83d\udea8\ud83d\udea8\ud83d\udea8\ud83d\udea8\ud83d\udea8\ud83d\udea8\r\n\r\nI ACKNOWLEDGE THE FOLLOWING BEFORE PROCEEDING:\r\n1. If I delete this entire template and go my own path, the core team may close my issue without further explanation or engagement.\r\n2. If I list multiple bugs/concerns in this one issue, the core team may close my issue without further explanation or engagement.\r\n3. If I write an issue that has many duplicates, the core team may close my issue without further explanation or engagement (and without necessarily spending time to find the exact duplicate ID number).\r\n4. If I leave the title incomplete when filing the issue, the core team may close my issue without further explanation or engagement.\r\n5. If I file something completely blank in the body, the core team may close my issue without further explanation or engagement.\r\n\r\nAll good? Then proceed!\r\n-->\r\n\r\n# Description of the new feature/enhancement\r\n\r\n<!-- \r\nA clear and concise description of what the problem is that the new feature would solve.\r\nDescribe why and how a user would use this new functionality (if applicable).\r\n-->\r\n\r\nWhenever I paste a line with a trailing CRLF in Terminal, it gets executed immediately. I'd like to have an option for Terminal to swallow the trailing CRLF, so it would be safe to paste text.\r\n\r\n# Proposed technical implementation details (optional)\r\n\r\n<!-- \r\nA clear and concise description of what you want to happen.\r\n-->\r\n\r\nI don't have any suggestions on implementation, but ConEmu has an option like that.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/5120/comments",
    "author": "wasker",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2020-03-26T01:09:10Z",
        "body": "Yeah, we might as well have something like this. Somebody needs to suggest a config option (and whether it's profile-specific), and explain how it works when there's multiple newlines.\r\n\r\nFor reference, #395 is the holistic solution to this problem when all shells and applications eventually support it."
      },
      {
        "user": "zadjii-msft",
        "created_at": "2021-12-09T15:23:17Z",
        "body": "You know, we also discussed this over in 9400 and have a proposed fix in #11473. To quoth:\r\n\r\n> just to trim the trailing newline if that's the only one in the paste contents. To quote: \"It doesn't make sense to be warned for multiple lines, but copy a single line and try to paste it AND ONLY SEE ONE LINE IN THE DIALOG. That's dumb\".\r\n\r\n@wasker you think that'll work for you?"
      },
      {
        "user": "wasker",
        "created_at": "2021-12-09T18:29:22Z",
        "body": "@zadjii-msft Yeah, I think this is a decent resolution for this bug, thanks!"
      }
    ]
  },
  {
    "number": 3785,
    "title": "Fullscreen on secondary display has has more than double the expected width",
    "created_at": "2019-11-30T09:24:48Z",
    "closed_at": "2020-01-06T21:12:31Z",
    "labels": [
      "Resolution-Fix-Available",
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Product-Terminal"
    ],
    "url": "https://github.com/microsoft/terminal/issues/3785",
    "body": "# Environment\r\n\r\n```none\r\nWindows build number: 10.0.18363.0\r\nWindows Terminal version (if applicable): 0.7.3291.0\r\n```\r\n\r\nTwo displays on same nvidia GPU (441.41 drivers). Primary is 2560x1440, secondary positioned to the left is 1920x1200.\r\n\r\n# Steps to reproduce\r\n\r\nUse powershell `$Host.UI.RawUI.WindowSize` to check dimensions of terminal both maximized and fullscreen.\r\n\r\n# Expected behavior\r\n\r\nFullscreen terminal should report at most a handful of extra rows/cols compared to a maximized window (accounting for space consumed by window border/task bar).\r\n\r\n# Actual behavior\r\n\r\nFor primary monitor as expected:\r\nMaximized: 229x61\r\nFullscreen: 231x63\r\n\r\nOn secondary monitor *gigantic* width in fullscreen:\r\nMaximized: 171x50\r\nFullscreen: **348**x52\r\n\r\nThe fullscreen window itself is still correctly sized to the display.  The left/top/bottom edges of the terminal content are aligned to the matching edges of the window (or approximately when fullscreened directly from maximized ala #3709).  The extra columns aren't visible beyond the right edge of the window.",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/3785/comments",
    "author": "krage",
    "comments": [
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-12-02T20:54:36Z",
        "body": "This may (???) be helped by #3721?"
      },
      {
        "user": "krage",
        "created_at": "2019-12-03T21:51:53Z",
        "body": "I've built a copy of that branch in #3721 and it does appear to fix this behavior for me.\r\n\r\nI removed my settings file to directly compare the powershell-reported dimensions of the built-in defaults across both:\r\n\r\n## Release Build\r\nPrimary Display Maximized 280x64\r\nPrimary Display Fullscreen (from non-maximized) 280x67\r\nPrimary Display Fullscreen (from maximized) 283x67\r\nSecondary Display Maximized 209x52\r\nSecondary Display Fullscreen (from non-maximized) 423x56\r\nSecondary Display Fullscreen (from maximized) 425x55\r\n\r\n## #3721 Build\r\nPrimary Display Maximized 280x64\r\nPrimary Display Fullscreen (from non-maximized) 280x67\r\nPrimary Display Fullscreen (from maxmimized) 280x67\r\nSecondary Display Maximized 209x52\r\nSecondary Display Fullscreen (from non-maximized) 209x56\r\nSecondary Display Fullscreen (from maximized) 209x56\r\n\r\nSo can confirm on my setup at least that it fixes both the incorrect width on secondary display and the fullscreen from maximize issues.\r\n\r\n\r\n"
      }
    ]
  },
  {
    "number": 2756,
    "title": "Highlighting (copying) from left edge of window with cursor in full screen fails",
    "created_at": "2019-09-14T05:00:12Z",
    "closed_at": "2019-09-21T14:43:09Z",
    "labels": [
      "Help Wanted",
      "Issue-Bug",
      "Area-UserInterface",
      "Area-TerminalControl",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/2756",
    "body": "# Environment\r\n10.0.18362.0 Terminal: 0.4.2382.0\r\n\r\n# Steps to reproduce\r\n\r\nMaximize the terminal window.  Move cursor all the way to the left of the screen and start dragging to highlight the text on that row.\r\n\r\n# Expected behavior\r\n\r\nIt starts highlighting the row you are on (the text).  This is similar to putty, cmd, and powershell outside of terminal.\r\n\r\n# Actual behavior\r\n\r\nThe row you are on is not highlighted.  You must click on the first character of the row, not to the left of it.\r\n\r\nThis requires for more precise highlighting to avoid missing what you want to copy and is far slower.\r\n",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/2756/comments",
    "author": "mitchcapper",
    "comments": [
      {
        "user": "mcpiroman",
        "created_at": "2019-09-21T12:13:11Z",
        "body": "Does this happen also in non-maximized window and not happen if you disable padding?\r\nIf yes, then this is #1367"
      },
      {
        "user": "mitchcapper",
        "created_at": "2019-09-21T14:43:09Z",
        "body": "@mcpiroman indeed, good catch lets hope #1672 or a similar fix gets merged soon.  For now padding off works to solve:)  Closing as dupe."
      }
    ]
  },
  {
    "number": 1971,
    "title": "Ctrl+W doesn't terminate shells properly (so they can't do teardown and cleanup things)",
    "created_at": "2019-07-14T23:02:53Z",
    "closed_at": "2020-12-17T17:24:51Z",
    "labels": [
      "Help Wanted",
      "Area-Interop",
      "Issue-Bug",
      "Product-Terminal",
      "Needs-Tag-Fix"
    ],
    "url": "https://github.com/microsoft/terminal/issues/1971",
    "body": "# Environment\r\n\r\nWindows build number: Microsoft Windows [Version 10.0.18917.1000]\r\nWindows Terminal version (if applicable): 0.2.1831.0\r\n\r\n# Steps to reproduce\r\n\r\nExit a mingw bash shell using a keyboard shortcut to close the tab\r\n\r\n# Expected behavior\r\n\r\n`exit` is sent to the shell, process is terminated, if closing a running process the user is warned\r\n\r\n# Actual behavior\r\n\r\nTerminal is detached and not killed",
    "comments_url": "https://api.github.com/repos/microsoft/terminal/issues/1971/comments",
    "author": "axfelix",
    "comments": [
      {
        "user": "zadjii-msft",
        "created_at": "2019-07-15T21:51:54Z",
        "body": "Maybe we need to consider having an `exitCommand` setting? Though, what would happen if you launched a process from bash where `exit` did _not_ exit the program? For example, `vim`. How would we determine when to send `exit` to the commandline application?"
      },
      {
        "user": "axfelix",
        "created_at": "2019-07-15T22:15:51Z",
        "body": "Most terminal apps I've used on other platforms will warn when pressing Ctrl+W if anything else is running, on the assumption that the user probably doesn't want to kill the shell after all, and if they really do then probably all bets are off (you could send Ctrl+C then exit but that's a much less predictable use case anyway). "
      },
      {
        "user": "DHowett-MSFT",
        "created_at": "2019-07-15T22:16:15Z",
        "body": "This is absolutely a bug, we shouldn't go and add a new \"command to send on exit\". That's probably not a winning strategy.\r\n\r\nWe constrain our shells into job objects, so they _should_ absolutely be getting terminated when the tab is closed."
      },
      {
        "user": "wuss912",
        "created_at": "2019-10-25T20:57:22Z",
        "body": "CTRL + W is also used in a number of curses based apps... need a way to disable it as a kill switch so it can pass through instead"
      },
      {
        "user": "axfelix",
        "created_at": "2019-10-25T21:06:15Z",
        "body": "yup, that's why Mac has separation between Ctrl and Cmd, and Linux terminals use Ctrl+Shift for any terminal window shortcuts so that Ctrl shortcuts can be sent directly to the term. Not sure if you want to adopt that convention here too."
      },
      {
        "user": "tats-u",
        "created_at": "2019-10-29T01:46:30Z",
        "body": "Ctrl+Shift+W must be used to close the terminal instead.\r\n\r\nCtrl + W -> Split, Toggle, or something else panes (with alphabetic keys) in Vim, or Cut selected text or Write current file (with Ctrl +X) in Emacs\r\nCtrl + C -> Quit current application\r\nCtrl + V -> Start selecting text in Vim or PageDown in Emacs"
      },
      {
        "user": "shtirlic",
        "created_at": "2020-03-18T18:32:52Z",
        "body": "+1 to `exitCommand `\r\nI use terminal with docker desktop, running as default ENV for development, every new tab started with command like `docker start -ti dev_env zsh`, so when I close the tab, I would like to send `exit 0` to the zsh process, and then tab will be closed since exit code is 0.\n\n---\n\nAlso update I can autoclose background zsh process with setting TMOUT env for idle timeout as workaround but it's not good because when you leave tabs open it's closes after  TMOUT time, since there is no SIGALRM handling."
      },
      {
        "user": "fprimex",
        "created_at": "2020-12-10T04:58:21Z",
        "body": "I was editing in vim and using `:vert sp` when I discovered this behavior trying to change between splits. There should be an option or default behavior to not close the window with Ctrl+W. On non-mac systems, as @tats-u mentioned, ctrl+shift+w is the keyboard shortcut for window closing.\r\n\r\nI feel like this is perhaps a separate issue from not cleaning up the shells. If that's the case I can open a new issue."
      },
      {
        "user": "DHowett",
        "created_at": "2020-12-10T05:17:14Z",
        "body": "Hey @fprimex! Thanks for sticking with us since version 0.2! We actually changed the default for all new users to have `closePane` bound to `ctrl+shift+w` back in v0.3, in July 2019.\r\n\r\nIt might be a good time to refresh your settings file! Back up the bindings and profiles you care about, delete the file, and let Terminal make a new one. Things have changed _a lot_ since the default was `ctrl+w` for that action. :smile: "
      },
      {
        "user": "fprimex",
        "created_at": "2020-12-10T05:33:18Z",
        "body": "Hmm. This is a fresh install from the app store on a recently new-to-me machine that I only got in the past month. All I have changes are the prev & next tab bindings. I will review everything & see if I went wrong somewhere doing the install.\n\n---\n\nAlrighty, seems fine. Not sure where I went wrong. Maybe I managed to fat finger across ctrl and shift twice earlier lol. Thanks!"
      },
      {
        "user": "axfelix",
        "created_at": "2020-12-17T17:24:22Z",
        "body": "This seems to be working now -- I think I'll close this issue. Thanks!"
      }
    ]
  }
]